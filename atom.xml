<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mengchao666</title>
  
  <subtitle>个人记录</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-25T15:00:09.324Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红黑树</title>
    <link href="http://example.com/posts/%E7%BA%A2%E9%BB%91%E6%A0%91.html"/>
    <id>http://example.com/posts/%E7%BA%A2%E9%BB%91%E6%A0%91.html</id>
    <published>2024-11-25T14:59:37.000Z</published>
    <updated>2024-11-25T15:00:09.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-红黑树的原理"><a href="#一、-红黑树的原理" class="headerlink" title="一、 红黑树的原理"></a>一、 红黑树的原理</h3><p>红黑树RB Tree是二叉树的一种，作为一种自平衡二叉树（一些情况下不是完全平衡的），它在最坏的情况下查询复杂度为O(logN)𝑂(𝑙𝑜𝑔𝑁)。与AVL树类似，尽管RB Tree查询效率不如AVL树（因为RB Tree左右子树高度差距最多接近两倍，而AVL树始终保持左右子树高度最多不超过1），但其插入删除效率高，适合用于大数据量且更新频繁的场景，例如内核IO调度算法。<br />红黑树在二叉树的基础上做了如下约束：</p><ol><li>树种全部节点要么是黑色要么是红色</li><li>树的根节点是黑色的</li><li>叶节点（指NULL节点）颜色为黑色</li><li>红色节点之间不能相邻</li><li>一个节点的左子树和右子树高度（只统计黑色节点）相同</li></ol><p>在介绍红黑树的操作前，我们先说明以下几点惯例：</p><ul><li>&#x3D;&#x3D;所有节点在插入的时候都将是红色节点（不包括根节点，其插入时是黑色的）&#x3D;&#x3D;，这样有一个好处是可以不违反约束1，2，3和5，对于约束1，2和3是显然的，对于5，由于添加红色节点并不会影响其父节点及以上节点左右子树黑色节点数量，故不违反约束5。因此，在插入节点后，只需判断是否违反约束4。</li><li>&#x3D;&#x3D;一颗红黑树中，某一节点左右子树节点高度差不会超过2倍&#x3D;&#x3D;，考虑一种极限情况：左子树黑色节点高度为x，且最长路径中不存在红色节点，这是允许的，右子树有黑色节点高度为x，这样满足约束5，除此之外，右子树最长路径黑色几点之间都由红色节点隔开（满足约束4），故右子树总高度为2x-1，约等于2x。</li></ul><h3 id="二、红黑树操作"><a href="#二、红黑树操作" class="headerlink" title="二、红黑树操作"></a>二、红黑树操作</h3><p>在Linux内核代码中仅提供了红黑树节点链接、索引、调整、删除等基础操作，不包含特定含义的查询、插入等操作：</p><ul><li><code>void rb_insert_color(struct rb_node *, struct rb_root *);</code>，检查调整一个指定节点，通常与<code>rb_link_node</code>搭配使用；</li><li><code>void rb_erase(struct rb_node *, struct rb_root *);</code>，从树中删除一个指定节点；</li><li><code>struct rb_node *rb_next(struct rb_node *);</code>，返回一个节点的下一个节点（顺序的）；</li><li><code>struct rb_node *rb_prev(struct rb_node *);</code>，返回一个节点的上一个节点（顺序的）；</li><li><code>struct rb_node *rb_first(struct rb_root *);</code>，返回树中的第一个节点（顺序的）；</li><li><code>struct rb_node *rb_last(struct rb_root *);</code>，返回树中的最后一个节点（顺序的）；</li><li><code>void rb_replace_node(struct rb_node *victim, struct rb_node *new, struct rb_root *root);</code>，用<code>new</code>替换节点<code>victim</code>；</li><li><code>inline void rb_link_node(struct rb_node * node, struct rb_node * parent, struct rb_node ** rb_link)</code>，将一个节点链接到树中指定位置，<code>parent</code>是父节点，<code>rb_link</code>指定了链接父节点的位置是左还是右。</li></ul><h4 id="2-1-红黑树的节点插入"><a href="#2-1-红黑树的节点插入" class="headerlink" title="2.1 红黑树的节点插入"></a>2.1 红黑树的节点插入</h4><p>根据第一个部分我们所讲的内容可知，一个节点插入RB Tree时会被染成红色，因此只需要检查插入时是否违反规则4，既插入节点与其父节点是否都是红色，然后做出相应的调整，这些工作由<code>rb_insert_color</code>函数完成，其主要分以下三种情况，第一种是父节点为黑色，那么不需要做任何事情，插入红节点后该树仍然符合所有规则。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">rb_insert_color</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">parent</span>, *<span class="hljs-title">gparent</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((parent = node-&gt;rb_parent) &amp;&amp; parent-&gt;rb_color == RB_RED)<br>    &#123;<br>        ... <span class="hljs-comment">// 检查与处理</span><br>    &#125;<br><br>    root-&gt;rb_node-&gt;rb_color = RB_BLACK; <span class="hljs-comment">// 保证根节点是黑色的</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由代码可知，只要父节点为黑色那么可以直接退出。第二种情况是父节点为红色，此时违反规则4，但是其叔父节点（父节点的父节点的另一个子节点）也是红色，如下图所示，左边四个树包含了全部这种情况，A是祖父，B是插入节点的父节点，E是插入节点。<br /></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240324144319658-1183105020.png"></p><p>这种情况下，可以直接将父节点和叔父节点染成黑色，祖父节点染成红色，这样插入节点的父节点解决了规则4，同时祖父节点左右子树黑色节点高度仍然相同，例如上图中的第5棵树，之后将祖父节点作为插入节点继续向上检查，下面的代码执行的正是这一步骤：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">rb_insert_color</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">parent</span>, *<span class="hljs-title">gparent</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((parent = node-&gt;rb_parent) &amp;&amp; parent-&gt;rb_color == RB_RED)<br>    &#123;<br>        gparent = parent-&gt;rb_parent; <span class="hljs-comment">// 祖父节点</span><br><br>        <span class="hljs-keyword">if</span> (parent == gparent-&gt;rb_left)<br>        &#123;<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">uncle</span> =</span> gparent-&gt;rb_right;<br>                <span class="hljs-keyword">if</span> (uncle &amp;&amp; uncle-&gt;rb_color == RB_RED)<br>                &#123;<br>                    uncle-&gt;rb_color = RB_BLACK;<br>                    parent-&gt;rb_color = RB_BLACK;<br>                    gparent-&gt;rb_color = RB_RED;<br>                    node = gparent;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            ... <span class="hljs-comment">// 其他检查和处理</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> rb_node *uncle = gparent-&gt;rb_left;<br>                <span class="hljs-keyword">if</span> (uncle &amp;&amp; uncle-&gt;rb_color == RB_RED)<br>                &#123;<br>                    uncle-&gt;rb_color = RB_BLACK;<br>                    parent-&gt;rb_color = RB_BLACK;<br>                    gparent-&gt;rb_color = RB_RED;<br>                    node = gparent;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            ... <span class="hljs-comment">// 其他检查和处理</span><br>        &#125;<br>    &#125;<br><br>    root-&gt;rb_node-&gt;rb_color = RB_BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三种情况最为复杂，由于叔父节点不再是红色，故不能只靠染色来解决，其可分为以下四种：</p><ol><li>插入节点为父节点的右节点，父节点为祖父节点的左节点；</li><li>插入节点为父节点的左节点，父节点为祖父节点的左节点；</li><li>插入节点为父节点的右节点，父节点为祖父节点的右节点；</li><li>插入节点为父节点的左节点，父节点为祖父节点的右节点；</li></ol><p>在这四种中，第2种（左左）和第3种（右右）需要先进行一次染色解决规则4冲突，然后经过旋转解决染色后的规则5冲突。以左左为例，先将父节点染成黑色，祖父节点染成红色，此时不再有颜色冲突，但是规则5出现冲突，因为左子树显然多出一个黑色节点，所以接下来祖父节点右旋，将父节点作为祖父节点，这样就完成了两个恰到好处的事情：1）祖父节点位置的颜色再次变为黑色，这必然使得祖父不会破坏规则4；2）由于原祖父节点染成红色，所以即使其变成了右子树的节点也不影响规则5。下图展示了这一过程：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240324160538162-1068851558.png"></p><p>对于右右，其与左左区别在于使用左旋，原理可以参考左左自行推断。<br />对于第1种（右左）和第4种（左右），需要多增加一个旋转，使其变为左左或者右右，然后便可按照左左&#x2F;右右的规则调整RB Tree，下图展示了右左的调整过程。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240324154716488-957268159.png"></p><p>需要注意的是，不论是这四种中的哪种，最后操作的结果实际上都是在祖父节点和叔父节点直接新插入了红色节点，祖父节点颜色并没有改变，而且黑色节点数量也没有改变，所以在调整结束后无需继续向上检查。下面是内核中关于第三种情况的处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_rotate_left(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">right</span> =</span> node-&gt;rb_right;<br><br>    <span class="hljs-keyword">if</span> ((node-&gt;rb_right = right-&gt;rb_left))<br>        right-&gt;rb_left-&gt;rb_parent = node;<br>    right-&gt;rb_left = node;<br><br>    <span class="hljs-keyword">if</span> ((right-&gt;rb_parent = node-&gt;rb_parent))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (node == node-&gt;rb_parent-&gt;rb_left)<br>            node-&gt;rb_parent-&gt;rb_left = right;<br>        <span class="hljs-keyword">else</span><br>            node-&gt;rb_parent-&gt;rb_right = right;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        root-&gt;rb_node = right;<br>    node-&gt;rb_parent = right;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_rotate_right(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">left</span> =</span> node-&gt;rb_left;<br><br>    <span class="hljs-keyword">if</span> ((node-&gt;rb_left = left-&gt;rb_right))<br>        left-&gt;rb_right-&gt;rb_parent = node;<br>    left-&gt;rb_right = node;<br><br>    <span class="hljs-keyword">if</span> ((left-&gt;rb_parent = node-&gt;rb_parent))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (node == node-&gt;rb_parent-&gt;rb_right)<br>            node-&gt;rb_parent-&gt;rb_right = left;<br>        <span class="hljs-keyword">else</span><br>            node-&gt;rb_parent-&gt;rb_left = left;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        root-&gt;rb_node = left;<br>    node-&gt;rb_parent = left;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rb_insert_color</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">parent</span>, *<span class="hljs-title">gparent</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((parent = node-&gt;rb_parent) &amp;&amp; parent-&gt;rb_color == RB_RED)<br>    &#123;<br>        gparent = parent-&gt;rb_parent;<br><br>        <span class="hljs-keyword">if</span> (parent == gparent-&gt;rb_left)<br>        &#123;<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">uncle</span> =</span> gparent-&gt;rb_right;<br>                ... <span class="hljs-comment">// 叔父为红色的处理</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (parent-&gt;rb_right == node)<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">tmp</span>;</span><br>                __rb_rotate_left(parent, root);<br>                tmp = parent; <br>                parent = node;<br>                node = tmp;<br>            &#125;<br><br>            parent-&gt;rb_color = RB_BLACK;<br>            gparent-&gt;rb_color = RB_RED;<br>            __rb_rotate_right(gparent, root);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> rb_node *uncle = gparent-&gt;rb_left;<br>                ... <span class="hljs-comment">// 叔父为红色的处理</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">tmp</span>;</span><br>                __rb_rotate_right(parent, root);<br>                tmp = parent;<br>                parent = node;<br>                node = tmp;<br>            &#125;<br><br>            parent-&gt;rb_color = RB_BLACK;<br>            gparent-&gt;rb_color = RB_RED;<br>            __rb_rotate_left(gparent, root);<br>        &#125;<br>    &#125;<br><br>    root-&gt;rb_node-&gt;rb_color = RB_BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Linux内核中，如果需要插入一个节点到RB Tree中，需要执行以下几步：</p><ol><li>遍历RB Tree，找到新节点插入位置；</li><li>调用<code>rb_link_node</code>将节点链接到1找到的位置；</li><li>调用<code>rb_insert_color</code>调整RB Tree，使其符合规则。</li></ol><h4 id="2-2-红黑树的节点删除"><a href="#2-2-红黑树的节点删除" class="headerlink" title="2.2 红黑树的节点删除"></a>2.2 红黑树的节点删除</h4><p>红黑树的删除比插入操作更为复杂，其分为两个阶段，第一个阶段先删除节点，其技巧为：如果删除节点只有一个孩子或者没孩子，那么直接删除该节点，并链接父节点和孩子节点，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">rb_erase</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">child</span>, *<span class="hljs-title">parent</span>;</span><br>    <span class="hljs-type">int</span> color;<br><br>    <span class="hljs-keyword">if</span> (!node-&gt;rb_left)<br>        child = node-&gt;rb_right;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!node-&gt;rb_right)<br>        child = node-&gt;rb_left;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ... <span class="hljs-comment">// 有两个孩子的操作</span><br>    &#125;<br><br>    parent = node-&gt;rb_parent;<br>    color = node-&gt;rb_color;<br><br>    <span class="hljs-comment">// 链接父节点和孩子节点</span><br>    <span class="hljs-keyword">if</span> (child)<br>        child-&gt;rb_parent = parent;<br>    <span class="hljs-keyword">if</span> (parent)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>            parent-&gt;rb_left = child;<br>        <span class="hljs-keyword">else</span><br>            parent-&gt;rb_right = child;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        root-&gt;rb_node = child;<br><br> color: <span class="hljs-comment">// 第二阶段：调整</span><br>    <span class="hljs-keyword">if</span> (color == RB_BLACK)<br>        __rb_erase_color(child, parent, root);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果有两个孩子，那么选择删除节点的顺序下一个节点替换删除节点，既删除位置变到了删除节点的顺序下一个节点的原先位置，这样可以保证删除节点只有一个右子树（因为删除节点的顺序下一个节点是删除节点的右子树的最左边的叶子节点），代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">rb_erase</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">child</span>, *<span class="hljs-title">parent</span>;</span><br>    <span class="hljs-type">int</span> color;<br><br>    <span class="hljs-keyword">if</span> (!node-&gt;rb_left)<br>        ...<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!node-&gt;rb_right)<br>        ...<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">struct</span> rb_node *old = node, *left;<br><br>        node = node-&gt;rb_right;<br>        <span class="hljs-keyword">while</span> ((left = node-&gt;rb_left) != <span class="hljs-literal">NULL</span>)<br>            node = left;<br>        <span class="hljs-comment">// 此时 node 为 删除节点的顺序下一个节点（只有右子树或者无孩子），old 为原删除节点</span><br>        child = node-&gt;rb_right;<br>        parent = node-&gt;rb_parent;<br>        color = node-&gt;rb_color;<br><br>        <span class="hljs-comment">// 链接删除节点的顺序下一个节点的孩子节点和父节点</span><br>        <span class="hljs-keyword">if</span> (child)<br>            child-&gt;rb_parent = parent;<br>        <span class="hljs-keyword">if</span> (parent)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>                parent-&gt;rb_left = child;<br>            <span class="hljs-keyword">else</span><br>                parent-&gt;rb_right = child;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            root-&gt;rb_node = child;<br><br>        <span class="hljs-keyword">if</span> (node-&gt;rb_parent == old) <span class="hljs-comment">// 由于 old 是待删除节点，而 parent 此时指向 old，所以要将 parent 指向新的 node</span><br>            parent = node;<br>        <span class="hljs-comment">// node 节点替换原删除节点</span><br>        node-&gt;rb_parent = old-&gt;rb_parent;<br>        node-&gt;rb_color = old-&gt;rb_color;<br>        node-&gt;rb_right = old-&gt;rb_right;<br>        node-&gt;rb_left = old-&gt;rb_left;<br><br>        <span class="hljs-comment">// 将新 node 链接到原删除节点 old 的父节点上</span><br>        <span class="hljs-keyword">if</span> (old-&gt;rb_parent)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (old-&gt;rb_parent-&gt;rb_left == old)<br>                old-&gt;rb_parent-&gt;rb_left = node;<br>            <span class="hljs-keyword">else</span><br>                old-&gt;rb_parent-&gt;rb_right = node;<br>        &#125; <span class="hljs-keyword">else</span><br>            root-&gt;rb_node = node;<br><br>        <span class="hljs-comment">// 将新 node 链接到原删除节点 old 的子节点上</span><br>        old-&gt;rb_left-&gt;rb_parent = node;<br>        <span class="hljs-keyword">if</span> (old-&gt;rb_right) <span class="hljs-comment">// 可能删除的右子树只有一个节点，删除后变为NULL</span><br>            old-&gt;rb_right-&gt;rb_parent = node;<br>        <span class="hljs-keyword">goto</span> color;<br>    &#125;<br><br> color: <span class="hljs-comment">// 第二阶段：调整</span><br>    <span class="hljs-keyword">if</span> (color == RB_BLACK)<br>        __rb_erase_color(child, parent, root);<br>&#125;<br></code></pre></td></tr></table></figure><p>第二阶段</p><p>当在第一阶段确定了删除节点位置（通常其只有一个子树或者没有子树）后，将会检查是否要进行调色和旋转使得节点删除后的RB Tree再次符合规则。我们在下面通过5种大的情况来讲解这一操作。<br />(1) 最简单的情况是：我们删除的节点颜色是红色的，这意味着节点删除后，子树连接到其父节点后黑色节点高度不变，因此无需调整，这点可以在<code>rb_erase</code>函数的最后印证，因为只有删除节点为黑色才需要执行<code>__rb_erase_color</code>函数。</p><p>(2) 稍微复杂的一种情况是：我们删除的节点B颜色是黑色，同时其父节点的另一个孩子节点C颜色也是黑色且其左右孩子节点E&#x2F;F也为黑色。由于父节点A的一边少了一个黑色节点，所以应该把另一边的黑色节点染成红色，这样父节点A的左右黑色节点高度相同，而且C和E&#x2F;F节点颜色不冲突。对于父节点A，如果其为红色，那正好，将其染色为黑色，这样以A为根的子树高度又恢复原样，且颜色也不会冲突；如果A为黑色，那么就要继续向上检查调整，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_erase_color(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<br>                 <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">other</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((!node || node-&gt;rb_color == RB_BLACK) &amp;&amp; node != root-&gt;rb_node)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>        &#123;<br>            other = parent-&gt;rb_right;<br>            <span class="hljs-keyword">if</span> (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                other-&gt;rb_color = RB_RED;<br>                node = parent;<br>                parent = node-&gt;rb_parent;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ...<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            other = parent-&gt;rb_left;<br>            <span class="hljs-keyword">if</span> (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                other-&gt;rb_color = RB_RED;<br>                node = parent;<br>                parent = node-&gt;rb_parent;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ...<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (node)<br>        node-&gt;rb_color = RB_BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面以删除节点为左子树为例展示了调色过程：<br /></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240331170002381-854800943.png"></p><p>(3) 我们删除的节点B颜色是黑色的，同时其父节点A的另一个孩子节点C颜色是黑色的，而C左孩子节点E为黑色，右孩子节点F为红色。对于这种情况，可以将父节点染色成黑色左旋&#x2F;右旋使得删除节点一侧增加一个黑色节点，对于另一边，因为C因为旋转变成了子树根节点，所以其应该继承原先子树根节点颜色。除此之外，由于C不再是子树节点，所以少了一个黑色节点，所以要把F染成黑色，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_erase_color(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<br>                 <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">other</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((!node || node-&gt;rb_color == RB_BLACK) &amp;&amp; node != root-&gt;rb_node)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>        &#123;<br>            other = parent-&gt;rb_right;<br>            <span class="hljs-keyword">if</span> (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!other-&gt;rb_right ||<br>                    other-&gt;rb_right-&gt;rb_color == RB_BLACK)<br>                &#123;<br>                    ...<br>                &#125;<br>                other-&gt;rb_color = parent-&gt;rb_color;<br>                parent-&gt;rb_color = RB_BLACK;<br>                <span class="hljs-keyword">if</span> (other-&gt;rb_right)<br>                    other-&gt;rb_right-&gt;rb_color = RB_BLACK;<br>                __rb_rotate_left(parent, root);<br>                node = root-&gt;rb_node;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            other = parent-&gt;rb_left;<br>            <span class="hljs-keyword">if</span> (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!other-&gt;rb_left ||<br>                    other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &#123;<br>                    ...<br>                &#125;<br>                other-&gt;rb_color = parent-&gt;rb_color;<br>                parent-&gt;rb_color = RB_BLACK;<br>                <span class="hljs-keyword">if</span> (other-&gt;rb_left)<br>                    other-&gt;rb_left-&gt;rb_color = RB_BLACK;<br>                __rb_rotate_right(parent, root);<br>                node = root-&gt;rb_node;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (node)<br>        node-&gt;rb_color = RB_BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面以删除节点为左子树为例展示了调色过程：<br /></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240331170232219-236724999.png"></p><p>(4) 我们删除的节点B颜色是黑色的，同时其父节点A的另一个孩子节点C颜色是黑色的，而C左孩子节点E为红色，右孩子节点F为黑色。对于这种情况，应该先经过染色和旋转将其变为情况(3)。其过程为将C染成红色右旋，这样C原先这颗子树左右子树黑色节点高度不变，只是C和E颜色冲突，不过这不用担心，按照(3)的方法，C最后变成黑色，而E变成了原先A的颜色，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cstatic">                 struct rb_root *root)<br>&#123;<br>    struct rb_node *other;<br><br>    while ((!node || node-&gt;rb_color == RB_BLACK) &amp;&amp; node != root-&gt;rb_node)<br>    &#123;<br>        if (parent-&gt;rb_left == node)<br>        &#123;<br>            other = parent-&gt;rb_right;<br>            if (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                ...<br>            &#125;<br>            if ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                ...<br>            &#125;<br>            else<br>            &#123;<br>                if (!other-&gt;rb_right ||<br>                    other-&gt;rb_right-&gt;rb_color == RB_BLACK)<br>                &#123;<br>                    register struct rb_node *o_left;<br>                    if ((o_left = other-&gt;rb_left))<br>                        o_left-&gt;rb_color = RB_BLACK;<br>                    other-&gt;rb_color = RB_RED;<br>                    __rb_rotate_right(other, root);<br>                    other = parent-&gt;rb_right;<br>                &#125;<br>                other-&gt;rb_color = parent-&gt;rb_color;<br>                parent-&gt;rb_color = RB_BLACK;<br>                if (other-&gt;rb_right)<br>                    other-&gt;rb_right-&gt;rb_color = RB_BLACK;<br>                __rb_rotate_left(parent, root);<br>                node = root-&gt;rb_node;<br>                break;<br>            &#125;<br>        &#125;<br>        else<br>        &#123;<br>            other = parent-&gt;rb_left;<br>            if (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                ...<br>            &#125;<br>            if ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                ...<br>            &#125;<br>            else<br>            &#123;<br>                if (!other-&gt;rb_left ||<br>                    other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &#123;<br>                    register struct rb_node *o_right;<br>                    if ((o_right = other-&gt;rb_right))<br>                        o_right-&gt;rb_color = RB_BLACK;<br>                    other-&gt;rb_color = RB_RED;<br>                    __rb_rotate_left(other, root);<br>                    other = parent-&gt;rb_left;<br>                &#125;<br>                other-&gt;rb_color = parent-&gt;rb_color;<br>                parent-&gt;rb_color = RB_BLACK;<br>                if (other-&gt;rb_left)<br>                    other-&gt;rb_left-&gt;rb_color = RB_BLACK;<br>                __rb_rotate_right(parent, root);<br>                node = root-&gt;rb_node;<br>                break;<br>            &#125;<br>        &#125;<br>    &#125;<br>    if (node)<br>        node-&gt;rb_color = RB_BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面以删除节点为左子树为例展示了调色过程：<br /></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240331172122810-1623435620.png"></p><p>(5) 我们删除的节点B颜色是黑色的，同时其父节点A的另一个孩子节点C颜色是红色的。对于这种情况，意味着父节点A必定为黑色的，而C的E&#x2F;F孩子节点为黑色的，因此我们可以通过将A染成红色左旋&#x2F;右旋，然后C染成黑色，这样，这颗子树黑色节点高度不变，同时删除节点一侧的子树变成了(3)或者(4)的情况，因为经过旋转，A的右节点变成了黑色，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cstatic">                 struct rb_root *root)<br>&#123;<br>    struct rb_node *other;<br><br>    while ((!node || node-&gt;rb_color == RB_BLACK) &amp;&amp; node != root-&gt;rb_node)<br>    &#123;<br>        if (parent-&gt;rb_left == node)<br>        &#123;<br>            other = parent-&gt;rb_right;<br>            if (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                other-&gt;rb_color = RB_BLACK;<br>                parent-&gt;rb_color = RB_RED;<br>                __rb_rotate_left(parent, root);<br>                other = parent-&gt;rb_right;<br>            &#125;<br>            ...<br>        &#125;<br>        else<br>        &#123;<br>            other = parent-&gt;rb_left;<br>            if (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                other-&gt;rb_color = RB_BLACK;<br>                parent-&gt;rb_color = RB_RED;<br>                __rb_rotate_right(parent, root);<br>                other = parent-&gt;rb_left;<br>            &#125;<br>            ...<br>        &#125;<br>    &#125;<br>    if (node)<br>        node-&gt;rb_color = RB_BLACK;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面以删除节点为左子树为例展示了调色过程：<br /></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240331170407070-1560007634.png"></p><h4 id="2-3-红黑树的查询操作"><a href="#2-3-红黑树的查询操作" class="headerlink" title="2.3 红黑树的查询操作"></a>2.3 红黑树的查询操作</h4><p>Linux内核中红黑树库提供的功能没有特定某一种排序方法，所以也没有给出查询接口。由于红黑树也是二叉排序树的一种，以升序为例，我们只需要按照以下流程即可进行查询操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">Query x:<br><br>node = root<br><span class="hljs-keyword">while</span> node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> null <span class="hljs-keyword">and</span> node.value != x:<br>    <span class="hljs-keyword">if</span> node.value &lt; x：<br>        node = node.right<br>    <span class="hljs-keyword">else</span>:<br>        node = node.left<br><br>Return node<br></code></pre></td></tr></table></figure><h3 id="3-红黑树操作实验"><a href="#3-红黑树操作实验" class="headerlink" title="3. 红黑树操作实验"></a>3. 红黑树操作实验</h3><blockquote><p>实验介绍：有一种对象Item，里面包含：1）树节点，用于管理RB Tree；2）数值，表示了对象的实际内容；3）出现次数，由于我们希望节点随机产生，因此可能存在重复的情况，该值用于统计相同节点的数量。我们先随机num个Item，然后使用这些Item构建出红黑树。最后通过输入要擦除的对象，我们将其从树中删除并显示。</p></blockquote><p>下图时代码运行后的效果，每个节点打印含义为<code>[数值，出现次数，节点颜色]</code>，最左边为根节点，左节点在右节点上方。<br /></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1949124-20240331141025628-1498122160.png"></p><h3 id="附录A-实验代码"><a href="#附录A-实验代码" class="headerlink" title="附录A: 实验代码"></a>附录A: 实验代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br></pre></td><td class="code"><pre><code class="hljs c">main.c :<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;rbtree.h&quot;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">Item</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> num; <span class="hljs-comment">// appear num</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> <span class="hljs-title">node</span>;</span><br>&#125;Item;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> print_num = <span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> print_level = <span class="hljs-number">0</span>;<br><br>Item* <span class="hljs-title function_">GenerateItem</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    Item *item, *cur, *prev = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> **<span class="hljs-title">link</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root</span> <span class="hljs-title">root</span> =</span> RB_ROOT;<br>  <br>    srand(time(<span class="hljs-literal">NULL</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Test item num: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>  <br>    print_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Generate Item[%d]:\n&quot;</span>, num);<br>    <span class="hljs-comment">/* generate a random rb tree with [num] node */</span><br>    <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">/* randomize a rb tree node */</span><br>        item = GenerateItem();<br>        <span class="hljs-keyword">if</span> (print_num == <span class="hljs-number">16</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            print_num = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>, item-&gt;val);<br><br>        <span class="hljs-comment">/* insert a rb tree node to rb tree */</span><br>        <span class="hljs-keyword">if</span> (!root.rb_node) <span class="hljs-comment">// empty rb tree</span><br>        &#123;<br>            root.rb_node = &amp;(item-&gt;node);<br>            rb_insert_color(&amp;(item-&gt;node), &amp;root);<br>            <span class="hljs-keyword">goto</span> next_loop;<br>        &#125;<br>        cur = rb_entry(root.rb_node, Item, node);<br>        <span class="hljs-comment">/* 1. find insert position */</span><br>        <span class="hljs-keyword">while</span> (cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cur-&gt;val == item-&gt;val) <span class="hljs-comment">// the same item</span><br>            &#123;<br>                cur-&gt;num++;<br>                <span class="hljs-built_in">free</span>(item);<br>                <span class="hljs-keyword">goto</span> next_loop;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;val &gt; item-&gt;val)<br>            &#123;<br>                prev = cur;<br>                link = &amp;(cur-&gt;node.rb_left);<br>                <span class="hljs-keyword">if</span> (cur-&gt;node.rb_left == <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                cur = rb_entry(cur-&gt;node.rb_left, Item, node);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                prev = cur;<br>                link = &amp;(cur-&gt;node.rb_right);<br>                <span class="hljs-keyword">if</span> (cur-&gt;node.rb_right == <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                cur = rb_entry(cur-&gt;node.rb_right, Item, node);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/* 2. link node */</span><br>        rb_link_node(&amp;(item-&gt;node), &amp;(prev-&gt;node), link);<br>        <span class="hljs-comment">/* 3. adjust */</span><br>        rb_insert_color(&amp;(item-&gt;node), &amp;root);<br>next_loop:<br>        num--;<br>    &#125;<br>  <br>    <span class="hljs-comment">/* print a generated rb tree */</span><br>    print_num = <span class="hljs-number">0</span>;<br>    print_level = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nsort result:\n&quot;</span>);<br>    DFS(root.rb_node);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">/* testing erase some rb tree node */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nTest Erase, input node value to erase its node, or input negative value to exit\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">/* get the node need to erase */</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>        <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">/* 1. find insert position */</span><br>        <span class="hljs-keyword">if</span> (!root.rb_node) <span class="hljs-comment">// empty rb tree</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty tree\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cur = rb_entry(root.rb_node, Item, node);<br>        <span class="hljs-keyword">while</span> (cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cur-&gt;val == num) <span class="hljs-comment">// the same item</span><br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;val &gt; num)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (cur-&gt;node.rb_left == <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                    cur = <span class="hljs-literal">NULL</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                cur = rb_entry(cur-&gt;node.rb_left, Item, node);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (cur-&gt;node.rb_right == <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                    cur = <span class="hljs-literal">NULL</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                cur = rb_entry(cur-&gt;node.rb_right, Item, node);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/* 2. do erase function */</span><br>        <span class="hljs-keyword">if</span> (cur)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;erase %d\n&quot;</span>, num);<br>            rb_erase(&amp;(cur-&gt;node), &amp;root);<br>            <span class="hljs-built_in">free</span>(cur);<br>            DFS(root.rb_node);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not exist\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;===================================================================\n&quot;</span>);<br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>Item* <span class="hljs-title function_">GenerateItem</span><span class="hljs-params">()</span><br>&#123;<br>    Item *item = (Item*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Item));<br>  <br>    item-&gt;val = rand() % <span class="hljs-number">1000</span>;<br>    item-&gt;num = <span class="hljs-number">1</span>;<br>  <br>    item-&gt;node.rb_parent = <span class="hljs-literal">NULL</span>;<br>    item-&gt;node.rb_left = <span class="hljs-literal">NULL</span>;<br>    item-&gt;node.rb_right = <span class="hljs-literal">NULL</span>;<br>  <br>    <span class="hljs-keyword">return</span> item;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DFS</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node)</span><br>&#123;<br>    Item *item;<br>    <span class="hljs-type">int</span> i;<br>  <br>    <span class="hljs-keyword">if</span> (node)<br>    &#123;<br>        print_level++;<br>        DFS(node-&gt;rb_left);<br>        <span class="hljs-keyword">if</span> (print_num == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            print_num = <span class="hljs-number">0</span>;<br>        &#125;<br>        item = rb_entry(node, Item, node);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; print_level; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;            &quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%3d,%3d,%c]\n&quot;</span>, item-&gt;val, item-&gt;num, (item-&gt;node.rb_color == RB_RED) ? <span class="hljs-string">&#x27;R&#x27;</span> : <span class="hljs-string">&#x27;B&#x27;</span>);<br>        print_num++;<br>        DFS(node-&gt;rb_right);<br>        print_level--;<br>    &#125;<br>&#125;<br><br>rbtree.h :<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  Red Black Trees</span><br><span class="hljs-comment">  (C) 1999  Andrea Arcangeli &lt;andrea@suse.de&gt;</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  This program is free software; you can redistribute it and/or modify</span><br><span class="hljs-comment">  it under the terms of the GNU General Public License as published by</span><br><span class="hljs-comment">  the Free Software Foundation; either version 2 of the License, or</span><br><span class="hljs-comment">  (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  This program is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">  GNU General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  You should have received a copy of the GNU General Public License</span><br><span class="hljs-comment">  along with this program; if not, write to the Free Software</span><br><span class="hljs-comment">  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  linux/include/linux/rbtree.h</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  To use rbtrees you&#x27;ll have to implement your own insert and search cores.</span><br><span class="hljs-comment">  This will avoid us to use callbacks and to drop drammatically performances.</span><br><span class="hljs-comment">  I know it&#x27;s not the cleaner way,  but in C (not in C++) to get</span><br><span class="hljs-comment">  performances and genericity...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  Some example of insert and search follows here. The search is a plain</span><br><span class="hljs-comment">  normal search over an ordered tree. The insert instead must be implemented</span><br><span class="hljs-comment">  int two steps: as first thing the code must insert the element in</span><br><span class="hljs-comment">  order as a red leaf in the tree, then the support library function</span><br><span class="hljs-comment">  rb_insert_color() must be called. Such function will do the</span><br><span class="hljs-comment">  not trivial work to rebalance the rbtree if necessary.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">static inline struct page * rb_search_page_cache(struct inode * inode,</span><br><span class="hljs-comment">                         unsigned long offset)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    struct rb_node * n = inode-&gt;i_rb_page_cache.rb_node;</span><br><span class="hljs-comment">    struct page * page;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    while (n)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        page = rb_entry(n, struct page, rb_page_cache);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        if (offset &lt; page-&gt;offset)</span><br><span class="hljs-comment">            n = n-&gt;rb_left;</span><br><span class="hljs-comment">        else if (offset &gt; page-&gt;offset)</span><br><span class="hljs-comment">            n = n-&gt;rb_right;</span><br><span class="hljs-comment">        else</span><br><span class="hljs-comment">            return page;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return NULL;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">static inline struct page * __rb_insert_page_cache(struct inode * inode,</span><br><span class="hljs-comment">                           unsigned long offset,</span><br><span class="hljs-comment">                           struct rb_node * node)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    struct rb_node ** p = &amp;inode-&gt;i_rb_page_cache.rb_node;</span><br><span class="hljs-comment">    struct rb_node * parent = NULL;</span><br><span class="hljs-comment">    struct page * page;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    while (*p)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        parent = *p;</span><br><span class="hljs-comment">        page = rb_entry(parent, struct page, rb_page_cache);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        if (offset &lt; page-&gt;offset)</span><br><span class="hljs-comment">            p = &amp;(*p)-&gt;rb_left;</span><br><span class="hljs-comment">        else if (offset &gt; page-&gt;offset)</span><br><span class="hljs-comment">            p = &amp;(*p)-&gt;rb_right;</span><br><span class="hljs-comment">        else</span><br><span class="hljs-comment">            return page;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    rb_link_node(node, parent, p);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return NULL;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">static inline struct page * rb_insert_page_cache(struct inode * inode,</span><br><span class="hljs-comment">                         unsigned long offset,</span><br><span class="hljs-comment">                         struct rb_node * node)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    struct page * ret;</span><br><span class="hljs-comment">    if ((ret = __rb_insert_page_cache(inode, offset, node)))</span><br><span class="hljs-comment">        goto out;</span><br><span class="hljs-comment">    rb_insert_color(node, &amp;inode-&gt;i_rb_page_cache);</span><br><span class="hljs-comment"> out:</span><br><span class="hljs-comment">    return ret;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">-----------------------------------------------------------------------</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>    _LINUX_RBTREE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    _LINUX_RBTREE_H</span><br><br><span class="hljs-comment">// #include &lt;linux/kernel.h&gt;</span><br><span class="hljs-comment">// #include &lt;linux/stddef.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE*)0)-&gt;MEMBER)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> container_of(ptr, type, member) (&#123;            \</span><br><span class="hljs-meta">        const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);    \</span><br><span class="hljs-meta">        (type *)( (char *)__mptr - offsetof(type,member) );&#125;)</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">rb_parent</span>;</span><br>    <span class="hljs-type">int</span> rb_color;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    RB_RED        0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    RB_BLACK    1</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">rb_right</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">rb_left</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">rb_node</span>;</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RB_ROOT    (struct rb_root) &#123; NULL, &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    rb_entry(ptr, type, member) container_of(ptr, type, member)</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_insert_color</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *, <span class="hljs-keyword">struct</span> rb_root *)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_erase</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *, <span class="hljs-keyword">struct</span> rb_root *)</span>;<br><br><span class="hljs-comment">/* Find logical next and previous nodes in a tree */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_prev</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_first</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_root *)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_last</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_root *)</span>;<br><br><span class="hljs-comment">/* Fast replacement of a single node without remove/rebalance/add/rebalance */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_replace_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *victim, <span class="hljs-keyword">struct</span> rb_node *new, </span><br><span class="hljs-params">                <span class="hljs-keyword">struct</span> rb_root *root)</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_link_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node * node, <span class="hljs-keyword">struct</span> rb_node * parent,</span><br><span class="hljs-params">                <span class="hljs-keyword">struct</span> rb_node ** rb_link)</span><br>&#123;<br>    node-&gt;rb_parent = parent;<br>    node-&gt;rb_color = RB_RED;<br>    node-&gt;rb_left = node-&gt;rb_right = <span class="hljs-literal">NULL</span>;<br><br>    *rb_link = node;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>    <span class="hljs-comment">/* _LINUX_RBTREE_H */</span></span><br><br>rbtree.c :<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  Red Black Trees</span><br><span class="hljs-comment">  (C) 1999  Andrea Arcangeli &lt;andrea@suse.de&gt;</span><br><span class="hljs-comment">  (C) 2002  David Woodhouse &lt;dwmw2@infradead.org&gt;</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  This program is free software; you can redistribute it and/or modify</span><br><span class="hljs-comment">  it under the terms of the GNU General Public License as published by</span><br><span class="hljs-comment">  the Free Software Foundation; either version 2 of the License, or</span><br><span class="hljs-comment">  (at your option) any later version.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  This program is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">  GNU General Public License for more details.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  You should have received a copy of the GNU General Public License</span><br><span class="hljs-comment">  along with this program; if not, write to the Free Software</span><br><span class="hljs-comment">  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  linux/lib/rbtree.c</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// #include &lt;linux/rbtree.h&gt;</span><br><span class="hljs-comment">// #include &lt;linux/module.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;rbtree.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_rotate_left(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">right</span> =</span> node-&gt;rb_right;<br><br>    <span class="hljs-keyword">if</span> ((node-&gt;rb_right = right-&gt;rb_left))<br>        right-&gt;rb_left-&gt;rb_parent = node;<br>    right-&gt;rb_left = node;<br><br>    <span class="hljs-keyword">if</span> ((right-&gt;rb_parent = node-&gt;rb_parent))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (node == node-&gt;rb_parent-&gt;rb_left)<br>            node-&gt;rb_parent-&gt;rb_left = right;<br>        <span class="hljs-keyword">else</span><br>            node-&gt;rb_parent-&gt;rb_right = right;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        root-&gt;rb_node = right;<br>    node-&gt;rb_parent = right;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_rotate_right(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">left</span> =</span> node-&gt;rb_left;<br><br>    <span class="hljs-keyword">if</span> ((node-&gt;rb_left = left-&gt;rb_right))<br>        left-&gt;rb_right-&gt;rb_parent = node;<br>    left-&gt;rb_right = node;<br><br>    <span class="hljs-keyword">if</span> ((left-&gt;rb_parent = node-&gt;rb_parent))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (node == node-&gt;rb_parent-&gt;rb_right)<br>            node-&gt;rb_parent-&gt;rb_right = left;<br>        <span class="hljs-keyword">else</span><br>            node-&gt;rb_parent-&gt;rb_left = left;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        root-&gt;rb_node = left;<br>    node-&gt;rb_parent = left;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rb_insert_color</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">parent</span>, *<span class="hljs-title">gparent</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((parent = node-&gt;rb_parent) &amp;&amp; parent-&gt;rb_color == RB_RED)<br>    &#123;<br>        gparent = parent-&gt;rb_parent;<br><br>        <span class="hljs-keyword">if</span> (parent == gparent-&gt;rb_left)<br>        &#123;<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">uncle</span> =</span> gparent-&gt;rb_right;<br>                <span class="hljs-keyword">if</span> (uncle &amp;&amp; uncle-&gt;rb_color == RB_RED)<br>                &#123;<br>                    uncle-&gt;rb_color = RB_BLACK;<br>                    parent-&gt;rb_color = RB_BLACK;<br>                    gparent-&gt;rb_color = RB_RED;<br>                    node = gparent;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (parent-&gt;rb_right == node)<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">tmp</span>;</span><br>                __rb_rotate_left(parent, root);<br>                tmp = parent;<br>                parent = node;<br>                node = tmp;<br>            &#125;<br><br>            parent-&gt;rb_color = RB_BLACK;<br>            gparent-&gt;rb_color = RB_RED;<br>            __rb_rotate_right(gparent, root);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> rb_node *uncle = gparent-&gt;rb_left;<br>                <span class="hljs-keyword">if</span> (uncle &amp;&amp; uncle-&gt;rb_color == RB_RED)<br>                &#123;<br>                    uncle-&gt;rb_color = RB_BLACK;<br>                    parent-&gt;rb_color = RB_BLACK;<br>                    gparent-&gt;rb_color = RB_RED;<br>                    node = gparent;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>            &#123;<br>                <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">tmp</span>;</span><br>                __rb_rotate_right(parent, root);<br>                tmp = parent;<br>                parent = node;<br>                node = tmp;<br>            &#125;<br><br>            parent-&gt;rb_color = RB_BLACK;<br>            gparent-&gt;rb_color = RB_RED;<br>            __rb_rotate_left(gparent, root);<br>        &#125;<br>    &#125;<br><br>    root-&gt;rb_node-&gt;rb_color = RB_BLACK;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __rb_erase_color(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<br>                 <span class="hljs-keyword">struct</span> rb_root *root)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">other</span>;</span><br><br>    <span class="hljs-keyword">while</span> ((!node || node-&gt;rb_color == RB_BLACK) &amp;&amp; node != root-&gt;rb_node)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>        &#123;<br>            other = parent-&gt;rb_right;<br>            <span class="hljs-keyword">if</span> (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                other-&gt;rb_color = RB_BLACK;<br>                parent-&gt;rb_color = RB_RED;<br>                __rb_rotate_left(parent, root);<br>                other = parent-&gt;rb_right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                other-&gt;rb_color = RB_RED;<br>                node = parent;<br>                parent = node-&gt;rb_parent;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!other-&gt;rb_right ||<br>                    other-&gt;rb_right-&gt;rb_color == RB_BLACK)<br>                &#123;<br>                    <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> rb_node *o_left;<br>                    <span class="hljs-keyword">if</span> ((o_left = other-&gt;rb_left))<br>                        o_left-&gt;rb_color = RB_BLACK;<br>                    other-&gt;rb_color = RB_RED;<br>                    __rb_rotate_right(other, root);<br>                    other = parent-&gt;rb_right;<br>                &#125;<br>                other-&gt;rb_color = parent-&gt;rb_color;<br>                parent-&gt;rb_color = RB_BLACK;<br>                <span class="hljs-keyword">if</span> (other-&gt;rb_right)<br>                    other-&gt;rb_right-&gt;rb_color = RB_BLACK;<br>                __rb_rotate_left(parent, root);<br>                node = root-&gt;rb_node;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            other = parent-&gt;rb_left;<br>            <span class="hljs-keyword">if</span> (other-&gt;rb_color == RB_RED)<br>            &#123;<br>                other-&gt;rb_color = RB_BLACK;<br>                parent-&gt;rb_color = RB_RED;<br>                __rb_rotate_right(parent, root);<br>                other = parent-&gt;rb_left;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((!other-&gt;rb_left ||<br>                 other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &amp;&amp; (!other-&gt;rb_right ||<br>                other-&gt;rb_right-&gt;rb_color == RB_BLACK))<br>            &#123;<br>                other-&gt;rb_color = RB_RED;<br>                node = parent;<br>                parent = node-&gt;rb_parent;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!other-&gt;rb_left ||<br>                    other-&gt;rb_left-&gt;rb_color == RB_BLACK)<br>                &#123;<br>                    <span class="hljs-keyword">register</span> <span class="hljs-keyword">struct</span> rb_node *o_right;<br>                    <span class="hljs-keyword">if</span> ((o_right = other-&gt;rb_right))<br>                        o_right-&gt;rb_color = RB_BLACK;<br>                    other-&gt;rb_color = RB_RED;<br>                    __rb_rotate_left(other, root);<br>                    other = parent-&gt;rb_left;<br>                &#125;<br>                other-&gt;rb_color = parent-&gt;rb_color;<br>                parent-&gt;rb_color = RB_BLACK;<br>                <span class="hljs-keyword">if</span> (other-&gt;rb_left)<br>                    other-&gt;rb_left-&gt;rb_color = RB_BLACK;<br>                __rb_rotate_right(parent, root);<br>                node = root-&gt;rb_node;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (node)<br>        node-&gt;rb_color = RB_BLACK;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rb_erase</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">child</span>, *<span class="hljs-title">parent</span>;</span><br>    <span class="hljs-type">int</span> color;<br><br>    <span class="hljs-keyword">if</span> (!node-&gt;rb_left)<br>        child = node-&gt;rb_right;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!node-&gt;rb_right)<br>        child = node-&gt;rb_left;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">struct</span> rb_node *old = node, *left;<br><br>        node = node-&gt;rb_right;<br>        <span class="hljs-keyword">while</span> ((left = node-&gt;rb_left) != <span class="hljs-literal">NULL</span>)<br>            node = left;<br>        child = node-&gt;rb_right;<br>        parent = node-&gt;rb_parent;<br>        color = node-&gt;rb_color;<br><br>        <span class="hljs-keyword">if</span> (child)<br>            child-&gt;rb_parent = parent;<br>        <span class="hljs-keyword">if</span> (parent)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>                parent-&gt;rb_left = child;<br>            <span class="hljs-keyword">else</span><br>                parent-&gt;rb_right = child;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            root-&gt;rb_node = child;<br><br>        <span class="hljs-keyword">if</span> (node-&gt;rb_parent == old)<br>            parent = node;<br>        node-&gt;rb_parent = old-&gt;rb_parent;<br>        node-&gt;rb_color = old-&gt;rb_color;<br>        node-&gt;rb_right = old-&gt;rb_right;<br>        node-&gt;rb_left = old-&gt;rb_left;<br><br>        <span class="hljs-keyword">if</span> (old-&gt;rb_parent)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (old-&gt;rb_parent-&gt;rb_left == old)<br>                old-&gt;rb_parent-&gt;rb_left = node;<br>            <span class="hljs-keyword">else</span><br>                old-&gt;rb_parent-&gt;rb_right = node;<br>        &#125; <span class="hljs-keyword">else</span><br>            root-&gt;rb_node = node;<br><br>        old-&gt;rb_left-&gt;rb_parent = node;<br>        <span class="hljs-keyword">if</span> (old-&gt;rb_right)<br>            old-&gt;rb_right-&gt;rb_parent = node;<br>        <span class="hljs-keyword">goto</span> color;<br>    &#125;<br><br>    parent = node-&gt;rb_parent;<br>    color = node-&gt;rb_color;<br><br>    <span class="hljs-keyword">if</span> (child)<br>        child-&gt;rb_parent = parent;<br>    <span class="hljs-keyword">if</span> (parent)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (parent-&gt;rb_left == node)<br>            parent-&gt;rb_left = child;<br>        <span class="hljs-keyword">else</span><br>            parent-&gt;rb_right = child;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        root-&gt;rb_node = child;<br><br> color:<br>    <span class="hljs-keyword">if</span> (color == RB_BLACK)<br>        __rb_erase_color(child, parent, root);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This function returns the first node (in sort order) of the tree.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_first</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span>  *<span class="hljs-title">n</span>;</span><br><br>    n = root-&gt;rb_node;<br>    <span class="hljs-keyword">if</span> (!n)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (n-&gt;rb_left)<br>        n = n-&gt;rb_left;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_last</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span>  *<span class="hljs-title">n</span>;</span><br><br>    n = root-&gt;rb_node;<br>    <span class="hljs-keyword">if</span> (!n)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (n-&gt;rb_right)<br>        n = n-&gt;rb_right;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node)</span><br>&#123;<br>    <span class="hljs-comment">/* If we have a right-hand child, go down and then left as far</span><br><span class="hljs-comment">       as we can. */</span><br>    <span class="hljs-keyword">if</span> (node-&gt;rb_right) &#123;<br>        node = node-&gt;rb_right; <br>        <span class="hljs-keyword">while</span> (node-&gt;rb_left)<br>            node=node-&gt;rb_left;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">/* No right-hand children.  Everything down and left is</span><br><span class="hljs-comment">       smaller than us, so any &#x27;next&#x27; node must be in the general</span><br><span class="hljs-comment">       direction of our parent. Go up the tree; any time the</span><br><span class="hljs-comment">       ancestor is a right-hand child of its parent, keep going</span><br><span class="hljs-comment">       up. First time it&#x27;s a left-hand child of its parent, said</span><br><span class="hljs-comment">       parent is our &#x27;next&#x27; node. */</span><br>    <span class="hljs-keyword">while</span> (node-&gt;rb_parent &amp;&amp; node == node-&gt;rb_parent-&gt;rb_right)<br>        node = node-&gt;rb_parent;<br><br>    <span class="hljs-keyword">return</span> node-&gt;rb_parent;<br>&#125;<br><br><span class="hljs-keyword">struct</span> rb_node *<span class="hljs-title function_">rb_prev</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node)</span><br>&#123;<br>    <span class="hljs-comment">/* If we have a left-hand child, go down and then right as far</span><br><span class="hljs-comment">       as we can. */</span><br>    <span class="hljs-keyword">if</span> (node-&gt;rb_left) &#123;<br>        node = node-&gt;rb_left; <br>        <span class="hljs-keyword">while</span> (node-&gt;rb_right)<br>            node=node-&gt;rb_right;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">/* No left-hand children. Go up till we find an ancestor which</span><br><span class="hljs-comment">       is a right-hand child of its parent */</span><br>    <span class="hljs-keyword">while</span> (node-&gt;rb_parent &amp;&amp; node == node-&gt;rb_parent-&gt;rb_left)<br>        node = node-&gt;rb_parent;<br><br>    <span class="hljs-keyword">return</span> node-&gt;rb_parent;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rb_replace_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *victim, <span class="hljs-keyword">struct</span> rb_node *new,</span><br><span class="hljs-params">             <span class="hljs-keyword">struct</span> rb_root *root)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">parent</span> =</span> victim-&gt;rb_parent;<br><br>    <span class="hljs-comment">/* Set the surrounding nodes to point to the replacement */</span><br>    <span class="hljs-keyword">if</span> (parent) &#123;<br>        <span class="hljs-keyword">if</span> (victim == parent-&gt;rb_left)<br>            parent-&gt;rb_left = new;<br>        <span class="hljs-keyword">else</span><br>            parent-&gt;rb_right = new;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        root-&gt;rb_node = new;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (victim-&gt;rb_left)<br>        victim-&gt;rb_left-&gt;rb_parent = new;<br>    <span class="hljs-keyword">if</span> (victim-&gt;rb_right)<br>        victim-&gt;rb_right-&gt;rb_parent = new;<br><br>    <span class="hljs-comment">/* Copy the pointers/colour from the victim to the replacement */</span><br>    *new = *victim;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、-红黑树的原理&quot;&gt;&lt;a href=&quot;#一、-红黑树的原理&quot; class=&quot;headerlink&quot; title=&quot;一、 红黑树的原理&quot;&gt;&lt;/a&gt;一、 红黑树的原理&lt;/h3&gt;&lt;p&gt;红黑树RB Tree是二叉树的一种，作为一种自平衡二叉树（一些情况下不是完全平衡的）</summary>
      
    
    
    
    <category term="kernel" scheme="http://example.com/categories/kernel/"/>
    
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>内核队列</title>
    <link href="http://example.com/posts/%E5%86%85%E6%A0%B8%E9%98%9F%E5%88%97.html"/>
    <id>http://example.com/posts/%E5%86%85%E6%A0%B8%E9%98%9F%E5%88%97.html</id>
    <published>2024-11-25T14:55:17.000Z</published>
    <updated>2024-11-25T14:55:37.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、kfifo原理"><a href="#一、kfifo原理" class="headerlink" title="一、kfifo原理"></a>一、kfifo原理</h3><p>   kfifo实现原理是采用循环（环形）队列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kfifo</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buffer; / *保存数据的缓冲区* /<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size;      / *分配的缓冲区的大小* /<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> in;        / *数据以偏移量(in%size)添加* /<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> out;       / *数据从off中提取。(out%size)* /<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二、kfifo特点"><a href="#二、kfifo特点" class="headerlink" title="二、kfifo特点"></a>二、kfifo特点</h3><p>1、采用环形缓冲区来实现，提供一个无边界的字节流服务。采用环形缓冲区的好处为，当一个数据元素被用掉后，其余数据元素不需要移动其存储位置，从而减少拷贝提高效率。</p><p>2、保证缓冲区大小为2的次幂，不是的向上取整为2的次幂（很重要）。</p><p>3、使用无符号整数保存输入(in)和输出(out)的位置，在输入输出时不对in和out的值进行模运算，而让其自然溢出，并能够保证in-out的结果为缓冲区中已存放的数据长度。</p><p>4、将需要取模的运算用 &amp; 操作代替（ a % size &#x3D; (a &amp; (size − 1)) ), 这需要size保证为2的次幂。</p><p>5、使用内存屏障(Memory Barrier)技术，实现单消费者和单生产者对kfifo的无锁并发访问（包括多CPU的情况），多个消费者、生产者的并发访问还是需要加锁的。</p><p>关于kfifo中内存屏障的使用，请参考<a href="https://www.linuxidc.com/Linux/2016-12/137936.htm">https://www.linuxidc.com/Linux/2016-12/137936.htm</a>。</p><h3 id="三、kfifo功能函数之创建队列"><a href="#三、kfifo功能函数之创建队列" class="headerlink" title="三、kfifo功能函数之创建队列"></a>三、kfifo功能函数之创建队列</h3><p>   kfifo提供两种创建队列的方法，动态创建和静态创建。</p><h5 id="1、动态创建"><a href="#1、动态创建" class="headerlink" title="1、动态创建"></a>1、动态创建</h5><p>(1)、kfifo_alloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kfifo</span> <span class="hljs-title">g_fifoqueue</span>;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size, <span class="hljs-type">gfp_t</span> gfp_mask)</span>;<br></code></pre></td></tr></table></figure><p>该函数创建并初始化一个size大小的kfifo。内核使用gfp_mask标识符分配队列的缓冲区内存。如果成功，函数返回0，错误则返回负数的错误码。注意kfifo_alloc申请的内存是在物理地址上是连续的</p><p>(2)、kfifo_init</p><p>如果要自己分配缓冲区，可以调用函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kfifo_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> *buffer, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> size)</span>;<br></code></pre></td></tr></table></figure><h5 id="2、静态创建"><a href="#2、静态创建" class="headerlink" title="2、静态创建"></a>2、静态创建</h5><p>DECLARE_KFIFO(name, size) ;</p><p>INIT_KFIFO(name);</p><h3 id="四、入队操作"><a href="#四、入队操作" class="headerlink" title="四、入队操作"></a>四、入队操作</h3><p>对于推入队列数据，kfifo提供三大类函数：常规函数， 将用户空间数据推入队列的函数，带记录域功能的函数。</p><p>1）常规函数</p><p>unsigned int kfifo_in(struct kfifo *fifo, const void *from, unsigned int len);</p><p>unsigned int kfifo_in_locked(struct kfifo *fifo, const void *from, unsigned int n, spinlock_t *lock);</p><p>2）将用户空间数据推入队列的函数</p><p>int kfifo_from_user(struct kfifo *fifo, const void __user *from, unsigned int n, unsigned *lenout);</p><p>unsigned int kfifo_from_user_rec(struct kfifo *fifo, const void __user *from, unsigned int n, unsigned int recsize);</p><p>3）带记录域功能的函数</p><p>unsigned int kfifo_in_rec(struct kfifo *fifo, void *from, unsigned int n, unsigned int recsize)；             </p><h3 id="五、出队"><a href="#五、出队" class="headerlink" title="五、出队"></a>五、出队</h3><p>对于摘取队列数据，kfifo提供三大类函数：常规函数， 摘取队列数据至用户空间的函数，带记录域功能的函数。</p><p>(1)、常规函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_out</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> *to, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_out_locked</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> *to, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n, <span class="hljs-type">spinlock_t</span> *lock)</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_out_peek</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> *to, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len, <span class="hljs-type">unsigned</span> offset)</span>;<br></code></pre></td></tr></table></figure><p>(2)、摘取队列数据至用户空间的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span>  <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_to_user</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> __user *to, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n, <span class="hljs-type">unsigned</span> *lenout)</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_to_user_rec</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> __user *to, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> recsize, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *total)</span>;<br></code></pre></td></tr></table></figure><p>(3)、带记录域功能的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_out_rec</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">void</span> *to, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> recsize, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *total)</span>;<br></code></pre></td></tr></table></figure><h3 id="六、获取队列长度、判空等操作"><a href="#六、获取队列长度、判空等操作" class="headerlink" title="六、获取队列长度、判空等操作"></a>六、获取队列长度、判空等操作</h3><p>(1)、获取队列缓冲区大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_size</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br></code></pre></td></tr></table></figure><p>(2)、获取队列已推入的数据大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_len</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br></code></pre></td></tr></table></figure><p>(3)、获取队列可用空间大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_avail</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br></code></pre></td></tr></table></figure><p>(4)、判断队列是否空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_is_empty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br></code></pre></td></tr></table></figure><p>(5)、判断队列是否满</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">kfifo_is_full</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br></code></pre></td></tr></table></figure><h3 id="七、重置和撤销队列"><a href="#七、重置和撤销队列" class="headerlink" title="七、重置和撤销队列"></a>七、重置和撤销队列</h3><p>(1)、重置队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kfifo_reset</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">kfifo_skip</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span>;<br></code></pre></td></tr></table></figure><p>(2)、撤销队列</p><p>如果队列是由函数kfifo_alloc创建，则撤销队列使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">kfifo_free</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kfifo *fifo)</span>;<br><br></code></pre></td></tr></table></figure><p>如果队列是由函数kfifo_init创建，则你需要负责释放相关缓冲。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、kfifo原理&quot;&gt;&lt;a href=&quot;#一、kfifo原理&quot; class=&quot;headerlink&quot; title=&quot;一、kfifo原理&quot;&gt;&lt;/a&gt;一、kfifo原理&lt;/h3&gt;&lt;p&gt;   kfifo实现原理是采用循环（环形）队列。&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="kernel" scheme="http://example.com/categories/kernel/"/>
    
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>内核链表</title>
    <link href="http://example.com/posts/%E5%86%85%E6%A0%B8%E9%93%BE%E8%A1%A8.html"/>
    <id>http://example.com/posts/%E5%86%85%E6%A0%B8%E9%93%BE%E8%A1%A8.html</id>
    <published>2024-11-25T14:54:19.000Z</published>
    <updated>2024-11-25T14:54:44.655Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux内核中使用了大量的链表结构来组织数据，包括设备列表以及各种功能模块中的数据组织。这些链表大多采用在include&#x2F;linux&#x2F;list.h实现的一个相当精彩的链表数据结构。事实上，内核链表就是采用双循环链表机制。</p><p>内核链表有别于传统链表就在节点本身不包含数据域，只包含指针域。故而可以很灵活的拓展数据结构。</p><h3 id="一、神奇的结构：list-head"><a href="#一、神奇的结构：list-head" class="headerlink" title="一、神奇的结构：list_head"></a>一、神奇的结构：list_head</h3><p>要了解内核链表，就不得不提 list_head。这个结构很有意思，整个结构没有数据域，只有两个指针域。<br>这个结构本身意义不大，不过在内核链表中，起着整个衔接作用，可以说是内核链表的核心不为过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct list_head &#123;<br>   struct list_head *next, *prev;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二、链表初始化"><a href="#二、链表初始化" class="headerlink" title="二、链表初始化"></a>二、链表初始化</h3><p>内核提供多种方式来初始化链表：宏初始化和接口初始化。</p><h4 id="1-宏初始化"><a href="#1-宏初始化" class="headerlink" title="(1)宏初始化"></a>(1)宏初始化</h4><p>LIST_HEAD_HEAD_INIT宏设计的很精妙。这个宏本身不包含任何数据类型，也就是说没有限定唯一的数据类型，这就使得整个链表足够灵活。是不是有点C++模板的意思？</p><p>对于任意给定的结构指针，将【前驱】和【后继】指针都指向自己，作为链表头指针。</p><p>LIST_HEAD 宏 本质就是赋予了 name 于 【struct list_head】 属性，由于 list_head 本身不包含数据域，所以搭配 LIST_HEAD_HEAD_INIT 宏，就使得整个链表上的数据更加灵活。具备通用性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#define <span class="hljs-title function_">LIST_HEAD_INIT</span>(<span class="hljs-params">name</span>) &#123; &amp;(name), &amp;(name) &#125;<br>#define <span class="hljs-title function_">LIST_HEAD</span>(name) \<br>   struct list_head name = <span class="hljs-title function_">LIST_HEAD_INIT</span>(name)<br></code></pre></td></tr></table></figure><h4 id="2-接口初始化"><a href="#2-接口初始化" class="headerlink" title="(2)接口初始化"></a>(2)接口初始化</h4><p>接口操作就比较直接明了，基本上和宏实现的意图一样。直接将链表头指针的前驱和后继都指向自己</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">INIT_LIST_HEAD</span>(<span class="hljs-params">struct list_head *list</span>)<br>&#123;<br>   list-&gt;next = list;<br>   list-&gt;prev = list;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们以示例来补充说明，这样有助于大家辅助理解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 链表节点初始化，前驱和后继都指向自己（初始化）</span><br>struct list = <span class="hljs-title function_">LIST_HEAD</span>(list);<br></code></pre></td></tr></table></figure><p>前面说了 list_head 只有指针域，没有数据域，如果只是这样就没有什么意义了。所以我们需要创建一个宿主结构，然后再再此结构包含 list 字段，宿主结构，也有其他字段（进程描述符，页面管理结构等都是采用这种方法创建链表的）。假设定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct my_data_list &#123;<br>    int data ;<br>    struct list_head list; <span class="hljs-comment">/* list head , 这个至关重要，后期遍历通过container_of 解析my_data_list 地址 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>创建一个节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct my_data_list first_data =<br>&#123; <br>    .<span class="hljs-property">val</span> = <span class="hljs-number">1</span>,<br>    <span class="hljs-comment">/* 这里有点绕，事实上就是将first_data.list , 前驱和后继都指向自己进行初始化 */</span><br>    .<span class="hljs-property">list</span> = <span class="hljs-title function_">LIST_HEAD_INIT</span>(first_data.<span class="hljs-property">list</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog69ipvfwph3.png"></p><p>这里 list 的 prev 和 next 都指向list 自己了，并且list 属于 my_data_list 的成员。只需要遍历到lst 节点就能根据 前面讲的 container_of 推导得到其宿主结构的地址，从而访问val值，如果有其他方法，也可访问。</p><p>分析到这里，应该逐渐明晰，为何list_head 设计很有意思？为什么链表本身不包含数据域，却能衍生出无数数据类型，不受特定的数据类型限制。</p><h3 id="三、添加节点"><a href="#三、添加节点" class="headerlink" title="三、添加节点"></a>三、添加节点</h3><p>内核相应的提供了添加节点的接口：</p><h4 id="1-list-add"><a href="#1-list-add" class="headerlink" title="(1)list_add"></a>(1)list_add</h4><p>list_add 如下，最终调用的是__list_add 函数，根据注释可知，list_add 是头部插入，总是在链表的头部插入一个新的节点。</p><p>list_add</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_add - add a new entry</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@new</span>: new entry to be added</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: list head to add it after</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Insert a new entry after the specified head.</span><br><span class="hljs-comment"> * This is good for implementing stacks.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_add</span>(<span class="hljs-params">struct list_head *<span class="hljs-keyword">new</span>, struct list_head *head</span>)<br>&#123;<br>   <span class="hljs-title function_">__list_add</span>(<span class="hljs-keyword">new</span>, head, head-&gt;next);<br>&#125;<br></code></pre></td></tr></table></figure><p>__list_add</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Insert a new entry between two known consecutive entries.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This is only for internal list manipulation where we know</span><br><span class="hljs-comment"> * the prev/next entries already!</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">__list_add</span>(<span class="hljs-params">struct list_head *<span class="hljs-keyword">new</span>,</span><br><span class="hljs-params">         struct list_head *prev,</span><br><span class="hljs-params">         struct list_head *next</span>)<br>&#123;<br>   next-&gt;prev = <span class="hljs-keyword">new</span>;<br>   <span class="hljs-keyword">new</span>-&gt;next = next;<br>   <span class="hljs-keyword">new</span>-&gt;prev = prev;<br>   prev-&gt;next = <span class="hljs-keyword">new</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再以示例补充说明：</p><ul><li>首先创建一个链表头：listHead</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">LIST_HEAD</span>(listHead);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog5u9thd0jfz.png"></p><ul><li>然后再创建第一个链表节点：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct my_data_list first_data =<br>&#123; <br>    .<span class="hljs-property">val</span> = <span class="hljs-number">1</span>,<br>    .<span class="hljs-property">list</span> = <span class="hljs-title function_">LIST_HEAD_INIT</span>(first_data.<span class="hljs-property">list</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogdgyqru9zqw.png"></p><ul><li>接着 把这个节点插入到 listHead 后</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">list_add</span>(&amp;frist_data.<span class="hljs-property">list</span>, &amp;listHead);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogzysoo1ylwe.png"></p><ul><li>紧接着我们再创建第二个节点：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct my_data_list second_data =<br>&#123; <br>    .<span class="hljs-property">val</span> = <span class="hljs-number">2</span>,<br>    <span class="hljs-comment">/* 也可以调用接口 初始化*/</span><br>    .<span class="hljs-property">list</span> = <span class="hljs-title function_">LIST_HEAD_INIT</span>(second_data.<span class="hljs-property">list</span>),<br>&#125;;<br><br><span class="hljs-title function_">list_add</span>(&amp;second_data.<span class="hljs-property">list</span>, &amp;listHead);<br></code></pre></td></tr></table></figure><p>示意图如下：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogamryt0epan.png"></p><p>以此类推，每次插入一个新节点，都是紧靠着header节点，而之前插入的节点依次排序靠后，那最后一个节点则是第一次插入header后的那个节点。</p><p>可以看出：先来的节点靠后，而后来的节点靠前，符合“先进后出，后进先出”。所以此种结构类似于 <strong>stack“栈”</strong> ， 类似于内核stack中的栈顶指针esp， 它都是紧靠着最后push到栈的元素。</p><h4 id="2-list-add-tail"><a href="#2-list-add-tail" class="headerlink" title="(2)list_add_tail"></a>(2)list_add_tail</h4><p>再看内核另外一种插入方式，本质都是调用__lis_add。不同的是，一个是头部插入，一个是尾部插入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_add_tail - add a new entry</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@new</span>: new entry to be added</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: list head to add it before</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Insert a new entry before the specified head.</span><br><span class="hljs-comment"> * This is useful for implementing queues.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_add_tail</span>(<span class="hljs-params">struct list_head *<span class="hljs-keyword">new</span>, struct list_head *head</span>)<br>&#123;<br>   <span class="hljs-title function_">__list_add</span>(<span class="hljs-keyword">new</span>, head-&gt;prev, head);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们还是以示例辅助说明：</p><ul><li>首先创建一个链表头：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">LIST_HEAD</span>(listHead);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog5u9thd0jfz.png"></p><ul><li>然后创建第一个节点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct my_data_list first_data =<br>&#123; <br>    .<span class="hljs-property">val</span> = <span class="hljs-number">1</span>,<br>    .<span class="hljs-property">list</span> = <span class="hljs-title function_">LIST_HEAD_INIT</span>(first_data.<span class="hljs-property">list</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogdgyqru9zqw.png"></p><ul><li>插入第一个节点：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">list_add_tail</span>(&amp;first_data.<span class="hljs-property">list</span>, listHead);<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogq3n8hhap8i.png"></p><ul><li>紧接着插入第二个节点：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">struct my_data_list second_data =<br>&#123; <br>    .<span class="hljs-property">val</span> = <span class="hljs-number">2</span>,<br>    <span class="hljs-comment">/* 也可以调用接口 初始化*/</span><br>    .<span class="hljs-property">list</span> = <span class="hljs-title function_">LIST_HEAD_INIT</span>(second_data.<span class="hljs-property">list</span>),<br>&#125;;<br><br><span class="hljs-title function_">list_add_tail</span>(&amp;second_data.<span class="hljs-property">list</span>, &amp;listHead);<br></code></pre></td></tr></table></figure><p>示意图如下：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1srgg2q44x.png"></p><p>每次插入的新节点都是紧挨着 header 表尾，而插入的第一个节点排在了第一位，第二个排在了第二位。</p><p>先插入的节点排在前面，后插入的节点排在后面，“先进先出，后进后出”（First in First out,<strong>FIFO</strong>）！这不就是队列吗？</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>由于是双循环链表，看起来尾部插入和头部插入是一样的，其实不然。</p><p>我们再来对比尾部和头部插入的区别：</p><ul><li>头部插入，结构是逆序，属于先进后出，最主要的区别就是头节点的prev指针指向第一个节点。</li><li>尾部插入，结构是顺序，属于FIFO结构，最主要的区别就是头节点的next指针指向第一个节点。</li><li>list_add：头部插入一个节点</li><li>list_add_tail：尾部插入一个节点</li></ul><h3 id="四、删除节点"><a href="#四、删除节点" class="headerlink" title="四、删除节点"></a>四、删除节点</h3><p>内核同样定义了删除节点的接口 list_del</p><p>list_del：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_del</span>(<span class="hljs-params">struct list_head *entry</span>)<br>&#123;<br>    <span class="hljs-comment">/* __list_del_entry(entry) 也行*/</span><br>   <span class="hljs-title function_">__list_del</span>(entry-&gt;prev, entry-&gt;next);<br>  <br>    <span class="hljs-comment">/* 指向特定的位置，反初始化 */</span><br>   entry-&gt;next = <span class="hljs-variable constant_">LIST_POISON1</span>;<br>   entry-&gt;prev = <span class="hljs-variable constant_">LIST_POISON2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>__list_del：这个接口，根据prev&#x2F;next 删除其节点，删除的节点必须是已知的并且 prev 和 next 不为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Delete a list entry by making the prev/next entries</span><br><span class="hljs-comment"> * point to each other.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This is only for internal list manipulation where we know</span><br><span class="hljs-comment"> * the prev/next entries already!</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">__list_del</span>(<span class="hljs-params">struct list_head * prev, struct list_head * next</span>)<br>&#123;<br> next-&gt;prev = prev;<br> prev-&gt;next = next;<br>&#125;<br></code></pre></td></tr></table></figure><p>__list_del_entry：删除一个节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_del - deletes entry from list.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@entry</span>: the element to delete from the list.</span><br><span class="hljs-comment"> * Note: list_empty() on entry does not return true after this, the entry is</span><br><span class="hljs-comment"> * in an undefined state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">__list_del_entry</span>(<span class="hljs-params">struct list_head *entry</span>)<br>&#123;<br>   <span class="hljs-title function_">__list_del</span>(entry-&gt;prev, entry-&gt;next);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_del_init - deletes entry from list and reinitialize it.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@entry</span>: the element to delete from the list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_del_init</span>(<span class="hljs-params">struct list_head *entry</span>)<br>&#123;<br> <span class="hljs-title function_">__list_del_entry</span>(entry);<br> <span class="hljs-title function_">INIT_LIST_HEAD</span>(entry);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>利用list_del(struct list_head *entry) 接口就可以删除链表中的任意节点了，需注意，前提条件是这个节点是已知的，既在链表中真实存在，切prev，next指针都不为NULL。</li><li>被剔除下来的 my_data_list.list，prev、next 指针分别被设为 LIST_POSITION2和LIST_POSITION1两个特殊值，这样设置是为了保证不在链表中的节点项不可访问–对LIST_POSITION1和LIST_POSITION2的访问都将引起页故障。</li><li>与之相对应，list_del_init()函数将节点从链表中解下来之后，调用LIST_INIT_HEAD()将节点置为空链状态。</li></ul><blockquote><p>list_del() 和 list_del_init 是外部接口。__list_del() 和 __list_entry() 是内核内部节点。 list_del() 作用是删除双链表中的一个节点。并将节点的prev和next都指向特定位置，LIST_POSITION1和LIST_POSITION2。 list_del_init() 作用是删除双链表中的一个节点，并将节点的prev和next都指向自己，回到最开始创建节点前的状态。</p></blockquote><h3 id="五、搬移"><a href="#五、搬移" class="headerlink" title="五、搬移"></a>五、搬移</h3><p>内核提供了将原本属于一个链表的节点移动到另一个链表的操作，并根据插入到新链表的位置分为两类：头部搬移和尾部搬移。搬移的本质就是删除加插入。</p><h4 id="头部搬移"><a href="#头部搬移" class="headerlink" title="头部搬移"></a><strong>头部搬移</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_move - delete from one list and add as another&#x27;s head</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@list</span>: the entry to move</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: the head that will precede our entry</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_move</span>(<span class="hljs-params">struct list_head *list, struct list_head *head</span>)<br>&#123;<br>   <span class="hljs-title function_">__list_del_entry</span>(list);<br>   <span class="hljs-title function_">list_add</span>(list, head);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="尾部搬移"><a href="#尾部搬移" class="headerlink" title="尾部搬移"></a><strong>尾部搬移</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_move_tail - delete from one list and add as another&#x27;s tail</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@list</span>: the entry to move</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: the head that will follow our entry</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_move_tail</span>(<span class="hljs-params">struct list_head *list,</span><br><span class="hljs-params">      struct list_head *head</span>)<br>&#123;<br>   <span class="hljs-title function_">__list_del_entry</span>(list);<br>   <span class="hljs-title function_">list_add_tail</span>(list, head);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、合并"><a href="#六、合并" class="headerlink" title="六、合并"></a>六、合并</h3><p>内核还提供两组合并操作，将两条链表合并在一起。</p><p>当 list1 被挂接到 list2 之后，作为原表头指针的 list1 的next、prev仍然指向原来的节点，为了避免引起混乱，Linux提供了一个list_splice_init()函数.该函数在将list合并到head链表的基础上，调用INIT_LIST_HEAD(list)将list设置为空链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_splice</span>(<span class="hljs-keyword">const</span> struct list_head *list, struct list_head *head);<br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_splice_init</span>(struct list_head *list, struct list_head *head);<br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_splice_tail</span>(<span class="hljs-keyword">const</span> struct list_head *list, struct list_head *head);<br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_splice_tail_init</span>(struct list_head *list, struct list_head *head);<br></code></pre></td></tr></table></figure><p>示意图如下：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog7twpttdv04.png"></p><p>另外一种方式类似，只不过合并时断开的位置有所不同</p><h3 id="七、替换"><a href="#七、替换" class="headerlink" title="七、替换"></a>七、替换</h3><p>内核还提供一组替换链表节点的操作。list_replace：将新的节点替换到旧的节点上。list_replace_init：将新的节点替换到旧的节点上。同时将旧的节点的prev和next指向自己，反初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_replace</span>(struct list_head *old, struct list_head *<span class="hljs-keyword">new</span>);<br><span class="hljs-keyword">static</span> inline <span class="hljs-keyword">void</span> <span class="hljs-title function_">list_replace_init</span>(struct list_head *old, struct list_head *<span class="hljs-keyword">new</span>);<br></code></pre></td></tr></table></figure><h3 id="八、遍历操作"><a href="#八、遍历操作" class="headerlink" title="八、遍历操作"></a>八、遍历操作</h3><p>内核提供了一组宏进行遍历操作。经过一系列的增删减改操作，我们终于到了遍历的时候。</p><h4 id="list-entry-宏"><a href="#list-entry-宏" class="headerlink" title="list_entry 宏"></a><strong>list_entry 宏</strong></h4><p>重头戏来了，遍历的关键就是这个list_entry宏。本质就是container_of宏。</p><p>具体分析见上一篇文章。这个宏的主要作用就是获取宿主结构的指针地址。</p><p>前文提到，我们是以list 指针为节点组成的一条双链表，遍历的过程中只能得到list的地址，那么对于其所有者地址就是通过这个宏获取的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* list_entry - get the struct for this entry</span><br><span class="hljs-comment">* <span class="hljs-doctag">@ptr</span>: the &amp;struct list_head pointer.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@type</span>: the type of the struct this is embedded in.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@member</span>: the name of the list_struct within the struct.</span><br><span class="hljs-comment">*/</span><br>#define <span class="hljs-title function_">list_entry</span>(ptr, type, member) \<br>   <span class="hljs-title function_">container_of</span>(ptr, type, member)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 根据list 倒推 my_list_data*/</span><br><span class="hljs-title function_">list_entry</span>(&amp;my_list_data.<span class="hljs-property">list</span>, <span class="hljs-title function_">typeof</span>(&amp;my_list_data), list)<br></code></pre></td></tr></table></figure><h4 id="list-for-each"><a href="#list-for-each" class="headerlink" title="list_for_each"></a><strong>list_for_each</strong></h4><p>list_for_each 它实际上是一个for循环，利用传入的pos作为循环变量，从表头head开始，逐项向后（next方向）移动pos，直至又回到head</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_for_each - iterate over a list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@pos</span>: the &amp;struct list_head to use as a loop cursor.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: the head for your list.</span><br><span class="hljs-comment"> */</span><br>#define <span class="hljs-title function_">list_for_each</span>(pos, head) \<br> <span class="hljs-keyword">for</span> (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)<br></code></pre></td></tr></table></figure><h4 id="list-for-each-entry"><a href="#list-for-each-entry" class="headerlink" title="list_for_each_entry"></a><strong>list_for_each_entry</strong></h4><p>遍历每一个list,然后获取其宿主结构地址。<br>&#x3D;&#x3D;pos一般是新建一个链表，传入，用于for循环遍历，head一般是待遍历的链表，member是传入的pos中的list_head对应的成员&#x3D;&#x3D;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_for_each_entry - iterate over list of given type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@pos</span>: the type * to use as a loop cursor.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: the head for your list.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@member</span>: the name of the list_struct within the struct.</span><br><span class="hljs-comment"> */</span><br>#define <span class="hljs-title function_">list_for_each_entry</span>(pos, head, member)    \<br> <span class="hljs-keyword">for</span> (pos = <span class="hljs-title function_">list_entry</span>((head)-&gt;next, <span class="hljs-title function_">typeof</span>(*pos), member); \<br>      &amp;pos-&gt;member != (head);  \<br>      pos = <span class="hljs-title function_">list_entry</span>(pos-&gt;member.<span class="hljs-property">next</span>, <span class="hljs-title function_">typeof</span>(*pos), member))<br></code></pre></td></tr></table></figure><h4 id="list-for-each-prev"><a href="#list-for-each-prev" class="headerlink" title="list_for_each_prev"></a><strong>list_for_each_prev</strong></h4><p>反向遍历得到list.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list_for_each_prev - iterate over a list backwards</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@pos</span>: the &amp;struct list_head to use as a loop cursor.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@head</span>: the head for your list.</span><br><span class="hljs-comment"> */</span><br>#define <span class="hljs-title function_">list_for_each_prev</span>(pos, head) \<br> <span class="hljs-keyword">for</span> (pos = (head)-&gt;prev; pos != (head); pos = pos-&gt;prev)<br></code></pre></td></tr></table></figure><h4 id="list-for-each-entry-reverse"><a href="#list-for-each-entry-reverse" class="headerlink" title="list_for_each_entry_reverse"></a><strong>list_for_each_entry_reverse</strong></h4><p>反向遍历得到list,然后获取其宿主结构地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* list_for_each_entry_reverse - iterate backwards over list of given type.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@pos</span>: the type * to use as a loop cursor.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@head</span>: the head for your list.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@member</span>: the name of the list_struct within the struct.</span><br><span class="hljs-comment">*/</span><br>#define <span class="hljs-title function_">list_for_each_entry_reverse</span>(pos, head, member)   \<br>   <span class="hljs-keyword">for</span> (pos = <span class="hljs-title function_">list_entry</span>((head)-&gt;prev, <span class="hljs-title function_">typeof</span>(*pos), member); \<br>        &amp;pos-&gt;member != (head);  \<br>        pos = <span class="hljs-title function_">list_entry</span>(pos-&gt;member.<span class="hljs-property">prev</span>, <span class="hljs-title function_">typeof</span>(*pos), member))<br></code></pre></td></tr></table></figure><h3 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h3><p>本文详细分析了 linux 内核 中的双链表结构，以图文的方式旨在帮助大家理解。</p><p>当然还有很多接口限于篇幅没有介绍，本文只列出了常用了接口，相信只要理解了前面双链表的组成和插入过程，后面的删除和遍历就自然而然通了。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogsakrwx0yw5.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Linux内核中使用了大量的链表结构来组织数据，包括设备列表以及各种功能模块中的数据组织。这些链表大多采用在include&amp;#x2F;linux&amp;#x2F;list.h实现的一个相当精彩的链表数据结构。事实上，内核链表就是采用双循环链表机制。&lt;/p&gt;
&lt;p&gt;内核链表有别于</summary>
      
    
    
    
    <category term="kernel" scheme="http://example.com/categories/kernel/"/>
    
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>offset_of和container_of宏</title>
    <link href="http://example.com/posts/offset-of%E5%92%8Ccontainer-of%E5%AE%8F.html"/>
    <id>http://example.com/posts/offset-of%E5%92%8Ccontainer-of%E5%AE%8F.html</id>
    <published>2024-11-25T14:51:03.000Z</published>
    <updated>2024-11-25T14:51:27.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、container-of-宏介绍"><a href="#一、container-of-宏介绍" class="headerlink" title="一、container_of 宏介绍"></a>一、container_of 宏介绍</h2><p>到这里假设大家都懂了 <strong>typeof</strong> 和 <strong>语句表达式</strong>，那么我们就开始一睹 Linux 内核第一宏 container_of 的芳容吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> container_of(ptr, type, member) (&#123; \</span><br><span class="hljs-meta">    const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); \</span><br><span class="hljs-meta">    (type *)( (char *)__mptr - offsetof(type,member) );&#125;)</span><br></code></pre></td></tr></table></figure><p>作为 Linux 内核第一个宏，绝对是实至名归的，看看它外表斯文而内藏八块腹肌的身形，就知道它是不好惹的。宏中有宏，作为 GNU C 高端扩展特性的综合运用，那么它有什么作用呢？它的主要<strong>作用</strong>是：<strong>根据结构体某一成员的地址，获取这个结构体的首地址。</strong> 根据宏定义，可知这个宏有三个参数：</p><ul><li>ptr：结构体内成员 member 的地址</li><li>type：结构体类型</li><li>member：结构体内的成员</li></ul><p>也就是说，当我们知道了一个结构体的类型，结构体内某一成员的地址，也就可以直接获得到这个结构体的首地址。container_of 宏返回的就是这个结构体的首地址。</p><h2 id="二、container-of-宏的使用示例"><a href="#二、container-of-宏的使用示例" class="headerlink" title="二、container_of 宏的使用示例"></a>二、container_of 宏的使用示例</h2><p>这个宏在内核中非常重要。在内核中会经常有这样的需求：我们传递给某个函数的参数是某个结构体的成员变量，然后在这个函数中，可能还会用到此结构体的其它成员变量，那么这个时候怎么办呢？我们可以使用 container_of 先通过结构体某一成员的访问找到这个结构体的首地址，然后就可以访问其它成员变量了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">box_t</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">double</span> length;   <span class="hljs-comment">// 盒子的长度</span><br>    <span class="hljs-type">double</span> breadth;  <span class="hljs-comment">// 盒子的宽度</span><br>    <span class="hljs-type">double</span> height;   <span class="hljs-comment">// 盒子的高度</span><br>&#125;;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">box_t</span> <span class="hljs-title">box</span> =</span> &#123;<span class="hljs-number">30.0</span>, <span class="hljs-number">20.0</span>, <span class="hljs-number">10.0</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">box_t</span> *<span class="hljs-title">p_box</span> =</span> <span class="hljs-literal">NULL</span>;<br> <br>    p_box = container_of(&amp;box.height, <span class="hljs-keyword">struct</span> <span class="hljs-type">_box_t</span>, height);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, p_box);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;length: %f\n&quot;</span>, p_box-&gt;length);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;breadth: %f\n&quot;</span>, p_box-&gt;breadth);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个程序中，我们定义一个结构体变量 box，知道了它的成员变量 height 的地址 &amp;box.height，就可以通过 container_of 宏直接获得 box 结构体变量的首地址，然后直接访问 box 结构体的其它成员 p_box-&gt;length 和 p_box-&gt;breadth。</p><h2 id="三、container-of-宏实现原理分析"><a href="#三、container-of-宏实现原理分析" class="headerlink" title="三、container_of 宏实现原理分析"></a>三、container_of 宏实现原理分析</h2><p>container_of 宏的实现主要用到的知识为：语句表达式和 typeof，再加上结构体存储的基础知识。为了帮助大家更好地理解这个宏，我们先复习下结构体存储的基础知识。</p><h3 id="3-1-结构体在内存中的存储"><a href="#3-1-结构体在内存中的存储" class="headerlink" title="3.1 结构体在内存中的存储"></a>3.1 结构体在内存中的存储</h3><p>我们知道，结构体作为一个复合类型数据，它里面可以有多个成员。当我们定义一个结构体变量时，编译器要给这个变量在内存中分配存储空间。除了考虑数据类型、字节对齐等因素之外，编译器会按照结构体中各个成员的顺序，在内存中分配一片连续的空间来存储它们。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">box_t</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">double</span> length;   <span class="hljs-comment">// 盒子的长度</span><br>    <span class="hljs-type">double</span> breadth;  <span class="hljs-comment">// 盒子的宽度</span><br>    <span class="hljs-type">double</span> height;   <span class="hljs-comment">// 盒子的高度</span><br>&#125;;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">box_t</span> <span class="hljs-title">box</span> =</span> &#123;<span class="hljs-number">30.0</span>, <span class="hljs-number">20.0</span>, <span class="hljs-number">10.0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;box = %p\n&quot;</span>, &amp;box);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;box.length = %p\n&quot;</span>, &amp;box.length);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;box.breadth = %p\n&quot;</span>, &amp;box.breadth);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;box.height = %p\n&quot;</span>, &amp;box.height);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个程序中，我们定义一个结构体，里面有三个 double 型数据成员，我们定义一个变量，然后分别打印结构体的地址、各个成员变量的地址，运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">&amp;box         = <span class="hljs-number">2b</span>6c3dd0<br>&amp;box.length  = <span class="hljs-number">2b</span>6c3dd0<br>&amp;box.breadth = <span class="hljs-number">2b</span>6c3dd8<br>&amp;box.height  = <span class="hljs-number">2b</span>6c3de0<br></code></pre></td></tr></table></figure><p>从运行结果我们可以看到，结构体中的每个成员变量，从结构体首地址开始，依次存放。每个成员变量相对于结构体首地址，都有一个固定偏移。比如 breadth 相对于结构体首地址偏移了8个字节。height 的存储地址，相对于结构体首地址偏移了16个字节。</p><h3 id="3-2-计算成员变量在结构体内的偏移"><a href="#3-2-计算成员变量在结构体内的偏移" class="headerlink" title="3.2 计算成员变量在结构体内的偏移"></a>3.2 计算成员变量在结构体内的偏移</h3><p>一个结构体数据类型，在同一个编译环境下，各个成员相对于结构体首地址的偏移是固定的。我们可以修改一下上面的程序，当结构体的首地址为 0 时，结构体中的各成员地址在数值上等于结构体各成员相对于结构体首地址的偏移。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">box_t</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">double</span> length;   <span class="hljs-comment">// 盒子的长度</span><br>    <span class="hljs-type">double</span> breadth;  <span class="hljs-comment">// 盒子的宽度</span><br>    <span class="hljs-type">double</span> height;   <span class="hljs-comment">// 盒子的高度</span><br>&#125;;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;length = %p\n&quot;</span>, &amp;((<span class="hljs-keyword">struct</span> <span class="hljs-type">_box_t</span>*)<span class="hljs-number">0</span>)-&gt;length);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;breadth = %p\n&quot;</span>, &amp;((<span class="hljs-keyword">struct</span> <span class="hljs-type">_box_t</span>*)<span class="hljs-number">0</span>)-&gt;breadth);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;height = %p\n&quot;</span>, &amp;((<span class="hljs-keyword">struct</span> <span class="hljs-type">_box_t</span>*)<span class="hljs-number">0</span>)-&gt;height);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的程序中，我们没有直接定义结构体变量，而是将数字 0 通过强制类型转换，转换为一个指向结构体类型为 _box_t 的常量指针，然后分别打印这个常量指针指向的结构体的各成员地址。运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">&amp;length  = ox0<br>&amp;breadth = <span class="hljs-number">0x8</span><br>&amp;height  = <span class="hljs-number">0x10</span><br></code></pre></td></tr></table></figure><p>因为常量指针为 0，即可以看做结构体首地址为 0，所以结构体中每个成员变量的地址即为该成员相对于结构体首地址的偏移。container_of 宏的实现就是使用这个技巧来实现的。</p><h3 id="3-3-container-of-宏的原理实现"><a href="#3-3-container-of-宏的原理实现" class="headerlink" title="3.3 container_of 宏的原理实现"></a>3.3 container_of 宏的原理实现</h3><p>container_of 宏整体的实现原理如图所示：</p><p><img src="https://hwwyaazvtut.feishu.cn/space/api/box/stream/download/asynccode/?code=NmE5MjNhZmIyZjQ1NjgzNzBlZTc4ZWZjMjM2YTBkMjBfZnpWTktHSDJWMWxTY0p4ckgzWjdwSkhSSXl1T0ZTbXNfVG9rZW46VU8zVmJpaTUzb2hZS2R4N1hCNGNWRVp5bmloXzE3MjEyMzAyNTU6MTcyMTIzMzg1NV9WNA"></p><p>从语法角度来看，container_of 宏的实现由一个语句表达式构成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> container_of(ptr, type, member) (&#123; \</span><br><span class="hljs-meta">    const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr); \</span><br><span class="hljs-meta">    (type *)( (char *)__mptr - offsetof(type,member) );&#125;)</span><br></code></pre></td></tr></table></figure><p><strong>语句表达式的值即为最后一个表达式的值</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">(type *)( (<span class="hljs-type">char</span> *)__mptr - offsetof(type,member) );<br></code></pre></td></tr></table></figure><p>以上这个语句的意义就是，拿结构体某个成员 member 的地址，减去这个成员在结构体 type 中的偏移，结果就是结构体 type 的首地址。因为语句表达式的值等于最后一个表达式的值，所以这个结果也是整个语句表达式的值，container_of 最后就会返回这个地址值给宏的调用者。</p><p>内核中定义了 offset 宏来计算结构体某个成员在结构体内的偏移，它的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span><br></code></pre></td></tr></table></figure><p>这个宏有两个参数，一个是结构体类型 TYPE，一个是结构体的成员 MEMBER，它使用的技巧跟我们上面计算 0 地址常量指针的偏移是一样的：将 0 强制转换为一个指向 TYPE 的结构体常量指针，然后通过这个常量指针访问成员，获取成员 MEMBER 的地址，其大小在数值上就等于 MEMBER 在结构体 TYPE 中的偏移。</p><p>因为结构体的成员数据类型可以是任意数据类型，所以为了让这个宏兼容各种数据类型。我们定义了一个临时指针变量 __mptr ，该变量用来存储结构体成员 MEMBER 的地址，即存储 ptr 的值。那么如何获取 ptr 指针类型呢？通过下面的方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typeof</span>( ((type *)<span class="hljs-number">0</span>)-&gt;member ) *__mptr = (ptr);<br></code></pre></td></tr></table></figure><p>以上宏的参数 ptr 代表的是一个结构体成员变量 MEMBER 的地址，所以 ptr 的类型是一个指向 MEMBER 数据类型的指针。为了确保临时变量 __mptr 的指针类型也是一个指向 MEMBER 类型的指针变量，通过 typeof( ((type *)0)-&gt;member ) 表达式，使用 typeof 关键字来获取结构体成员 member 的数据类型，然后使用 typeof( ((type *)0)-&gt;member ) *__mptr 就可以定义一个指向该类型的指针变量了。</p><p>注意：在语句表达式的最后，因为返回的是结构体的首地址，所以数据类型还必须强制转换为 TYPE *，即返回一个指向 TYPE 结构体类型的指针，所以你会在最后一个表达的offset宏中看到一个强制类型转换(TYPE *)。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>通过对 container_of 宏的整体分析后，这个过程到底对我们有什么启发呢？</p><p>对于任何一个复杂的技术，我们都可以把它由上而下的逐步分解，然后运用所学的基础知识一点一点剖析：先进行小模块分析，然后再进行综合分析。</p><p>比如 container_of 宏的定义，就运用了结构体的存储、语句表达式、typeof 等知识点。</p><p>当我们掌握了这些基础知识，并且有了分析方法，以后在内核中再遇到这样类似的宏，我们就可以自信从容地去自己分析，而不必总是依赖网上大海捞针式的搜索了。</p><p>这就是你的核心竞争力，也是你超越其他工程师、脱颖而出的机会。</p><p>原文链接：<a href="https://blog.csdn.net/m0_37383484/article/details/129244244">https://blog.csdn.net/m0_37383484/article/details/129244244</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、container-of-宏介绍&quot;&gt;&lt;a href=&quot;#一、container-of-宏介绍&quot; class=&quot;headerlink&quot; title=&quot;一、container_of 宏介绍&quot;&gt;&lt;/a&gt;一、container_of 宏介绍&lt;/h2&gt;&lt;p&gt;到这里假设大</summary>
      
    
    
    
    <category term="kernel" scheme="http://example.com/categories/kernel/"/>
    
    
    <category term="kernel" scheme="http://example.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>mmap</title>
    <link href="http://example.com/posts/mmap.html"/>
    <id>http://example.com/posts/mmap.html</id>
    <published>2024-11-25T14:49:19.000Z</published>
    <updated>2024-11-25T14:49:36.742Z</updated>
    
    <content type="html"><![CDATA[<p>mmap 即 memory map，也就是内存映射。mmap 是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用 read、write 等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog5175f10387866d6173bea7fbe89c4eeb.webp"></p><p>mmap原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *start, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;必须注意这里的映射长度length必须是4K整数倍&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> my_data;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/mem&quot;</span>, O_RDWR | O_SYNC);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr = <span class="hljs-number">0x80000000</span>; <span class="hljs-comment">// 假设我们要访问的物理地址</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> map_length = <span class="hljs-number">0x1000</span>; <span class="hljs-comment">// 映射的长度为4KB</span><br> <br>    <span class="hljs-comment">// 映射内存</span><br>    <span class="hljs-type">void</span> *ptr = mmap(<span class="hljs-literal">NULL</span>, map_length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, addr &amp; ~(getpagesize() - <span class="hljs-number">1</span>)); <span class="hljs-comment">// 获取页面对齐基地址，必须以4K对齐</span><br>    <span class="hljs-keyword">if</span> (ptr == MAP_FAILED) &#123;<br>        perror(<span class="hljs-string">&quot;mmap&quot;</span>);<br>        close(fd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>  my_data = *(<span class="hljs-type">int</span> *)(ptr + addr &amp; (getpagesize() - <span class="hljs-number">1</span>));<br><br>    <span class="hljs-comment">// 解除内存映射</span><br>    <span class="hljs-keyword">if</span> (munmap(ptr, map_length) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;munmap&quot;</span>);<br>        close(fd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 关闭文件描述符</span><br>    close(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mmap 即 memory map，也就是内存映射。mmap 是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>gtest</title>
    <link href="http://example.com/posts/gtest.html"/>
    <id>http://example.com/posts/gtest.html</id>
    <published>2024-11-25T14:48:13.000Z</published>
    <updated>2024-11-25T14:48:37.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、构建gtest"><a href="#一、构建gtest" class="headerlink" title="一、构建gtest"></a>一、构建gtest</h2><p>执行如下命令后，就会在系统目录下生成对应的头文件和静态库，可以直接在代码中引用了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">git clone git@github.com:google/googletest.git <br>cd googletest<br>mkdir build<br>cd build<br>cmake .. <br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>一个小例子 mySrc.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> UNTITLED_MYSRC_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UNTITLED_MYSRC_H</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Foo</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//UNTITLED_MYSRC_H</span></span><br></code></pre></td></tr></table></figure><p>mySrc.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Foo</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;    <br>  <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == a || <span class="hljs-number">0</span> == b)  throw <span class="hljs-string">&quot;don&#x27;t do that&quot;</span>;<br>  <span class="hljs-type">int</span> c = a % b;     <br>  <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == c) &#123; <span class="hljs-keyword">return</span> b; &#125;     <br>  <span class="hljs-keyword">return</span> Foo(b, c); &#125;`<br></code></pre></td></tr></table></figure><p>test.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">`<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mySrc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br>TEST(FooTest, HandleNoneZeroInput) <br>&#123;     <br>  EXPECT_EQ(<span class="hljs-number">2</span>, Foo(<span class="hljs-number">4</span>, <span class="hljs-number">10</span>));     <br>  EXPECT_EQ(<span class="hljs-number">6</span>, Foo(<span class="hljs-number">30</span>, <span class="hljs-number">18</span>)); <br>&#125;  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> <br>&#123;     <br>  testing::InitGoogleTest(&amp;argc, argv);    <br>  <span class="hljs-keyword">return</span> RUN_ALL_TESTS(); <br>&#125;<br></code></pre></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">cmake_minimum_required(VERSION <span class="hljs-number">3.20</span>)<br>project(untitled)  <br><span class="hljs-built_in">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)  <br>include_directories(/usr/local/include)  <br>add_executable(untitled mySrc.cpp test.cpp)  <br>FIND_LIBRARY(gtest libgtest.a /usr/local/lib)  <br>target_link_libraries (untitled $&#123;gtest&#125;)<br></code></pre></td></tr></table></figure><p>输出信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">[==========] Running <span class="hljs-number">1</span> test from <span class="hljs-number">1</span> test suite. <br>[----------] Global test environment <span class="hljs-built_in">set</span>-up. <br>[----------] <span class="hljs-number">1</span> test from FooTest <br>[ RUN      ] FooTest.HandleNoneZeroInput<br>[       OK ] FooTest.HandleNoneZeroInput (<span class="hljs-number">0</span> ms) <br>[----------] <span class="hljs-number">1</span> test from FooTest (<span class="hljs-number">0</span> ms total)  <br>[----------] Global test environment tear-down [==========] <span class="hljs-number">1</span> test from <span class="hljs-number">1</span> test suite ran. (<span class="hljs-number">0</span> ms total) [  PASSED  ] <span class="hljs-number">1</span> test.<br></code></pre></td></tr></table></figure><p><strong>上面的是通过事先编译好gtest的方式进行使用，其实也可以在项目的目录下，直接把googletest放进去的方式进行使用</strong></p><h2 id="二、assertion"><a href="#二、assertion" class="headerlink" title="二、assertion"></a>二、assertion</h2><p>在gtest中，是通过断言（assertion）来判断代码实现的功能是否符合预期。断言的结果分为success、non-fatal failture和fatal failture。</p><p>根据断言失败的种类，gtest提供了两种断言函数：</p><p>success：即断言成功，程序的行为符合预期，程序继续向下允许。</p><p>non-fatal failure：即断言失败，但是程序没有直接crash，而是继续向下运行。</p><p>gtest提供了宏函数EXPECT_XXX(expected, actual)：如果condition(expected, actual)返回false，则EXPECT_XXX产生的就是non-fatal failure错误，并显示相关错误。</p><p>fatal failure：断言失败，程序直接crash，后续的测试案例不会被运行。</p><p>gtest提供了宏函数ASSERT_XXX(expected, actual)。</p><p>在写单元测试时，更加倾向于使用EXPECT_XXX，因为ASSERT_XXX是直接crash退出的，可能会导致一些内存、文件资源没有释放，因此可能会引入一些bug。</p><p>具体的EXPECT_XXX、ASSERT_XXX函数及其判断条件，如下两个表。</p><p>表1 一元比较</p><table><thead><tr><th>ASSERT</th><th>EXPECT</th><th>Verifies</th></tr></thead><tbody><tr><td>ASSERT_TRUE(condition);</td><td>EXPECT_TRUE(condition);</td><td>condition is true</td></tr><tr><td>ASSERT_FALSE(condition)</td><td>EXPECT_FALSE(condition)</td><td>condition is false</td></tr></tbody></table><p>表2 二元比较</p><table><thead><tr><th>ASSERT</th><th>EXPECT</th><th>Condition</th></tr></thead><tbody><tr><td>ASSERT_EQ(val1, val2);</td><td>EXPECT_EQ(val1, val2);</td><td>val1 &#x3D;&#x3D; val2</td></tr><tr><td>ASSERT_NE(val1, val2);</td><td>EXPECT_NE(val1, val2);</td><td>val1 !&#x3D; val2</td></tr><tr><td>ASSERT_LT(val1, val2);</td><td>EXPECT_LT(val1, val2);</td><td>val1 &lt; val2</td></tr><tr><td>ASSERT_LE(val1, val2);</td><td>EXPECT_LE(val1, val2);</td><td>val1 &lt;&#x3D; val2</td></tr><tr><td>ASSERT_GT(val1, val2);</td><td>EXPECT_GT(val1, val2);</td><td>val1 &gt; val2</td></tr><tr><td>ASSERT_GE(val1, val2);</td><td>EXPECT_GE(val1, val2);</td><td>val1 &gt;&#x3D; val2</td></tr></tbody></table><h2 id="三、Quick-Start"><a href="#三、Quick-Start" class="headerlink" title="三、Quick Start"></a>三、Quick Start</h2><p>下面以EXPECT_XXX为例子，快速开始使用gtest吧。</p><p>对于EXPECT_XXX，无论条件是否满足，都会继续向下运行，但是如果条件不满足，在报错的地方会显示：</p><p>没有通过的那个EXPECT_XXX函数位置； EXPECT_XXX第一个参数的值，即期待值 EXPECT_XXX第二个参数的值，即实际值 如下demo：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// in gtest_demo_1.cc</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;gtest/gtest.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> lhs, <span class="hljs-type">int</span> rhs)</span> <br>&#123; <br>  <span class="hljs-keyword">return</span> lhs + rhs; <br>&#125;  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span> <br>&#123;      <br>  EXPECT_EQ(add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), <span class="hljs-number">2</span>); <span class="hljs-comment">// PASS     EXPECT_EQ(add(1,1), 1) &lt;&lt; &quot;FAILED: EXPECT: 2, but given 1&quot;;; // FAILDED          return 0; </span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译执行后输出如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">`$ ./gtest_demo_1 <br>/Users/self_study/Cpp/OpenSource/demo/gtest_demo_1.cc:<span class="hljs-number">9</span>: Failure Expected equality of these values:   <br>  add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)     <br>  Which is: <span class="hljs-number">2</span>                <br># 期待的值   <span class="hljs-number">1</span>                            <br># 给定的值<br>FAILED: EXPECT: <span class="hljs-number">2</span>, but given <span class="hljs-number">1</span> # 自己添加的提示信息<br></code></pre></td></tr></table></figure><p>可能你注意到了，在EXPECT_EQ(add(1,1), 1)后有个&lt;&lt;，这是因为gtest允许添加自定义的描述信息，当这个语句测试未通过时就会显示，比如上面的”FAILED: EXPECT: 2, but given 1”。</p><p>这个&lt;&lt;和std::ostream接受的类型一致，即可以接受std::ostream可以接受的类型。</p><h2 id="四、TEST"><a href="#四、TEST" class="headerlink" title="四、TEST"></a>四、TEST</h2><p>下面以googletest&#x2F;samples中的sample1_unittest.cc中的demo为例，介绍如何更好地组织测试案例。</p><p>一个简单计算阶乘函数Factorial实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;   <br>  <span class="hljs-type">int</span> result = <span class="hljs-number">1</span>;   <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;     <br>    result *= i;   <br>  &#125;    <br>  <span class="hljs-keyword">return</span> result; <br>&#125;<br></code></pre></td></tr></table></figure><p>怎么使用gtest来测试这个函数的行为？</p><p>按照上面的quick start可知，这个时候就可以使用EXPECT_EQ宏来判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">EXPECT_EQ(<span class="hljs-number">1</span>, Factorial(<span class="hljs-number">-5</span>)); <span class="hljs-comment">// 测试计算负数的阶乘   </span><br>EXPECT_EQ(<span class="hljs-number">1</span>, Factorial(<span class="hljs-number">0</span>));   <span class="hljs-comment">// 测试计算0的阶乘   </span><br>EXPECT_EQ(<span class="hljs-number">6</span>, Factorial(<span class="hljs-number">3</span>));   <span class="hljs-comment">// 测试计算正数的阶乘</span><br></code></pre></td></tr></table></figure><p>但是当测试案例规模变大，不好组织。</p><p>因此，为了更好的组织test cases，比如针对Factorial函数，输入是负数的cases为一组，输入是0的case为一组，正数cases为一组。gtest提供了一个宏TEST(TestSuiteName, TestName)，用于组织不同场景的cases，这个功能在gtest中称为test suite。</p><p>用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 下面三个 TEST 都是属于同一个 test suite，即 FactorialTest// 正数为一组TEST(FactorialTest, Negative) &#123;   </span><br>  EXPECT_EQ(<span class="hljs-number">1</span>, Factorial(<span class="hljs-number">-5</span>));   <br>  EXPECT_EQ(<span class="hljs-number">1</span>, Factorial(<span class="hljs-number">-1</span>));   <br>  EXPECT_GT(Factorial(<span class="hljs-number">-10</span>), <span class="hljs-number">0</span>); <br>&#125; <br><span class="hljs-comment">// 0</span><br>TEST(FactorialTest, Zero) &#123;   <br>  EXPECT_EQ(<span class="hljs-number">1</span>, Factorial(<span class="hljs-number">0</span>)); <br>&#125; <br><span class="hljs-comment">// 负数为一组</span><br>TEST(FactorialTest, Positive) &#123;   <br>  EXPECT_EQ(<span class="hljs-number">1</span>, Factorial(<span class="hljs-number">1</span>));   <br>  EXPECT_EQ(<span class="hljs-number">2</span>, Factorial(<span class="hljs-number">2</span>));   <br>  EXPECT_EQ(<span class="hljs-number">6</span>, Factorial(<span class="hljs-number">3</span>));   <br>  EXPECT_EQ(<span class="hljs-number">40320</span>, Factorial(<span class="hljs-number">8</span>)); <br>&#125;<br></code></pre></td></tr></table></figure><p>问题来了，怎么运行这些TEST？</p><p>在sample1_unittest.cc的main函数中，添加RUN_ALL_TESTS函数即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;   <br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Running main() from %s\n&quot;</span>, __FILE__);   <br>  testing::InitGoogleTest(&amp;argc, argv);   <br>  <span class="hljs-keyword">return</span> RUN_ALL_TESTS();  <br>&#125;<br></code></pre></td></tr></table></figure><p>在build&#x2F;bin路径下，执行对应的可执行文件，输出如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">$./sample1_unittest  Running <span class="hljs-title function_">main</span><span class="hljs-params">()</span> from /Users/self_study/Cpp/OpenSource/demo/include/googletest/googletest/samples/sample1_unittest.cc [==========] Running <span class="hljs-number">6</span> tests from <span class="hljs-number">2</span> test suites. # 在 sample1_unittest.cc 中有两个 test suites [----------] Global test environment <span class="hljs-built_in">set</span>-up.      # 第一个 test suite，即上面的 FactorialTest [----------] <span class="hljs-number">3</span> tests from FactorialTest     # <span class="hljs-number">3</span> 组 [ RUN      ] FactorialTest.Negative         # Negative 组输出 [       OK ] FactorialTest.Negative (<span class="hljs-number">0</span> ms)  # OK 表示 Negative 组全部测试通过 [ RUN      ] FactorialTest.Zero             # Zero组输出  [       OK ] FactorialTest.Zero (<span class="hljs-number">0</span> ms)     [ RUN      ] FactorialTest.Positive         # Positive组输出 [       OK ] FactorialTest.Positive (<span class="hljs-number">0</span> ms)    <br>[----------] <span class="hljs-number">3</span> tests from FactorialTest (<span class="hljs-number">0</span> ms total) #sample1_unitest 另一个测试案例的输出 ...  [----------] Global test environment tear-down   [==========] <span class="hljs-number">6</span> tests from <span class="hljs-number">2</span> test suites ran. (<span class="hljs-number">0</span> ms total)  [  PASSED  ] <span class="hljs-number">6</span> tests.              # 全部测试结果：PASS表示全部通过  <br><br>下面稍微修改下sample1_unittest.cc中的代码，来产生一个错误：  <br>TEST(FactorialTest, Negative) &#123;   <br>  EXPECT_EQ(<span class="hljs-number">10</span>, Factorial(<span class="hljs-number">-5</span>));  <span class="hljs-comment">// 正确的应该是  EXPECT_EQ(1, Factorial(-5));   </span><br>  <span class="hljs-comment">// ... </span><br>&#125;<br></code></pre></td></tr></table></figure><p>重新编译，运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">$ ./sample1_unittest  Running <span class="hljs-title function_">main</span><span class="hljs-params">()</span> from /Users/self_study/Cpp/OpenSource/demo/include/googletest/googletest/samples/sample1_unittest.cc [==========] Running <span class="hljs-number">6</span> tests from <span class="hljs-number">2</span> test suites. [----------] Global test environment <span class="hljs-built_in">set</span>-up. [----------] <span class="hljs-number">3</span> tests from FactorialTest [ RUN      ] FactorialTest.Negative          # 开始运行上面修改的那个组 /Users/self_study/Cpp/OpenSource/demo/include/googletest/googletest/samples/sample1_unittest.cc:<span class="hljs-number">79</span>: Failure                 # 测试失败，并指出错误<span class="hljs-keyword">case</span>的位置 Expected equality of these values:           # 期待的值   <span class="hljs-number">10</span>   Factorial(<span class="hljs-number">-5</span>)                              # 实际计算出的值     Which is: <span class="hljs-number">1</span> [  FAILED  ] FactorialTest.Negative (<span class="hljs-number">0</span> ms)   # 这组<span class="hljs-keyword">case</span>测试状态：FAILED [ RUN      ] FactorialTest.Zero              # 下面继续运行 [       OK ] FactorialTest.Zero (<span class="hljs-number">0</span> ms) <br>[ RUN      ] FactorialTest.Positive <br>[       OK ] FactorialTest.Positive (<span class="hljs-number">0</span> ms) <br>[----------] <span class="hljs-number">3</span> tests from FactorialTest (<span class="hljs-number">0</span> ms total)  # ...  <br>[----------] Global test environment tear-down [==========] <span class="hljs-number">6</span> tests from <span class="hljs-number">2</span> test suites ran. (<span class="hljs-number">0</span> ms total) [  PASSED  ] <span class="hljs-number">5</span> tests.           [  FAILED  ] <span class="hljs-number">1</span> test, listed below:     # <span class="hljs-number">1</span>个test失败 [  FAILED  ] FactorialTest.Negative    # 失败的test suite及其组   <span class="hljs-number">1</span> FAILED TEST<br></code></pre></td></tr></table></figure><p>此外，在TEST宏函数中，也可以像个普通函数一样，定义变量之类的行为。</p><p>比如在sample2_unittest.cc中，测试一个自定义类MyString的复制构造函数是否表现正常：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> kHelloString[] = <span class="hljs-string">&quot;Hello, world!&quot;</span>;  <span class="hljs-comment">// 在 TEST内部，定义变量TEST(MyString, CopyConstructor) &#123;   </span><br>  <span class="hljs-type">const</span> MyString <span class="hljs-title function_">s1</span><span class="hljs-params">(kHelloString)</span>;   <br>  <span class="hljs-type">const</span> MyString s2 = s1;   <br>  EXPECT_EQ(<span class="hljs-number">0</span>, <span class="hljs-built_in">strcmp</span>(s2.c_string(), kHelloString)); <br>&#125;<br></code></pre></td></tr></table></figure><p>为获得进一步学习，读者可以自行调整sample1_unittest.cc、sample2_unittest.cc中的TEST行为，加深对gtest的TEST宏的理解。</p><h2 id="五、TEST-F"><a href="#五、TEST-F" class="headerlink" title="五、TEST_F"></a>五、TEST_F</h2><p>下面介绍gtest中更为高级的功能：test fixture，对应的宏函数是TEST_F(TestFixtureName, TestName)。</p><p>fixture，其语义是固定的设施，而test fixture在gtest中的作用就是为每个TEST都执行一些同样的操作。</p><p>比如，要测试一个队列Queue的各个接口功能是否正常，因此就需要向队列中添加元素。如果使用一个TEST函数测试Queue的一个接口，那么每次执行TEST时，都需要在TEST宏函数中定义一个Queue对象，并向该对象中添加元素，就很冗余、繁琐。</p><p>怎么避免这部分冗余的过程？</p><p>TEST_F就是完成这样的事情，它的第一个参数TestFixtureName是个类，需要继承testing::Test，同时根据需要实现以下两个虚函数：</p><p>virtual void SetUp()：在TEST_F中测试案例之前运行； virtual void TearDown()：在TEST_F之后运行。 可以类比对象的构造函数和析构函数。这样，同一个TestFixtureName下的每个TEST_F都会先执行SetUp，最后执行TearDwom。</p><p>此外，testing::Test还提供了两个static函数：</p><p>static void SetUpTestSuite()：在第一个TEST之前运行 static void TearDownTestSuite()：在最后一个TEST之后运行 以sample3-inl中实现的class Queue为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueTestSmpl3</span> :</span> public testing::Test &#123; <span class="hljs-comment">// 继承了 testing::Test</span><br>  protected:        <br>  <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">SetUpTestSuite</span><span class="hljs-params">()</span> &#123;     <br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;run before first case...&quot;</span>&lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;   <br>  &#125;     <br><br>  <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">TearDownTestSuite</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;run after last case...&quot;</span>&lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;   <br>  &#125;      <br><br>  virtual <span class="hljs-type">void</span> <span class="hljs-title function_">SetUp</span><span class="hljs-params">()</span> override &#123;    <br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;enter into SetUp()&quot;</span> &lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <br>    q1_.Enqueue(<span class="hljs-number">1</span>);     <br>    q2_.Enqueue(<span class="hljs-number">2</span>);    <br>    q2_.Enqueue(<span class="hljs-number">3</span>);   <br>  &#125;    <br><br>  virtual <span class="hljs-type">void</span> <span class="hljs-title function_">TearDown</span><span class="hljs-params">()</span> override &#123;     <br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;exit from TearDown&quot;</span> &lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;   <br>  &#125;      <br><br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Double</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*n;<br>  &#125;      <br><br>  <span class="hljs-type">void</span> <span class="hljs-title function_">MapTester</span><span class="hljs-params">(<span class="hljs-type">const</span> Queue&lt;<span class="hljs-type">int</span>&gt; * q)</span> &#123;     <br>    <span class="hljs-type">const</span> Queue&lt;<span class="hljs-type">int</span>&gt; * <span class="hljs-type">const</span> new_q = q-&gt;Map(Double);<br>    ASSERT_EQ(q-&gt;Size(), new_q-&gt;Size());      <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> QueueNode&lt;<span class="hljs-type">int</span>&gt;*n1 = q-&gt;Head(), *n2 = new_q-&gt;Head();          n1 != nullptr; n1 = n1-&gt;next(), n2 = n2-&gt;next()) <br>    &#123;       <br>      EXPECT_EQ(<span class="hljs-number">2</span> * n1-&gt;element(), n2-&gt;element());    <br>    &#125;      <br>    delete new_q;   <br>  &#125;    <br><br>  Queue&lt;<span class="hljs-type">int</span>&gt; q0_;   <br>  Queue&lt;<span class="hljs-type">int</span>&gt; q1_;   <br>  Queue&lt;<span class="hljs-type">int</span>&gt; q2_; <br>&#125;;<br></code></pre></td></tr></table></figure><p>下面是sample3_unittest.cc中的TEST_F：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// in sample3_unittest.cc</span><br><span class="hljs-comment">// Tests the default c&#x27;tor.</span><br>TEST_F(QueueTestSmpl3, DefaultConstructor) &#123;   <br><span class="hljs-comment">// !!! 在 TEST_F 中可以使用 QueueTestSmpl3 的成员变量、成员函数    </span><br>  EXPECT_EQ(<span class="hljs-number">0u</span>, q0_.Size()); <br>&#125;  <br><br><span class="hljs-comment">// Tests Dequeue().</span><br>TEST_F(QueueTestSmpl3, Dequeue) &#123;   <br>  <span class="hljs-type">int</span> * n = q0_.Dequeue();   <br>  EXPECT_TRUE(n == nullptr);    <br>  n = q1_.Dequeue();   <br>  ASSERT_TRUE(n != nullptr);   <br>  EXPECT_EQ(<span class="hljs-number">1</span>, *n);   <br>  EXPECT_EQ(<span class="hljs-number">0u</span>, q1_.Size());  <br>  delete n;    <br>  n = q2_.Dequeue();   <br>  ASSERT_TRUE(n != nullptr);   <br>  EXPECT_EQ(<span class="hljs-number">2</span>, *n);   <br>  EXPECT_EQ(<span class="hljs-number">1u</span>, q2_.Size());   <br>  delete n; <br>&#125;  <br><span class="hljs-comment">// Tests the Queue::Map() function.</span><br>TEST_F(QueueTestSmpl3, Map) &#123;   <br>  MapTester(&amp;q0_);   <br>  MapTester(&amp;q1_);   <br>  MapTester(&amp;q2_); <br>&#125;<br></code></pre></td></tr></table></figure><p>以TEST_F(QueueTestSmpl3, DefaultConstructor)为例，再具体讲解下TEST_F的运行流程：</p><p>gtest构造一个QueueTestSmpl3对象t1； t1.setUp初始化t1 第一个TEST_F即DefaultConstructor开始运行并结束 t1.TearDwon运行，用于清理工作 t1被析构 因此，sample3_unittest.cc输出如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">% ./sample3_unittest Running <span class="hljs-title function_">main</span><span class="hljs-params">()</span> from /Users/self_study/Cpp/OpenSource/demo/include/googletest/googletest/samples/sample3_unittest.cc <br>[==========] Running <span class="hljs-number">3</span> tests from <span class="hljs-number">1</span> test suite. <br>[----------] Global test environment <span class="hljs-built_in">set</span>-up. <br>[----------] <span class="hljs-number">3</span> tests from QueueTestSmpl3 run before first <span class="hljs-keyword">case</span>...    # 所有的test <span class="hljs-keyword">case</span> 之前运行 [ RUN      ] QueueTestSmpl3.DefaultConstructor enter into SetUp()          # 每次都会运行 <span class="hljs-built_in">exit</span> from TearDown <br>[       OK ] QueueTestSmpl3.DefaultConstructor (<span class="hljs-number">0</span> ms) <br>[ RUN      ] QueueTestSmpl3.Dequeue enter into SetUp()          # 每次都会运行 <span class="hljs-built_in">exit</span> from TearDown <br>[       OK ] QueueTestSmpl3.Dequeue (<span class="hljs-number">0</span> ms) <br>[ RUN      ] QueueTestSmpl3.Map enter into SetUp()          # 每次都会运行 <span class="hljs-built_in">exit</span> from TearDown [       OK ] QueueTestSmpl3.Map (<span class="hljs-number">0</span> ms) run after last <span class="hljs-keyword">case</span>...      # 所有test <span class="hljs-keyword">case</span>结束之后运行 [----------] <span class="hljs-number">3</span> tests from QueueTestSmpl3 (<span class="hljs-number">0</span> ms total)  <br>[----------] Global test environment tear-down [==========] <span class="hljs-number">3</span> tests from <span class="hljs-number">1</span> test suite ran. (<span class="hljs-number">0</span> ms total) [  PASSED  ] <span class="hljs-number">3</span> tests.<br></code></pre></td></tr></table></figure><p>TEST_F相比较TEST可以更加简洁地实现功能测试。</p><p>gtest的基础入门教程就到此为止</p><h2 id="六、MOCKER"><a href="#六、MOCKER" class="headerlink" title="六、MOCKER"></a>六、MOCKER</h2><p>对打桩的函数，使用MOCKER，可以按照预期值返回</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mockercpp/mockercpp.hpp&quot;</span></span><br><br>TEST_F(QueueTestSmpl3, xxx_test)<br>&#123;<br>  MOCKER(hal_kernel_get_soc_type)<br>  .stub()<br>  .with(any(), outBoundP())<br>  .will(<span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>));<br><br>  xxx_test();<br>  GlobalMockObject::verify();<br>&#125;<br></code></pre></td></tr></table></figure><p>C++中MOCKER类中的函数可以使用MOCKERCPP</p><p>GlobalMockObject::verify();是验证mock是否正常按照预期传入参数，清除后续mocker</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、构建gtest&quot;&gt;&lt;a href=&quot;#一、构建gtest&quot; class=&quot;headerlink&quot; title=&quot;一、构建gtest&quot;&gt;&lt;/a&gt;一、构建gtest&lt;/h2&gt;&lt;p&gt;执行如下命令后，就会在系统目录下生成对应的头文件和静态库，可以直接在代码中引用了。&lt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>poll、epoll</title>
    <link href="http://example.com/posts/poll%E3%80%81epoll.html"/>
    <id>http://example.com/posts/poll%E3%80%81epoll.html</id>
    <published>2024-11-25T14:47:23.000Z</published>
    <updated>2024-11-25T14:47:48.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、poll介绍"><a href="#一、poll介绍" class="headerlink" title="一、poll介绍"></a>一、poll介绍</h3><p>poll与select一样，只负责IO的等的过程，只不过一次可以等待多个文件描述符，他的作用是让read和write不再阻塞。</p><p>是用来监视多个文件描述符的状态变化的<br>程序会停在poll这里等待，直到被监视的文件描述符有一个或多个发生了状态改变</p><h3 id="二、poll的接口"><a href="#二、poll的接口" class="headerlink" title="二、poll的接口"></a>二、poll的接口</h3><p>poll的接口如下，比select要轻量化很多，只有三个参数<br><img src="https://i-blog.csdnimg.cn/direct/899a62e984c7418f8e6c3ed248b59676.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">参数<span class="hljs-number">1</span>：<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> *<span class="hljs-title">fds</span>，<span class="hljs-title">pollfd</span>数组首元素地址，</span><br><span class="hljs-class"></span><br><span class="hljs-class">  <span class="hljs-title">pollfd</span>是操作系统给我们提供的结构体，主要成员如下</span><br><span class="hljs-class">  <span class="hljs-title">fd</span>：文件描述符</span><br><span class="hljs-class">  <span class="hljs-title">events</span>：用户告诉内核，需要关心的<span class="hljs-title">fd</span>，上面的事件</span><br><span class="hljs-class">  <span class="hljs-title">revents</span>：<span class="hljs-title">poll</span>返回，内核告诉用户，关心的<span class="hljs-title">fd</span>，那些事件就绪</span><br><span class="hljs-class"></span><br><span class="hljs-class">参数2：<span class="hljs-title">nfds_t</span> <span class="hljs-title">nfds</span>，数组元素个数</span><br><span class="hljs-class"></span><br><span class="hljs-class">参数3：<span class="hljs-title">int</span> <span class="hljs-title">timeout</span>，毫秒级的等待时间</span><br><span class="hljs-class"><span class="hljs-title">timeout</span> &gt;</span> <span class="hljs-number">0</span> 等待timeout毫秒或者有fd就绪再返回。<br>timeout == <span class="hljs-number">0</span> 非阻塞轮询。<br>timeout == <span class="hljs-number">-1</span> 阻塞等待，直到有fd就绪。<br><br>返回值：<br>ret  &gt;  <span class="hljs-number">0</span> ：poll等待的多个fd中，已经就需要的fd个数<br>ret == <span class="hljs-number">0</span> ：poll超时返回<br>ret  &lt;  <span class="hljs-number">0</span> ：poll出错<br></code></pre></td></tr></table></figure><p>poll的事件如下，这些值是bit位，可以通过  |（或运算）  的方式写入到events中，我们着重学习POLLIN和POLLOUT</p><p><img src="https://i-blog.csdnimg.cn/direct/a866b6a4129643debaa03017a1f5fb47.png"></p><p><img src="https://i-blog.csdnimg.cn/direct/3480236feb334bfcaaae5a49c04bb9aa.png"></p><h3 id="三、poll使用例子"><a href="#三、poll使用例子" class="headerlink" title="三、poll使用例子"></a>三、poll使用例子</h3><p>Log.hpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>    Debug = <span class="hljs-number">0</span>,<br>    Info,<br>    Warning,<br>    Error,<br>    Fatal<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>    Screen = <span class="hljs-number">10</span>,<br>    OneFile,<br>    ClassFile<br>&#125;;<br> <br><span class="hljs-built_in">string</span> <span class="hljs-title function_">LevelToString</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (level)<br>    &#123;<br>    <span class="hljs-keyword">case</span> Debug:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Debug&quot;</span>;<br>    <span class="hljs-keyword">case</span> Info:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Info&quot;</span>;<br>    <span class="hljs-keyword">case</span> Warning:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Warning&quot;</span>;<br>    <span class="hljs-keyword">case</span> Error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error&quot;</span>;<br>    <span class="hljs-keyword">case</span> Fatal:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Fatal&quot;</span>;<br> <br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Unknown&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> default_style = Screen;<br><span class="hljs-type">const</span> <span class="hljs-built_in">string</span> default_filename = <span class="hljs-string">&quot;Log.&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-built_in">string</span> logdir = <span class="hljs-string">&quot;log&quot;</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    Log(<span class="hljs-type">int</span> style = default_style, <span class="hljs-built_in">string</span> filename = default_filename)<br>        : _style(style), _filename(filename)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (_style != Screen)<br>            mkdir(logdir.c_str(), <span class="hljs-number">0775</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">// 更改打印方式</span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Enable</span><span class="hljs-params">(<span class="hljs-type">int</span> style)</span><br>    &#123;<br>        _style = style;<br>        <span class="hljs-keyword">if</span> (_style != Screen)<br>            mkdir(logdir.c_str(), <span class="hljs-number">0775</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">// 时间戳转化为年月日时分秒</span><br>    <span class="hljs-built_in">string</span> <span class="hljs-title function_">GetTime</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">time_t</span> currtime = time(nullptr);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> *<span class="hljs-title">curr</span> =</span> localtime(&amp;currtime);<br>        <span class="hljs-type">char</span> time_buffer[<span class="hljs-number">128</span>];<br>        <span class="hljs-built_in">snprintf</span>(time_buffer, <span class="hljs-keyword">sizeof</span>(time_buffer), <span class="hljs-string">&quot;%d-%d-%d %d:%d:%d&quot;</span>,<br>                 curr-&gt;tm_year + <span class="hljs-number">1900</span>, curr-&gt;tm_mon + <span class="hljs-number">1</span>, curr-&gt;tm_mday, curr-&gt;tm_hour, curr-&gt;tm_min, curr-&gt;tm_sec);<br>        <span class="hljs-keyword">return</span> time_buffer;<br>    &#125;<br> <br>    <span class="hljs-comment">// 写入到文件中</span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">WriteLogToOneFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span> &amp;logname, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span> &amp;message)</span><br>    &#123;<br>        FILE *fp = fopen(logname.c_str(), <span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fp == nullptr)<br>        &#123;<br>            perror(<span class="hljs-string">&quot;fopen failed&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s\n&quot;</span>, message.c_str());<br> <br>        fclose(fp);<br>    &#125;<br> <br>    <span class="hljs-comment">// 打印日志</span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">WriteLogToClassFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span> &amp;levelstr, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span> &amp;message)</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> logname = logdir;<br>        logname += <span class="hljs-string">&quot;/&quot;</span>;<br>        logname += _filename;<br>        logname += levelstr;<br>        WriteLogToOneFile(logname, message);<br>    &#125;<br> <br>    <span class="hljs-type">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">WriteLog</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span> &amp;levelstr, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span> &amp;message)</span><br>    &#123;<br>        pthread_mutex_lock(&amp;lock);<br>        <span class="hljs-keyword">switch</span> (_style)<br>        &#123;<br>        <span class="hljs-keyword">case</span> Screen:<br>            <span class="hljs-built_in">cout</span> &lt;&lt; message &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 打印到屏幕中</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> OneFile:<br>            WriteLogToClassFile(<span class="hljs-string">&quot;all&quot;</span>, message); <span class="hljs-comment">// 给定all，直接写到all里</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ClassFile:<br>            WriteLogToClassFile(levelstr, message); <span class="hljs-comment">// 写入levelstr里</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        pthread_mutex_unlock(&amp;lock);<br>    &#125;<br> <br>    <span class="hljs-comment">// 提供接口给运算符重载使用</span><br>    <span class="hljs-type">void</span> _LogMessage(<span class="hljs-type">int</span> level, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">int</span> line, <span class="hljs-type">char</span> *rightbuffer)<br>    &#123;<br>        <span class="hljs-type">char</span> leftbuffer[<span class="hljs-number">1024</span>];<br>        <span class="hljs-built_in">string</span> levelstr = LevelToString(level);<br>        <span class="hljs-built_in">string</span> currtime = GetTime();<br>        <span class="hljs-built_in">string</span>  idstr = to_string(getpid());<br> <br>        <span class="hljs-built_in">snprintf</span>(leftbuffer, <span class="hljs-keyword">sizeof</span>(leftbuffer), <span class="hljs-string">&quot;[%s][%s][%s][%s:%d]&quot;</span>, levelstr.c_str(), currtime.c_str(), idstr.c_str(), file, line);<br> <br>        <span class="hljs-built_in">string</span> messages = leftbuffer;<br>        messages += rightbuffer;<br>        WriteLog(levelstr, messages);<br>    &#125;<br> <br>    <span class="hljs-comment">// 运算符重载</span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> level, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">int</span> line, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span><br>    &#123;<br>        <span class="hljs-type">char</span> rightbuffer[<span class="hljs-number">1024</span>];<br>        va_list args;                                              <span class="hljs-comment">// va_list 是指针</span><br>        va_start(args, format);                                    <span class="hljs-comment">// 初始化va_list对象，format是最后一个确定的参数</span><br>        vsnprintf(rightbuffer, <span class="hljs-keyword">sizeof</span>(rightbuffer), format, args); <span class="hljs-comment">// 写入到rightbuffer中</span><br>        va_end(args);<br>        _LogMessage(level, file, line, rightbuffer);<br>    &#125;<br> <br>    ~Log()<br>    &#123;<br>    &#125;<br> <br>private:<br>    <span class="hljs-type">int</span> _style;<br>    <span class="hljs-built_in">string</span> _filename;<br>&#125;;<br> <br>Log lg;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Conf</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    Conf()<br>    &#123;<br>        lg.Enable(Screen);<br>    &#125;<br>    ~Conf()<br>    &#123;<br>    &#125;<br>&#125;;<br> <br>Conf conf;<br> <br><span class="hljs-comment">// 辅助宏</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lg(level, format, ...) lg(level, __FILE__, __LINE__, format, ##__VA_ARGS__)</span><br></code></pre></td></tr></table></figure><p>Socket.hpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br>namespace Net_Work<br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> default_backlog = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> default_sockfd = <span class="hljs-number">-1</span>;<br>    using namespace <span class="hljs-built_in">std</span>;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">    &#123;</span><br>        SocketError = <span class="hljs-number">1</span>,<br>        BindError,<br>        ListenError,<br>        ConnectError,<br>    &#125;;<br> <br>    <span class="hljs-comment">// 封装套接字接口基类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Socket</span></span><br><span class="hljs-class">    &#123;</span><br>    public:<br>        <span class="hljs-comment">// 封装了socket相关方法</span><br>        virtual ~Socket() &#123;&#125;<br>        virtual <span class="hljs-type">void</span> <span class="hljs-title function_">CreateSocket</span><span class="hljs-params">()</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">void</span> <span class="hljs-title function_">BindSocket</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port)</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">void</span> <span class="hljs-title function_">ListenSocket</span><span class="hljs-params">(<span class="hljs-type">int</span> backlog)</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">bool</span> <span class="hljs-title function_">ConnectSocket</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp;serverip, <span class="hljs-type">uint16_t</span> serverport)</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">int</span> <span class="hljs-title function_">AcceptSocket</span><span class="hljs-params">(<span class="hljs-built_in">string</span> *peerip, <span class="hljs-type">uint16_t</span> *peerport)</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">int</span> <span class="hljs-title function_">GetSockFd</span><span class="hljs-params">()</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">void</span> <span class="hljs-title function_">SetSockFd</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">void</span> <span class="hljs-title function_">CloseSocket</span><span class="hljs-params">()</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">bool</span> <span class="hljs-title function_">Recv</span><span class="hljs-params">(<span class="hljs-built_in">string</span> *buff, <span class="hljs-type">int</span> size)</span> = <span class="hljs-number">0</span>;<br>        virtual <span class="hljs-type">void</span> <span class="hljs-title function_">Send</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp;send_string)</span> = <span class="hljs-number">0</span>;<br> <br>        <span class="hljs-comment">// 方法的集中在一起使用</span><br>    public:<br>        <span class="hljs-type">void</span> <span class="hljs-title function_">BuildListenSocket</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port, <span class="hljs-type">int</span> backlog = default_backlog)</span><br>        &#123;<br>            CreateSocket();<br>            BindSocket(port);<br>            ListenSocket(backlog);<br>        &#125;<br> <br>        <span class="hljs-type">bool</span> <span class="hljs-title function_">BuildConnectSocket</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp;serverip, <span class="hljs-type">uint16_t</span> serverport)</span><br>        &#123;<br>            CreateSocket();<br>            <span class="hljs-keyword">return</span> ConnectSocket(serverip, serverport);<br>        &#125;<br> <br>        <span class="hljs-type">void</span> <span class="hljs-title function_">BuildNormalSocket</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span><br>        &#123;<br>            SetSockFd(sockfd);<br>        &#125;<br>    &#125;;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpSocket</span> :</span> public Socket<br>    &#123;<br>    public:<br>        TcpSocket(<span class="hljs-type">int</span> sockfd = default_sockfd)<br>            : _sockfd(sockfd)<br>        &#123;<br>        &#125;<br>        ~TcpSocket() &#123;&#125;<br> <br>        <span class="hljs-type">void</span> <span class="hljs-title function_">CreateSocket</span><span class="hljs-params">()</span> override<br>        &#123;<br>            _sockfd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (_sockfd &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">exit</span>(SocketError);<br>        &#125;<br>        <span class="hljs-type">void</span> <span class="hljs-title function_">BindSocket</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> port)</span> override<br>        &#123;<br>            <span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>            setsockopt(_sockfd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br> <br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">local</span>;</span><br>            <span class="hljs-built_in">memset</span>(&amp;local, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(local));<br>            local.sin_family = AF_INET;<br>            local.sin_port = htons(port);<br>            local.sin_addr.s_addr = INADDR_ANY;<br> <br>            <span class="hljs-type">int</span> n = bind(_sockfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;local, <span class="hljs-keyword">sizeof</span>(local));<br>            <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">exit</span>(BindError);<br>        &#125;<br>        <span class="hljs-type">void</span> <span class="hljs-title function_">ListenSocket</span><span class="hljs-params">(<span class="hljs-type">int</span> backlog)</span> override<br>        &#123;<br>            <span class="hljs-type">int</span> n = listen(_sockfd, backlog);<br>            <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">exit</span>(ListenError);<br>        &#125;<br>        <span class="hljs-type">bool</span> <span class="hljs-title function_">ConnectSocket</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp;serverip, <span class="hljs-type">uint16_t</span> serverport)</span> override<br>        &#123;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>            <span class="hljs-built_in">memset</span>(&amp;addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(addr));<br>            addr.sin_family = AF_INET;<br>            addr.sin_port = htons(serverport);<br>            <span class="hljs-comment">// addr.sin_addr.s_addr = inet_addr(serverip.c_str());</span><br>            inet_pton(AF_INET, serverip.c_str(), &amp;addr.sin_addr);<br>            <span class="hljs-type">int</span> n = connect(_sockfd, (sockaddr *)&amp;addr, <span class="hljs-keyword">sizeof</span>(addr));<br> <br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-title function_">AcceptSocket</span><span class="hljs-params">(<span class="hljs-built_in">string</span> *peerip, <span class="hljs-type">uint16_t</span> *peerport)</span> override<br>        &#123;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>            <span class="hljs-type">socklen_t</span> len = <span class="hljs-keyword">sizeof</span>(addr);<br>            <span class="hljs-type">int</span> newsockfd = accept(_sockfd, (sockaddr *)&amp;addr, &amp;len);<br>            <span class="hljs-keyword">if</span> (newsockfd &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br> <br>            <span class="hljs-comment">// *peerip = inet_ntoa(addr.sin_addr);</span><br> <br>            <span class="hljs-comment">// INET_ADDRSTRLEN 是一个定义在头文件中的宏，表示 IPv4 地址的最大长度</span><br>            <span class="hljs-type">char</span> ip_str[INET_ADDRSTRLEN];<br>            inet_ntop(AF_INET, &amp;addr.sin_addr, ip_str, INET_ADDRSTRLEN);<br>            *peerip = ip_str;<br> <br>            *peerport = ntohs(addr.sin_port);<br>            <span class="hljs-keyword">return</span> newsockfd;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-title function_">GetSockFd</span><span class="hljs-params">()</span> override<br>        &#123;<br>            <span class="hljs-keyword">return</span> _sockfd;<br>        &#125;<br>        <span class="hljs-type">void</span> <span class="hljs-title function_">SetSockFd</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span> override<br>        &#123;<br>            _sockfd = sockfd;<br>        &#125;<br>        <span class="hljs-type">void</span> <span class="hljs-title function_">CloseSocket</span><span class="hljs-params">()</span> override<br>        &#123;<br>            <span class="hljs-keyword">if</span> (_sockfd &gt; default_sockfd)<br>                close(_sockfd);<br>        &#125;<br> <br>        <span class="hljs-type">bool</span> <span class="hljs-title function_">Recv</span><span class="hljs-params">(<span class="hljs-built_in">string</span> *buff, <span class="hljs-type">int</span> size)</span> override<br>        &#123;<br>            <span class="hljs-type">char</span> inbuffer[size];<br>            <span class="hljs-type">ssize_t</span> n = recv(_sockfd, inbuffer, size - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                inbuffer[n] = <span class="hljs-number">0</span>;<br>                *buff += inbuffer;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br> <br>        <span class="hljs-type">void</span> <span class="hljs-title function_">Send</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp;send_string)</span> override<br>        &#123;<br>            send(_sockfd, send_string.c_str(),send_string.size(),<span class="hljs-number">0</span>);<br>        &#125;<br> <br>    private:<br>        <span class="hljs-type">int</span> _sockfd;<br>        <span class="hljs-built_in">string</span> _ip;<br>        <span class="hljs-type">uint16_t</span> _port;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>PollServer.hpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Log.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Socket.hpp&quot;</span></span><br> <br>using namespace Net_Work;<br><span class="hljs-type">const</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> gdefaultport = <span class="hljs-number">8888</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> gbacklog = <span class="hljs-number">8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> gnum = <span class="hljs-number">1024</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PollServer</span></span><br><span class="hljs-class">&#123;</span><br>public:<br>    PollServer(<span class="hljs-type">int</span> port) : _port(port), _num(gnum), _listensock(new TcpSocket())<br>    &#123;<br>    &#125;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">HandlerEvent</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _num; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (_rfds[i].fd == <span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">continue</span>;<br> <br>            <span class="hljs-type">int</span> fd = _rfds[i].fd;<br>            <span class="hljs-type">short</span> revents = _rfds[i].revents;<br>            <span class="hljs-comment">// 判断事件是否就绪</span><br>            <span class="hljs-keyword">if</span> (revents &amp; POLLIN)<br>            &#123;<br>                <span class="hljs-comment">// 读事件分两类，一类是新链接到来，一类是新数据到来</span><br>                <span class="hljs-keyword">if</span> (fd == _listensock-&gt;GetSockFd())<br>                &#123;<br>                    <span class="hljs-comment">// 新链接到来</span><br>                    lg(Info, <span class="hljs-string">&quot;get a new link&quot;</span>);<br>                    <span class="hljs-comment">// 获取连接</span><br>                    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> clientip;<br>                    <span class="hljs-type">uint16_t</span> clientport;<br>                    <span class="hljs-type">int</span> sockfd = _listensock-&gt;AcceptSocket(&amp;clientip, &amp;clientport);<br>                    <span class="hljs-keyword">if</span> (sockfd == <span class="hljs-number">-1</span>)<br>                    &#123;<br>                        lg(Error, <span class="hljs-string">&quot;accept error&quot;</span>);<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    lg(Info, <span class="hljs-string">&quot;get a client,client info is# %s:%d,fd: %d&quot;</span>, clientip.c_str(), clientport, sockfd);<br>                    <span class="hljs-comment">// 此时获取连接成功了，但是不能直接read write,sockfd仍需要交给poll托管 -- 添加到数组_rfds中</span><br>                    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">for</span> (; pos &lt; _num; pos++)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (_rfds[pos].fd == <span class="hljs-number">-1</span>)<br>                        &#123;<br>                            _rfds[pos].fd = sockfd;<br>                            _rfds[pos].events = POLLIN;<br>                            lg(Info, <span class="hljs-string">&quot;get a new link, fd is : %d&quot;</span>, sockfd);<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (pos == _num)<br>                    &#123;<br>                        <span class="hljs-comment">// 1.扩容</span><br>                        <span class="hljs-comment">// 2.关闭</span><br>                        close(sockfd);<br>                        lg(Warning, <span class="hljs-string">&quot;server is full, be carefull...&quot;</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">// 普通的读事件就绪</span><br>                    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-type">ssize_t</span> n = recv(fd, buffer, <span class="hljs-keyword">sizeof</span>(buffer<span class="hljs-number">-1</span>), <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>                    &#123;<br>                        buffer[n] = <span class="hljs-number">0</span>;<br>                        lg(Info, <span class="hljs-string">&quot;client say# %s&quot;</span>, buffer);<br>                        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> message = <span class="hljs-string">&quot;你好,同志&quot;</span>;<br>                        message += buffer;<br>                        send(fd, message.c_str(), message.size(), <span class="hljs-number">0</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        lg(Warning, <span class="hljs-string">&quot;client quit ,maybe close or error,close fd: %d&quot;</span>, fd);<br>                        close(fd);<br>                        <span class="hljs-comment">// 还要取消poll的关心</span><br>                        _rfds[i].fd = <span class="hljs-number">-1</span>;<br>                        _rfds[i].events = <span class="hljs-number">0</span>;<br>                        _rfds[i].revents = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">InitServer</span><span class="hljs-params">()</span><br>    &#123;<br>        _listensock-&gt;BuildListenSocket(_port, gbacklog);<br>        _rfds = new <span class="hljs-keyword">struct</span> pollfd[_num];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _num; i++)<br>        &#123;<br>            _rfds[i].fd = <span class="hljs-number">-1</span>;<br>            _rfds[i].events = <span class="hljs-number">0</span>;<br>            _rfds[i].revents = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// 最开始的时候，只有一个文件描述符，Listensock</span><br>        _rfds[<span class="hljs-number">0</span>].fd = _listensock-&gt;GetSockFd();<br>        _rfds[<span class="hljs-number">0</span>].events |= POLLIN;<br>    &#125;<br> <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Loop</span><span class="hljs-params">()</span><br>    &#123;<br>        _isrunning = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 循环重置select需要的rfds</span><br>        <span class="hljs-keyword">while</span> (_isrunning)<br>        &#123;<br>            <span class="hljs-comment">// 定义时间</span><br>            <span class="hljs-type">int</span> timeout = <span class="hljs-number">1000</span>;<br> <br>            <span class="hljs-comment">//PrintDebug();</span><br> <br>            <span class="hljs-comment">// rfds是输入输出型参数，rfds是在select调用返回时，不断被修改，所以每次需要重置rfds</span><br>            <span class="hljs-type">int</span> n = poll(_rfds, _num, timeout);<br>            <span class="hljs-keyword">switch</span> (n)<br>            &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                lg(Info, <span class="hljs-string">&quot;select timeout...&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>                lg(Error, <span class="hljs-string">&quot;select error!!!&quot;</span>);<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-comment">// 正常就绪的fd</span><br>                lg(Info, <span class="hljs-string">&quot;select success,begin event handler&quot;</span>);<br>                HandlerEvent();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        _isrunning = <span class="hljs-literal">false</span>;<br>    &#125;<br> <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">Stop</span><span class="hljs-params">()</span><br>    &#123;<br>        _isrunning = <span class="hljs-literal">false</span>;<br>    &#125;<br> <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">PrintDebug</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// std::cout &lt;&lt; &quot;current select rfds list is :&quot;;</span><br>        <span class="hljs-comment">// for (int i = 0; i &lt; num; i++)</span><br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//     if (_rfds_array[i] == nullptr)</span><br>        <span class="hljs-comment">//         continue;</span><br>        <span class="hljs-comment">//     else</span><br>        <span class="hljs-comment">//         std::cout &lt;&lt; _rfds_array[i]-&gt;GetSockFd() &lt;&lt; &quot; &quot;;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// std::cout &lt;&lt; std::endl;</span><br>    &#125;<br> <br>private:<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;Socket&gt; _listensock;<br>    <span class="hljs-type">int</span> _port;<br>    <span class="hljs-type">bool</span> _isrunning;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> *_<span class="hljs-title">rfds</span>;</span><br>    <span class="hljs-type">int</span> _num;<br>&#125;;<br></code></pre></td></tr></table></figure><p> Main.cc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;PollServer.hpp&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Usage</span><span class="hljs-params">(<span class="hljs-type">char</span>* argv)</span></span><br><span class="hljs-function"></span>&#123;<br>  <br>    std::cout&lt;&lt;<span class="hljs-string">&quot;Usage: \n\t&quot;</span>&lt;&lt;argv&lt;&lt;<span class="hljs-string">&quot; port\n&quot;</span>&lt;&lt;std::endl;<br>&#125;<br><span class="hljs-comment">// ./select_server 8080</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// std::cout&lt;&lt;num&lt;&lt;std::endl;       1024</span><br>    <span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">Usage</span>(argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">uint16_t</span> localport = std::<span class="hljs-built_in">stoi</span>(argv[<span class="hljs-number">1</span>]);<br>    std::unique_ptr&lt;PollServer&gt; svr = std::<span class="hljs-built_in">make_unique</span>&lt;PollServer&gt;(localport);<br>    svr-&gt;<span class="hljs-built_in">InitServer</span>();<br>    svr-&gt;<span class="hljs-built_in">Loop</span>();<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下，由于我们poll第三个参数设置的是1000ms，因此每一秒poll都会返回，当发现有新链接的时候，就回去执行函数，在函数中调用write或者read变不会再阻塞了。 </p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog03c25829c18e4621add56de57fd2a1aa.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、poll介绍&quot;&gt;&lt;a href=&quot;#一、poll介绍&quot; class=&quot;headerlink&quot; title=&quot;一、poll介绍&quot;&gt;&lt;/a&gt;一、poll介绍&lt;/h3&gt;&lt;p&gt;poll与select一样，只负责IO的等的过程，只不过一次可以等待多个文件描述符，他的作用</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信</title>
    <link href="http://example.com/posts/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.html"/>
    <id>http://example.com/posts/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.html</id>
    <published>2024-11-25T14:46:19.000Z</published>
    <updated>2024-11-25T14:46:36.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是消息队列"><a href="#一、什么是消息队列" class="headerlink" title="一、什么是消息队列"></a>一、什么是消息队列</h2><p>消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。  每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。我们可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。</p><p>Linux用宏MSGMAX和MSGMNB来限制一条消息的最大长度和一个队列的最大长度。</p><h2 id="二、在Linux中使用消息队列"><a href="#二、在Linux中使用消息队列" class="headerlink" title="二、在Linux中使用消息队列"></a>二、在Linux中使用消息队列</h2><p>Linux提供了一系列消息队列的函数接口来让我们方便地使用它来实现进程间的通信。它的用法与其他两个System V PIC机制，即信号量和共享内存相似。</p><h3 id="1、msgget函数"><a href="#1、msgget函数" class="headerlink" title="1、msgget函数"></a>1、msgget函数</h3><p>该函数用来创建和访问一个消息队列。它的原型为：</p><p><code>int msgget(key_t, key, int msgflg);</code></p><p>与其他的IPC机制一样，程序必须提供一个键来命名某个特定的消息队列。msgflg是一个权限标志，表示消息队列的访问权限，它与文件的访问权限一样。msgflg可以与IPC_CREAT做或操作，表示当key所命名的消息队列不存在时创建一个消息队列，如果key所命名的消息队列存在时，IPC_CREAT标志会被忽略，而只返回一个标识符。</p><p>它返回一个以key命名的消息队列的标识符（非零整数），失败时返回-1.</p><h3 id="2、msgsnd函数"><a href="#2、msgsnd函数" class="headerlink" title="2、msgsnd函数"></a>2、msgsnd函数</h3><p>该函数用来把消息添加到消息队列中。它的原型为：</p><p><code>int msgsend(int msgid, const void *msg_ptr, size_t msg_sz, int msgflg);</code></p><p>msgid是由msgget函数返回的消息队列标识符。</p><p><strong>msg_ptr是一个指向准备发送消息的指针，但是消息的数据结构却有一定的要求，指针msg_ptr所指向的消息结构一定要是以一个长整型成员变量开始的结构体，接收函数将用这个成员来确定消息的类型。所以消息结构要定义成这样</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">my_message</span>&#123;</span>     <br>  <span class="hljs-type">long</span> <span class="hljs-type">int</span> message_type;     <br>  <span class="hljs-comment">/* The data you wish to transfer*/</span> <br>&#125;;<br></code></pre></td></tr></table></figure><p>msg_sz是msg_ptr指向的消息的长度，注意是消息的长度，而不是整个结构体的长度，也就是说msg_sz是不包括长整型消息类型成员变量的长度。</p><p>msgflg用于控制当前消息队列满或队列消息到达系统范围的限制时将要发生的事情。</p><p>如果调用成功，消息数据的一分副本将被放到消息队列中，并返回0，失败时返回-1.</p><h3 id="3、msgrcv函数"><a href="#3、msgrcv函数" class="headerlink" title="3、msgrcv函数"></a>3、msgrcv函数</h3><p>该函数用来从一个消息队列获取消息，它的原型为</p><p><code>int msgrcv(int msgid, void *msg_ptr, size_t msg_st, long int msgtype, int msgflg);</code></p><p>msgid, msg_ptr, msg_st的作用也函数msgsnd函数的一样。</p><p>msgtype可以实现一种简单的接收优先级。如果msgtype为0，就获取队列中的第一个消息。如果它的值大于零，将获取具有相同消息类型的第一个信息。如果它小于零，就获取类型等于或小于msgtype的绝对值的第一个消息。</p><p>msgflg用于控制当队列中没有相应类型的消息可以接收时将发生的事情。</p><p>调用成功时，该函数返回放到接收缓存区中的字节数，消息被复制到由msg_ptr指向的用户分配的缓存区中，然后删除消息队列中的对应消息。失败时返回-1.</p><h3 id="4、msgctl函数"><a href="#4、msgctl函数" class="headerlink" title="4、msgctl函数"></a>4、msgctl函数</h3><p>该函数用来控制消息队列，它与共享内存的shmctl函数相似，它的原型为：</p><p><code>int msgctl(int msgid, int command, struct msgid_ds *buf);</code></p><p>command是将要采取的动作，它可以取3个值，     IPC_STAT：把msgid_ds结构中的数据设置为消息队列的当前关联值，即用消息队列的当前关联值覆盖msgid_ds的值。     IPC_SET：如果进程有足够的权限，就把消息列队的当前关联值设置为msgid_ds结构中给出的值     IPC_RMID：删除消息队列</p><p>buf是指向msgid_ds结构的指针，它指向消息队列模式和访问权限的结构。msgid_ds结构至少包括以下成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msgid_ds</span> </span><br><span class="hljs-class">&#123;</span>     <br>  <span class="hljs-type">uid_t</span> shm_perm.uid;     <br>  <span class="hljs-type">uid_t</span> shm_perm.gid;     <br>  <span class="hljs-type">mode_t</span> shm_perm.mode; <br>&#125;;<br></code></pre></td></tr></table></figure><p>成功时返回0，失败时返回-1.</p><h2 id="三、使用消息队列进行进程间通信"><a href="#三、使用消息队列进行进程间通信" class="headerlink" title="三、使用消息队列进行进程间通信"></a>三、使用消息队列进行进程间通信</h2><p>马不停蹄，介绍完消息队列的定义和可使用的接口之后，我们来看看它是怎么让进程进行通信的。由于可以让不相关的进程进行行通信，所以我们在这里将会编写两个程序，msgreceive和msgsned来表示接收和发送信息。根据正常的情况，我们允许两个程序都可以创建消息，但只有接收者在接收完最后一个消息之后，它才把它删除。</p><p>接收信息的程序源文件为msgreceive.c的源代码为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span>   </span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_st</span> &#123;</span>  <br>  <span class="hljs-type">long</span> <span class="hljs-type">int</span> msg_type;  <br>  <span class="hljs-type">char</span> text[BUFSIZ]; <br>&#125;;   <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;  <br>  <span class="hljs-type">int</span> running = <span class="hljs-number">1</span>;  <br>  <span class="hljs-type">int</span> msgid = <span class="hljs-number">-1</span>;  <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_st</span> <span class="hljs-title">data</span>;</span>  <br>  <span class="hljs-type">long</span> <span class="hljs-type">int</span> msgtype = <span class="hljs-number">0</span>; <span class="hljs-comment">//注意1    </span><br><br>  <span class="hljs-comment">//建立消息队列  </span><br>  msgid = msgget((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>, <span class="hljs-number">0666</span> | IPC_CREAT);  <br>  <span class="hljs-keyword">if</span>(msgid == <span class="hljs-number">-1</span>)  &#123;   <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgget failed with error: %d\n&quot;</span>, errno);   <br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);  <br>  &#125;  <br><br>  <span class="hljs-comment">//从队列中获取消息，直到遇到end消息为止  </span><br>  <span class="hljs-keyword">while</span>(running)  &#123;   <br>    <span class="hljs-keyword">if</span>(msgrcv(msgid, (<span class="hljs-type">void</span>*)&amp;data, BUFSIZ, msgtype, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)   <br>    &#123;    <br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgrcv failed with errno: %d\n&quot;</span>, errno);    <br>      <span class="hljs-built_in">exit</span>(EXIT_FAILURE);   <br>    &#125;   <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You wrote: %s\n&quot;</span>,data.text);   <br>    <span class="hljs-comment">//遇到end结束</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(data.text, <span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>)    <br>      running = <span class="hljs-number">0</span>;  <br>  &#125;  <br>  <span class="hljs-comment">//删除消息队列  </span><br>  <span class="hljs-keyword">if</span>(msgctl(msgid, IPC_RMID, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)  &#123;   <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgctl(IPC_RMID) failed\n&quot;</span>);   <br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);  <br>  &#125;  <br>  <span class="hljs-built_in">exit</span>(EXIT_SUCCESS); <br>&#125;<br></code></pre></td></tr></table></figure><p>发送信息的程序的源文件msgsend.c的源代码为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TEXT 512 </span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_st</span> &#123;</span>  <br>  <span class="hljs-type">long</span> <span class="hljs-type">int</span> msg_type;  <br>  <span class="hljs-type">char</span> text[MAX_TEXT]; <br>&#125;;   <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;  <br>  <span class="hljs-type">int</span> running = <span class="hljs-number">1</span>;  <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_st</span> <span class="hljs-title">data</span>;</span>  <br>  <span class="hljs-type">char</span> buffer[BUFSIZ];  <br>  <span class="hljs-type">int</span> msgid = <span class="hljs-number">-1</span>;    <br><br>  <span class="hljs-comment">//建立消息队列  </span><br>  msgid = msgget((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>, <span class="hljs-number">0666</span> | IPC_CREAT);  <br>  <span class="hljs-keyword">if</span>(msgid == <span class="hljs-number">-1</span>)  &#123;   <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgget failed with error: %d\n&quot;</span>, errno);   <br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);  <br>  &#125;    <br><br>  <span class="hljs-comment">//向消息队列中写消息，直到写入end  </span><br>  <span class="hljs-keyword">while</span>(running)  &#123;   <br>  <span class="hljs-comment">//输入数据   </span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter some text: &quot;</span>);   <br>  fgets(buffer, BUFSIZ, <span class="hljs-built_in">stdin</span>);   <br>  data.msg_type = <span class="hljs-number">1</span>;    <span class="hljs-comment">//注意2   </span><br>  <span class="hljs-built_in">strcpy</span>(data.text, buffer);   <br>  <br>  <span class="hljs-comment">//向队列发送数据   </span><br>  <span class="hljs-keyword">if</span>(msgsnd(msgid, (<span class="hljs-type">void</span>*)&amp;data, MAX_TEXT, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)   <br>  &#123;    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;msgsnd failed\n&quot;</span>);    <br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);   <br>  &#125;  <br><br>  <span class="hljs-comment">//输入end结束输入   </span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(buffer, <span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>)    <br>    running = <span class="hljs-number">0</span>;   <br>  sleep(<span class="hljs-number">1</span>);  <br>  &#125;  <br>  <span class="hljs-built_in">exit</span>(EXIT_SUCCESS); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、例子分析——消息类型"><a href="#四、例子分析——消息类型" class="headerlink" title="四、例子分析——消息类型"></a>四、例子分析——消息类型</h2><p>这里主要说明一下消息类型是怎么一回事，注意msgreceive.c文件main函数中定义的变量msgtype（注释为注意1），它作为msgrcv函数的接收信息类型参数的值，其值为0，表示获取队列中第一个可用的消息。再来看看msgsend.c文件中while循环中的语句data.msg_type &#x3D; 1（注释为注意2），它用来设置发送的信息的信息类型，即其发送的信息的类型为1。所以程序msgreceive能够接收到程序msgsend发送的信息。</p><p>如果把注意1，即msgreceive.c文件main函数中的语句由 long int msgtype &#x3D; 0;改变为long int msgtype &#x3D; 2;会发生什么情况，msgreceive将不能接收到程序msgsend发送的信息。因为在调用msgrcv函数时，如果msgtype（第四个参数）大于零，则将只获取具有相同消息类型的第一个消息，修改后获取的消息类型为2，而msgsend发送的消息类型为1，所以不能被msgreceive程序接收。重新编译msgreceive.c文件并再次执行</p><p>我们可以看到，msgreceive并没有接收到信息和输出，而且当msgsend输入end结束后，msgreceive也没有结束，通过jobs命令我们可以看到它还在后台运行着。</p><h2 id="五、消息队列与命名管道的比较"><a href="#五、消息队列与命名管道的比较" class="headerlink" title="五、消息队列与命名管道的比较"></a>五、消息队列与命名管道的比较</h2><p>消息队列跟命名管道有不少的相同之处，通过与命名管道一样，消息队列进行通信的进程可以是不相关的进程，同时它们都是通过发送和接收的方式来传递数据的。在命名管道中，发送数据用write，接收数据用read，则在消息队列中，发送数据用msgsnd，接收数据用msgrcv。而且它们对每个数据都有一个最大长度的限制。</p><p>与命名管道相比，消息队列的优势在于， 1、消息队列也可以独立于发送和接收进程而存在，从而消除了在同步命名管道的打开和关闭时可能产生的困难。</p><p>2、同时通过发送消息还可以避免命名管道的同步和阻塞问题，不需要由进程自己来提供同步方法。</p><p>3、接收程序可以通过消息类型有选择地接收数据，而不是像命名管道中那样，只能默认地接收。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、什么是消息队列&quot;&gt;&lt;a href=&quot;#一、什么是消息队列&quot; class=&quot;headerlink&quot; title=&quot;一、什么是消息队列&quot;&gt;&lt;/a&gt;一、什么是消息队列&lt;/h2&gt;&lt;p&gt;消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。  每个数据块都被认为</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>锁、信号量</title>
    <link href="http://example.com/posts/%E9%94%81%E3%80%81%E4%BF%A1%E5%8F%B7%E9%87%8F.html"/>
    <id>http://example.com/posts/%E9%94%81%E3%80%81%E4%BF%A1%E5%8F%B7%E9%87%8F.html</id>
    <published>2024-11-25T14:45:35.000Z</published>
    <updated>2024-11-25T14:45:57.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、信号量"><a href="#一、信号量" class="headerlink" title="一、信号量"></a>一、信号量</h2><p>线程的信号量与进程间通信中使用的信号量的概念是一样，它是一种特殊的变量，它可以被增加或减少，但对其的关键访问被保证是原子操作。如果一个程序中有多个线程试图改变一个信号量的值，系统将保证所有的操作都将依次进行。</p><p>而只有0和1两种取值的信号量叫做二进制信号量，在这里将重点介绍。而信号量一般常用于保护一段代码，使其每次只被一个执行线程运行。我们可以使用二进制信号量来完成这个工作。</p><p>C语言中的信号量分为两种，POSIX信号量和Syetem -V信号量</p><h2 id="二、POSIX信号量"><a href="#二、POSIX信号量" class="headerlink" title="二、POSIX信号量"></a>二、POSIX信号量</h2><p>信号量的函数都以sem_开头，线程中使用的基本信号量函数有4个，它们都声明在头文件semaphore.h中。</p><h4 id="1、sem-init函数"><a href="#1、sem-init函数" class="headerlink" title="1、sem_init函数"></a>1、sem_init函数</h4><p>该函数用于创建信号量，其原型如下</p><p><code>int sem_init(sem_t *sem,int pshared,unsigned int value);</code></p><p>该函数初始化由sem指向的信号对象，设置它的共享选项，并给它一个初始的整数值。<br />pshared控制信号量的类型，如果其值为0，就表示这个信号量是当前进程的局部信号量，否则信号量就可以在多个进程之间共享，value为sem的初始值。调用成功时返回0，失败返回-1.</p><h4 id="2、sem-wait函数"><a href="#2、sem-wait函数" class="headerlink" title="2、sem_wait函数"></a>2、sem_wait函数</h4><p>该函数用于以原子操作的方式将信号量的值减1。原子操作就是，如果两个线程企图同时给一个信号量加1或减1，它们之间不会互相干扰。它的原型如下：</p><p><code>int sem_wait(sem_t *sem);</code></p><p>等待信号量，如果信号量的值大于0，将信号量的值减1，立即返回。如果信号量的值为0，则线程阻塞。相当于P操作。成功返回0，失败返回-1。sem指向的对象是由sem_init调用初始化的信号量。</p><h4 id="3、-sem-post函数"><a href="#3、-sem-post函数" class="headerlink" title="3、 sem_post函数"></a>3、 sem_post函数</h4><p>该函数用于以原子操作的方式将信号量的值加1。它的原型如下：</p><p><code>int sem_post(sem_t *sem);</code></p><p>释放信号量，让信号量的值加1。相当于V操作。与sem_wait一样，sem指向的对象是由sem_init调用初始化的信号量。调用成功时返回0，失败返回-1.</p><h4 id="4、sem-destroy函数"><a href="#4、sem-destroy函数" class="headerlink" title="4、sem_destroy函数"></a>4、sem_destroy函数</h4><p>该函数用于对用完的信号量的清理。它的原型如下：</p><p><code>int sem_destroy(sem_t *sem);</code></p><p>成功时返回0，失败时返回-1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br>  <span class="hljs-type">sem_t</span> sem;<br><br>  <span class="hljs-type">void</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>  &#123;<br>      sem_wait(&amp;sem);<br>      <span class="hljs-type">int</span> *running=arg;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread running1\n&quot;</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*running);<br>  &#125;<br><br>  <span class="hljs-type">void</span> <span class="hljs-title function_">func2</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>  &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pthread2 running\n&quot;</span>);<br>      sem_post(&amp;sem);<br>  &#125;<br><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>  &#123;<br>      sem_init(&amp;sem,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>      <span class="hljs-type">pthread_t</span> thread[<span class="hljs-number">2</span>];<br>      <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;<br>      pthread_create(&amp;(thread[<span class="hljs-number">0</span>]),<span class="hljs-literal">NULL</span>,(<span class="hljs-type">void</span>*)func1,(<span class="hljs-type">void</span>*)&amp;a);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main thread running\n&quot;</span>);<br>      sleep(<span class="hljs-number">10</span>);<br>      pthread_create(&amp;(thread[<span class="hljs-number">1</span>]),<span class="hljs-literal">NULL</span>,(<span class="hljs-type">void</span>*)func2,(<span class="hljs-type">void</span>*)&amp;a);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;main thread running2\n&quot;</span>);<br>      pthread_join(thread[<span class="hljs-number">0</span>],<span class="hljs-literal">NULL</span>);<br>      pthread_join(thread[<span class="hljs-number">1</span>],<span class="hljs-literal">NULL</span>);<br>      sem_destroy(&amp;sem);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>首先创建信号量，第二个参数为0，表示这个信号量是当前进程的局部信号量，初始值为0。</p><p>然后使用pthread_create()函数创建两个线程，传入参数a。</p><p>线程1创建完成后，由于信号量初始化value&#x3D;0，调用sem_wait会阻塞这个线程，信号量的值将减少1（此时&lt;0），这个线程函数就会等待。</p><p>主线程sleep(10)后，线程2创建并执行调用，sem_post用于使信号量的值增加1，此时线程1可以执行。</p><p>使用pthread_join等待所创建的两个线程的结束。</p><p>以上代码输出为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">main thread running<br>main thread running2<br>pthread2 running<br>thread running1<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>可以用来做线程同步使用，比如升级流程代码中，可以在升级的初始化代码中使用sem_wait，最终被阻塞在那里，而用户执行升级命令的流程中才会执行到sem_post函数，从而触发到sem_wait后面的流程继续执行。</p><h2 id="三、System-V信号量"><a href="#三、System-V信号量" class="headerlink" title="三、System -V信号量"></a>三、System -V信号量</h2><h4 id="1、创建SEM"><a href="#1、创建SEM" class="headerlink" title="1、创建SEM"></a>1、创建SEM</h4><p>功能：获取信号量ID</p><p><code>int semget(key_t key,int nsems,int semflg);</code></p><p>返回值：<br>成功：信号量ID<br>失败：-1<br>参数：<br>key：信号量的键值<br>nsems：信号量元素的个数<br>semflg：创建选项<br>IPC_CREAT：如果key对应的信号量不存在，则创建<br>IPC_EXCL：如果key对应的信号量存在，则报错<br>mode：信号量的访问权限<br>创建信号量时，还受到以下系统信息的影响</p><p>SEMMNI：系统中信号量的总数最大值<br>SEMMSL：每个信号量中信号量元素的个数最大值<br>SEMMNS：系统中素有信号量中的信号量元素的总数最大值<br>实例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>&#123; <br>    <span class="hljs-type">key_t</span> key = ftok(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-number">1</span>); <br>    <span class="hljs-type">int</span> semid = semget(key,<span class="hljs-number">2</span>,IPC_CREATE|<span class="hljs-number">0666</span>); <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、PV操作"><a href="#2、PV操作" class="headerlink" title="2、PV操作"></a>2、PV操作</h4><p>功能：对信号量进行PV操作，或者等零操作</p><p><code>int semop(int semid,struct sembuf sops[],unsigned nsops);</code></p><p>返回值：<br>成功：0<br>失败：-1</p><p>参数：<br>semid：信号量ID<br>sops：信号量操作结构体数组<br>nsops结果体数组元素个数<br>信号量操作结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> &#123;</span> <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> sem_num;<span class="hljs-comment">//信号量元素序号     </span><br>    <span class="hljs-type">short</span> sem_op;<span class="hljs-comment">//操作参数 </span><br>    <span class="hljs-type">short</span> sem_flg;<span class="hljs-comment">//操作选项 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>根据sem_op的值，信号量操作分为3中情况：<br>sem_op&gt;0：V操作<br>sem_op&#x3D;0：等零操作<br>sem_op<br>示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123; <br>    <span class="hljs-type">key_t</span> key = ftok(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 创建（若已有则打开）一个包含2个元素的信号量组 </span><br>    <span class="hljs-type">int</span> id = semget(key, <span class="hljs-number">2</span>, IPC_CREAT|<span class="hljs-number">0666</span>); <span class="hljs-comment">// 定义包含两个P/V操作的结构体数组 </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">op</span>[2];</span> <br>    op[<span class="hljs-number">0</span>].sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">// 信号量元素序号 </span><br>    op[<span class="hljs-number">0</span>].sem_op = <span class="hljs-number">-2</span>; <span class="hljs-comment">// P操作 </span><br>    op[<span class="hljs-number">0</span>].sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">// 选项默认0 </span><br>    op[<span class="hljs-number">1</span>].sem_num = <span class="hljs-number">1</span>; <span class="hljs-comment">// 信号量元素序号 </span><br>    op[<span class="hljs-number">1</span>].sem_op = +<span class="hljs-number">3</span>; <span class="hljs-comment">// V操作 </span><br>    op[<span class="hljs-number">1</span>].sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">// 选项默认0 </span><br>    <span class="hljs-comment">// 同时对第0、1号信号量元素分别进行P、V操作 </span><br>    semop(id, op, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、获取或设置信号量的相关属性"><a href="#3、获取或设置信号量的相关属性" class="headerlink" title="3、获取或设置信号量的相关属性"></a>3、获取或设置信号量的相关属性</h4><p><code>int semctl(int semid,int semnum,int cmd....)</code></p><p>参数：<br>semid：信号量ID<br>semnum：信号量元素序号<br>cmd<br>IPC_STAT：获取属性信息<br>IPC_SET：设置属性信息<br>IPC_RMID：立即删除该信号量，参数semnum将被忽略<br>IPC_INFO：获得关于信号量的系统限制信息<br>SEM_INFO：获得系统为共享内存消耗的资源信息<br>SEM_STAT：获得系统中所有SEM的相关信息<br>GETALL：返回所有信号量元素的值，参数semnum将被忽略<br>GETNCNT：返回正阻塞在对该吸纳后量元素P操作的进程总数<br>GETPID：返回最后一个队该信号量元素操作的进程PID<br>GETVAL：返回该信号量元素的值<br>GETZCNT：返回正阻塞对该信号量元素等零操作的进程总数<br>SETALL：返回所有信号量元素的值，参数semnum将被忽略<br>SETVAL：设置该信号量元素的值<br>返回值<br>GETNCNT：semncnt<br>GETPID：sempid<br>GETVAL：semval<br>GETZCNT：semzcnt<br>IPC_INFO：内核中记录所有SEM信息的数组的下标最大值<br>SEM_INFO：同IPC_INFO<br>SEM_STAT：内核中看i路所有SEM信息的数组<br>失败：-1<br>这是一个变参函数，根据cmd的不同，可能需要第四个参数，第四个参数是一个如下所示的联合体，用户需要自己定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span> &#123;</span> <br>    <span class="hljs-type">int</span> val;<span class="hljs-comment">//当cmd为SERVAL时使用 </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span><span class="hljs-comment">//当cmd为IPC_STAT或IPC_SET时使用 </span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> *<span class="hljs-built_in">array</span>;<span class="hljs-comment">//当cmd为GETALL或SETALL时使用 </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seminfo</span> *_<span class="hljs-title">buf</span>;</span><span class="hljs-comment">//当cmd为IPC_INFO时使用 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>当cmd为IPC_STAT或IPC_SET时,需要用到一下属性信息结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> &#123;</span> <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ipc_perm</span> <span class="hljs-title">sem_perm</span>;</span><span class="hljs-comment">//权限相关信息 </span><br>    <span class="hljs-type">time_t</span> sem_otime;<span class="hljs-comment">//最后一次semop()的信息 </span><br>    <span class="hljs-type">tien_t</span> sem_ctime;<span class="hljs-comment">//最后一次状态改变时间 </span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> sem_nsems;<span class="hljs-comment">//信号量元素个数 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mutex_p</span><span class="hljs-params">(<span class="hljs-type">key_t</span> sem_tag, <span class="hljs-type">int</span> *sem_id, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> timeout)</span><br>&#123;<br>  <span class="hljs-type">int</span> ret;<br>  <span class="hljs-type">int</span> semid =<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> semno = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> val;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">smbf</span>[2] =</span> &#123;&#123;<span class="hljs-number">0</span>&#125;&#125;;<br><br>  DRV_CHECK_RETV(sem_id != <span class="hljs-literal">NULL</span>, -EINVAL);<br>  ret = semget(sem_tag, <span class="hljs-number">1</span>, IPC_CREAT | IPC_EXCL | MSG_SEM_PERMISSION_RW_GROUP);<br>  <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (errno == EEXIST) &#123;<br>      semid = semget(sem_tag, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> (semid &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> -EINVAL;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> -EINVAL;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    semid = ret;<br>    val = <span class="hljs-number">1</span>;<br>    ret = semctl(semid, semno, SETVAL, val);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> -EINVAL;<br>    &#125;<br>  &#125;<br>  *sem_id = semid;<br>  smbf[<span class="hljs-number">0</span>].sem_num = <span class="hljs-number">0</span>;<br>  smbf[<span class="hljs-number">0</span>].sem_op = <span class="hljs-number">-1</span>;<br>  smbf[<span class="hljs-number">0</span>].sem_flg = (timeout == MUTEX_WAIT_FOR_EVER) ? SEM_UNDO : (SEM_UNDO | IPC_NOWAIT);<br><br>  ret = semop(semid, smbf, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EAGAIN) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;have another process use\n&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;semop fail\n&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">mutex_v</span><span class="hljs-params">(<span class="hljs-type">int</span> sem_id)</span><br>&#123;<br>  <span class="hljs-type">int</span> ret;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">smbf</span>;</span><br>  smbf[<span class="hljs-number">0</span>].sem_num = <span class="hljs-number">0</span>;<br>  smbf[<span class="hljs-number">0</span>].sem_op = <span class="hljs-number">1</span>;<br>  smbf[<span class="hljs-number">0</span>].sem_flg = SEM_UNDO | IPC_NOWAIT;<br><br>  ret = semop(semid, &amp;smbf, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> -EINVAL;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、锁"><a href="#四、锁" class="headerlink" title="四、锁"></a>四、锁</h2><p>互斥量从本质上说就是一把锁, 提供对共享资源的保护访问。</p><h4 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h4><p>在Linux下, 线程的互斥量数据类型是pthread_mutex_t. 在使用前, 要对它进行初始化:</p><p>对于静态分配的互斥量, 可以把它设置为<strong>PTHREAD_MUTEX_INITIALIZER</strong>, 或者调用pthread_mutex_init.<br>对于动态分配的互斥量, 在申请内存(malloc)之后, 通过pthread_mutex_init进行初始化, 并且在释放内存(free)前需要调用pthread_mutex_destroy.</p><p>原型:</p><p>&#96;int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restric attr);</p><p><code>int pthread_mutex_destroy(pthread_mutex_t *mutex);</code></p><p>头文件:#include&lt;pthread.h&gt;</p><p>返回值: 成功则返回0, 出错则返回错误编号.</p><p>说明: 如果使用默认的属性初始化互斥量, 只需把attr设为NULL. 其他值在以后讲解。</p><h4 id="2、互斥操作"><a href="#2、互斥操作" class="headerlink" title="2、互斥操作:"></a>2、互斥操作:</h4><p>对共享资源的访问, 要对互斥量进行加锁, 如果互斥量已经上了锁, 调用线程会阻塞, 直到互斥量被解锁. 在完成了对共享资源的访问后, 要对互斥量进行解锁。</p><p>首先说一下加锁函数:</p><p>头文件:#include&lt;pthread.h&gt;</p><p>原型:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_lock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_trylock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span> *mutex)</span>;<br></code></pre></td></tr></table></figure><p>返回值: 成功则返回0, 出错则返回错误编号.</p><p>说明: 具体说一下trylock函数, 这个函数是非阻塞调用模式, 也就是说, 如果互斥量没被锁住, trylock函数将把互斥量加锁, 并获得对共享资源的访问权限; 如果互斥量被锁住了, trylock函数将不会阻塞等待而直接返回EBUSY, 表示共享资源处于忙状态。</p><p>再说一下解锁函数:<br>原型: </p><p><code>int pthread_mutex_unlock(pthread_mutex_t *mutex);</code></p><p>返回值: 成功则返回0, 出错则返回错误编号.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、信号量&quot;&gt;&lt;a href=&quot;#一、信号量&quot; class=&quot;headerlink&quot; title=&quot;一、信号量&quot;&gt;&lt;/a&gt;一、信号量&lt;/h2&gt;&lt;p&gt;线程的信号量与进程间通信中使用的信号量的概念是一样，它是一种特殊的变量，它可以被增加或减少，但对其的关键访问被保证是</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>线程</title>
    <link href="http://example.com/posts/%E7%BA%BF%E7%A8%8B.html"/>
    <id>http://example.com/posts/%E7%BA%BF%E7%A8%8B.html</id>
    <published>2024-11-25T14:43:44.000Z</published>
    <updated>2024-11-25T14:44:07.572Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，在创建线程时，会用到pthread_create()函数 ，我们来简单介绍一下该函数：</p><p><code>pthread_create(线程的tid ， 线程属性 ， 工作函数名 ， 函数需要的参数);</code></p><p>这篇博客要讲的线程属性，便是用于进行线程的初始化的，我们可以通过对线程属性的修改来自定义线程</p><p>接下来我们来了解一下什么线程属性</p><h3 id="一、线程属性中的成员"><a href="#一、线程属性中的成员" class="headerlink" title="一、线程属性中的成员"></a>一、线程属性中的成员</h3><p>线程属性是一个结构体，用法为 pthread_attr_t 变量名（本篇博客里默认变量名为attr）</p><p>线程属性结构体中的成员分别有：线程的警戒缓冲区、线程的优先级指针、线程的退出状态、线程栈地址、线程栈大小</p><p>接下来，我们来介绍一下该结构体中的这几个成员</p><p>线程的警戒缓冲区<br>首先我们要知道，每当一个线程被创建出来的时候，都会有一个相应的线程栈出现，而栈存在溢出问题（栈的溢出都是上溢），线程栈是申请在堆空间的<br><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog7f0a34127f2230b970ea8c48ff144552.png"></p><p>一旦栈发生溢出，数据就会向上覆盖，影响甚至破坏到库、栈区等空间中的数据。但更可怕的是，由于用户对用户空间中的内容具有读写权限，线程栈上溢所导致的对这些内容的修改，系统是不会报错的，只有当数据溢出到内核层时，我们才能够发现问题，但此时已经晚了，数据已经全被破坏了，所以我们需要来给每个线程栈“加个盖子”，也就是所谓的“警戒缓冲区”。</p><p>警戒缓冲区的大小一般为4K，这块内存是不可读写的，所以当线程栈发生上溢，想要修改这块内存中的内容时，系统就会发现有线程非法操作内存，并杀死该线程，这样就可以保护其他内存中的数据</p><p>线程的优先级指针<br>表示线程的优先级，一般情况下不建议修改，因为会影响系统的稳定性，一般只有杀毒软件或系统的防御软件才会修改其优先级</p><h3 id="二、线程退出状态"><a href="#二、线程退出状态" class="headerlink" title="二、线程退出状态"></a>二、线程退出状态</h3><p>线程的退出状态有两种，分别是回收态(PTHREAD_JOINABLE)和分离态(PTHREAD_DETACH)<br><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blogd60237bec9fd90d5c7d6bb8cfc2d90f6.png"></p><p>线程栈地址<br>由于当修改线程属性时，线程还没有被创建，自然也就没有地址可存，所以默认情况下都是nil，表示空</p><p>线程栈大小<br>线程栈大小一般情况下都是8M，但是我们知道，8M如果用二进制表示时非常大的数，将这么大的数放进去仅仅表示线程栈的大小其实没什么意义，所以默认情况下，这里存放的数据就是0，表示8M，申请空间时也是申请8M大小的空间</p><h3 id="三、修改线程属性的相关函数"><a href="#三、修改线程属性的相关函数" class="headerlink" title="三、修改线程属性的相关函数"></a>三、修改线程属性的相关函数</h3><p>在了解了线程属性的组成之后，我们就要来了解一下修改线程属性的相关函数了</p><p>先介绍下一会会用到的几个变量：</p><ul><li>pthread_attr_t attr ; &#x2F;&#x2F;定义一个线程属性结构体</li><li>int exit_state ; &#x2F;&#x2F;线程属性中的退出状态</li><li>void* thread_stack_addr ; &#x2F;&#x2F;线程属性中的线程栈地址</li><li>size_t thread_stack_size ; &#x2F;&#x2F;线程属性中的线程栈大小</li></ul><table><thead><tr><th>函数</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>pthread_attr_getdetachstate(&amp;attr , &amp;exit_state);</td><td>exit_state作为传出参数，可以获取线程属性中的退出状态</td><td>回收态返回 PTHREAD_CREATE_JOINABLE<br /><br />分离态返回 PTHREAD_CREATE_DETACHED</td></tr><tr><td>pthread_attr_setdetachstate(&amp;attr , exit_state);</td><td>通过传入参数exit_state，设置线程属性中的退出状态</td><td>成功返回0，失败返回非0错误码</td></tr><tr><td>pthread_attr_getstack(&amp;attr , &amp;thread_stack_addr , &amp;thread_stack_size);</td><td>thread_stack_addr、thread_stack_size作为传出参数，可以获取线程属性中的栈地址与栈大小</td><td>返回两个参数——线程栈地址与线程栈大小</td></tr><tr><td>pthread_attr_setstack(&amp;attr , thread_stack_addr , thread_stack_size);</td><td>通过传入参数thread_stack_addr、thread_stack_size，可以设置线程属性中的栈地址与栈大小</td><td>成功返回0，失败返回非0错误码</td></tr><tr><td>pthread_attr_init(&amp;attr);</td><td>初始化线程属性结构体</td><td>成功返回0，失败返回-1</td></tr><tr><td>pthread_attr_destroy(&amp;attr);</td><td>释放线程属性结构体内存</td><td>成功返回0，失败返回-1</td></tr></tbody></table><h3 id="四、修改线程属性的具体实现"><a href="#四、修改线程属性的具体实现" class="headerlink" title="四、修改线程属性的具体实现"></a>四、修改线程属性的具体实现</h3><p>接下来，我们可以根据这些函数来实际操作一下，完成以下两个小任务</p><p>获取线程属性中默认的退出状态（难度：⭐）<br>获取默认状态下线程属性中的线程栈地址与大小。将线程属性中的退出状态设置为分离态，修改线程栈地址，修改线程栈大小为1M，并测试使用这种线程属性的线程，系统一共能够创建多少个？（难度：⭐⭐⭐⭐）<br>PS：64位机下，即使你修改了线程栈大小，创建的数目和原来还是一样的，因为你的修改是无效的，系统创建的线程栈大小还是8M，修改线程栈大小只有32位机有效</p><p>1、获取线程属性中默认的退出状态，以下是代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br>    <span class="hljs-comment">//1.初始化线程属性</span><br>    pthread_attr_init(&amp;attr);<br>    <span class="hljs-comment">//2.检测线程属性中的线程退出状态</span><br>    <span class="hljs-type">int</span> detach_status;<br>    pthread_attr_getdetachstate(&amp;attr , &amp;detach_status);<br>    <span class="hljs-comment">//3.判断是回收态还是分离态</span><br>    <span class="hljs-keyword">if</span>(detach_status == PTHREAD_CREATE_JOINABLE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;线程属性默认为回收态\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;线程属性默认为分离态\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.释放线程属性结构体内存</span><br>    pthread_attr_destroy(&amp;attr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;进程退出！\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么样，是不是很简单呢？  接下来，我们来完成第二个小任务</p><p>2、获取默认状态下线程属性中的线程栈地址与大小。将线程属性中的退出状态设置为分离态，修改线程栈地址，修改线程栈大小为1M，并测试使用这种线程属性的线程，系统一共能够创建多少个，以下是代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//pthread_addr_change.c</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">thread_jobs</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-literal">NULL</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br>    <span class="hljs-comment">//1.初始化线程属性</span><br>    <span class="hljs-built_in">pthread_attr_init</span>(&amp;attr);<br>    <span class="hljs-comment">//2.检测线程属性中的线程退出状态</span><br>    <span class="hljs-type">int</span> detach_status;<br>    <span class="hljs-built_in">pthread_attr_getdetachstate</span>(&amp;attr , &amp;detach_status);<br>    <span class="hljs-comment">//3.判断是回收态还是分离态并打印</span><br>    <span class="hljs-keyword">if</span>(detach_status == PTHREAD_CREATE_JOINABLE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;线程属性默认为回收态\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;线程属性默认为分离态\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.将线程属性中的退出态修改为分离态</span><br>    <span class="hljs-built_in">pthread_attr_setdetachstate</span>(&amp;attr , PTHREAD_CREATE_DETACHED);<br>    <span class="hljs-comment">//5.获取线程属性中线程栈的初始地址与大小并打印</span><br>    <span class="hljs-type">void</span>* thread_stack_addr;<br>    <span class="hljs-type">size_t</span> thread_stack_size;<br>    <span class="hljs-built_in">pthread_attr_getstack</span>(&amp;attr , &amp;thread_stack_addr , &amp;thread_stack_size);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;线程栈地址为 %p , 线程栈大小为 %d \n&quot;</span> , thread_stack_addr , (<span class="hljs-type">int</span>)thread_stack_size);<br>    <span class="hljs-comment">//6.通过malloc函数修改线程栈的初始地址，并将线程栈大小改为1M</span><br>    <span class="hljs-type">pthread_t</span> tid;<br>    thread_stack_size = <span class="hljs-number">0x100000</span>;<span class="hljs-comment">//0x100000代表1M</span><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> errno;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">//如果malloc函数的返回值为NULL，就说明分配失败，内存已经用完</span><br>        <span class="hljs-keyword">if</span>((thread_stack_addr = (<span class="hljs-type">void</span>*)<span class="hljs-built_in">malloc</span>(thread_stack_size)) == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;thread_addr malloc failed!\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//进程退出</span><br>        &#125;<br>        <span class="hljs-comment">//修改栈初始地址和大小</span><br>        <span class="hljs-built_in">pthread_attr_setstack</span>(&amp;attr , thread_stack_addr , thread_stack_size);<br>        <span class="hljs-comment">//创建线程，并判断是否创建失败</span><br>        <span class="hljs-keyword">if</span>((errno = <span class="hljs-built_in">pthread_create</span>(&amp;tid , &amp;attr , thread_jobs , <span class="hljs-literal">NULL</span>)) &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;thread create failed!\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//进程直接退出</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            flag++;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag = %d\n&quot;</span>,flag);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">pthread_attr_destroy</span>(&amp;attr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog341e2ea87aae2a77aa1cb50c3e74ccfd.png"></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/bloge74729526522782afec4fce8a96076cf.png"></p><h3 id="五、pthread-亲和性设置"><a href="#五、pthread-亲和性设置" class="headerlink" title="五、pthread 亲和性设置"></a>五、pthread 亲和性设置</h3><h4 id="1、pthread-attr-setaffinity-np"><a href="#1、pthread-attr-setaffinity-np" class="headerlink" title="1、pthread_attr_setaffinity_np"></a>1、pthread_attr_setaffinity_np</h4><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_attr_setaffinity_np</span><span class="hljs-params">(<span class="hljs-type">pthread_attr_t</span> *attr, <span class="hljs-type">size_t</span> cpusetsize,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">cpu_set_t</span> *cpuset)</span>;<br></code></pre></td></tr></table></figure><ul><li>attr：指向线程属性对象的指针。</li><li>cpusetsize：CPU 亲和性集合的大小（以字节为单位）。</li><li>cpuset：指向 CPU 亲和性集合的指针，其中包含要绑定线程的 CPU。</li><li>返回值：成功返回 0，失败返回错误代码。</li><li>用于设置线程的 CPU 亲和性（CPU Affinity）。</li></ul><p>它允许将线程绑定到特定的 CPU 核心或 CPU 集合上，以控制线程在哪些 CPU 上运行。</p><h4 id="2、pthread-setaffinity-np"><a href="#2、pthread-setaffinity-np" class="headerlink" title="2、pthread_setaffinity_np"></a>2、pthread_setaffinity_np</h4><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_setaffinity_np</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span> thread, <span class="hljs-type">size_t</span> cpusetsize,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">cpu_set_t</span> *cpuset)</span>;<br></code></pre></td></tr></table></figure><ul><li>thread：要设置 CPU 亲和性的线程标识符。</li><li>cpusetsize：CPU 亲和性集合的大小（以字节为单位）。</li><li>cpuset：指向 CPU 亲和性集合的指针，其中包含要绑定线程的 CPU。</li><li>返回值：成功返回 0，失败返回错误代码。</li><li>用于设置线程的 CPU 亲和性（CPU Affinity）。</li></ul><p>它允许将线程绑定到特定的 CPU 核心或 CPU 集合上，以控制线程在哪些 CPU 上运行。</p><p>示例1（推荐）<br>本示例演示了如何在创建线程时限制其只能在 cpu1 上运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    usleep(<span class="hljs-number">10000</span>);<br><br>    <span class="hljs-comment">// 获取当前线程的 CPU 亲和性</span><br>    <span class="hljs-type">cpu_set_t</span> cpuset;<br>    CPU_ZERO(&amp;cpuset);<br>    pthread_getaffinity_np(pthread_self(), <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">cpu_set_t</span>), &amp;cpuset);<br>    <span class="hljs-comment">// 打印当前线程绑定的 CPU</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; CPU_SETSIZE; i++) &#123;<br>        <span class="hljs-keyword">if</span> (CPU_ISSET(i, &amp;cpuset)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread is running on cpu %d\n&quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-type">pthread_attr_t</span> attr;<br>    pthread_attr_init(&amp;attr);<br><br>    <span class="hljs-comment">// 创建线程并设置其只能在 cpu1 上运行</span><br>    <span class="hljs-type">cpu_set_t</span> mask;<br>    CPU_ZERO(&amp;mask);<br>    CPU_SET(<span class="hljs-number">1</span>, &amp;mask);<br>    pthread_attr_setaffinity_np(&amp;attr, <span class="hljs-keyword">sizeof</span>(mask), &amp;mask);<br>    pthread_create(&amp;tid, &amp;attr, thread_func, <span class="hljs-literal">NULL</span>);<br><br>    pthread_attr_destroy(&amp;attr);<br>    pthread_join(tid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2：本示例演示了如何在创建线程后限制其只能在 cpu0 1 2 上运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    usleep(<span class="hljs-number">10000</span>);<br><br>    <span class="hljs-comment">// 获取当前线程的 CPU 亲和性</span><br>    <span class="hljs-type">cpu_set_t</span> cpuset;<br>    CPU_ZERO(&amp;cpuset);<br>    pthread_getaffinity_np(pthread_self(), <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">cpu_set_t</span>), &amp;cpuset);<br>    <span class="hljs-comment">// 打印当前线程绑定的 CPU</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; CPU_SETSIZE; i++) &#123;<br>        <span class="hljs-keyword">if</span> (CPU_ISSET(i, &amp;cpuset)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread is running on cpu %d\n&quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建线程并设置其只能在 cpu0 1 2 上运行</span><br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-type">cpu_set_t</span> mask;<br>    CPU_ZERO(&amp;mask);<br>    CPU_SET(<span class="hljs-number">0</span>, &amp;mask);<br>    CPU_SET(<span class="hljs-number">1</span>, &amp;mask);<br>    CPU_SET(<span class="hljs-number">2</span>, &amp;mask);<br>    pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread_func, <span class="hljs-literal">NULL</span>);<br>    pthread_setaffinity_np(tid, <span class="hljs-keyword">sizeof</span>(mask), &amp;mask);<br><br>    pthread_join(tid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们知道，在创建线程时，会用到pthread_create()函数 ，我们来简单介绍一下该函数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pthread_create(线程的tid ， 线程属性 ， 工作函数名 ， 函数需要的参数);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这篇博客要讲的线程属性，</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>动态链接库、静态链接库</title>
    <link href="http://example.com/posts/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E3%80%81%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93.html"/>
    <id>http://example.com/posts/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E3%80%81%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93.html</id>
    <published>2024-11-24T16:03:41.000Z</published>
    <updated>2024-11-24T16:03:59.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是链接库"><a href="#一、什么是链接库" class="headerlink" title="一、什么是链接库"></a>一、什么是链接库</h1><p>有时候我们对外提供功能的时候，可能不希望对方看到源码，我们就可以制作成库文件，把库文件和头文件给到对方就可以达到提供功能又不暴露源码的目的。链接库就是指将库文件编译后打包为一个二进制文件，这些二进制文件会在程序调用的时候加载到内存中。实际上，一个或多个源文件编译为目标文件后，这个文件中所引用的外部的符号需要通过链接来找到这部分缺失的地址。而链接的方式又分为两种，如果是在生成可执行文件之前就已经把所有的链接操作完成了，这种链接称为静态链接，这种库文件称为静态链接库；如果是在程序执行的时候才进行链接，这种称为动态链接，对应的库文件称为动态链接库。也正因为如此，使用静态库时生成的可执行文件是可以独立运行的，因为他不再需要外部的内容，而动态库编译生成的可执行文件就无法单独运行，因为他在运行时，才会去链接所引用的外部地址。</p><h2 id="1-静态链接库"><a href="#1-静态链接库" class="headerlink" title="1. 静态链接库"></a>1. 静态链接库</h2><p>静态库会直接加载到代码段，他和所有的目标文件一起链接成可执行文件，生成可执行文件后可以独立运行。但是，正因为静态库会直接加载到内存的代码段，可执行文件的内部都拷贝了所有目标文件和静态库的指令和数据，编译生成的可执行文件会比较大。并且，如果整个系统中有多个链接统一静态库的可执行文件时，每个可执行文件都要拷贝一份静态库的指令和数据，这就造成了空间浪费，因为他们拷贝的数据都是同样的内容。最后，如果一旦静态库文件有代码更新，就需要重新编译链接重新生成整个可执行文件，更新升级麻烦。在 Linux 系统中，静态链接库文件的名称通常为 libxxx .a，在 Windows 系统中，静态链接库文件的后缀名为 .lib。</p><h2 id="2-动态链接库"><a href="#2-动态链接库" class="headerlink" title="2. 动态链接库"></a>2. 动态链接库</h2><p>其实，动态库这个称呼本身是对 Windows 平台上动态链接所用的库文件的一种称呼，在 Linux 下，一般称为共享库。动态库是在运行时加载到内存的共享库段，这样，如果很多程序都要用到静态库的时候，就会节省大量内存，因为它不像静态库那样加载到代码段，而是是在运行时载入内存的共享库段，当多个程序要用到同一个动态库时，所有程序可以共享这个共享库段的指令和数据。动态链接的实现是这样的，在编译时首先由静态链接器将所有的目标文件链接为一个可执行文件，等到程序运行时会将要用到的动态库加载到内存的共享库段，由动态链接器完成可执行文件和动态库文件的链接工作，可以理解为按需载入内存（在需要用到的时候，才会载入内存）。动态库大大方便了程序的升级和更改，只要用新的动态库文件替换旧的动态库文件即可，在运行时，会自动连接新的库文件。但是正因为动态库运行时载入的这个特点，使用动态库的可执行文件在运行时，会略慢一些，但整体来说，运行速度的性能损失，远远小于内存节省带来的收益。在Linux系统中，动态链接库的名称通常为 libxxx.so，在 Windows 系统中，动态链接库的后缀名为 .dll。GCC 编译器在生成可执行文件时，默认会优先使用动态链接库完成链接，如果当前系统环境中没有程序文件所需要的动态链接库，GCC 便会选择静态链接库进行静态链接。如果两种库文件都没有找到，则链接失败。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100407187-924921633.png"></p><h2 id="3-库文件与头文件"><a href="#3-库文件与头文件" class="headerlink" title="3. 库文件与头文件"></a>3. 库文件与头文件</h2><p>我们在发布库文件的同时，要将库文件和头文件一起发布，头文件中存储了变量、函数或者类等这些功能模块的声明部分，库文件中存储了各模块具体的实现部分。也就是说，头文件中定义了调用库文件中功能模块的接口。头文件的存在也实现了这样一种功能，当我们对外提供功能时，可以通过库文件来隐藏源码实现，功能的使用方只需要根据头文件所提供的接口来调用功能模块即可。</p><h2 id="4-库文件的引用"><a href="#4-库文件的引用" class="headerlink" title="4. 库文件的引用"></a>4. 库文件的引用</h2><p>当我们使用 GCC 编译和链接程序时，GCC 默认会链接 libc.a 或者 libc.so这两个标准库，但是对于其他的库（非标准库、第三方库等），就需要手动去添加链接库。通过 GCC -l 选项来指定库名，直接在 -l 后面加库名即可。（ -l 是小写的 L ）<br />正常情况下，我们指定了要使用的库名时，GCC 会自动在标准库目录中搜索文件，例如在CentOS中是 &#x2F;usr&#x2F;lib 目录。但是，如果想链接位于其它目录中的库，比如说我们自己建的库，或者我们要引用别人提供的库，就需要在编译时显示指定库的路径。指定方法有三种：<br />① 像指定普通头文件的路径一样，为 GCC 显示指定该库文件的完整路径与文件名 -I &#x2F;目录名 。<br />② 通过 GCC 的 -L 选项，为GCC增加搜索目录，可以使用多个 -L 选项，或者在一个选项内使用冒号 : 分割来指定多个搜索路径。<br />③ 把库文件所在的目录加到环境变量 LIBRARYPATH 中。</p><h1 id="二、自己动手制作静态链接库"><a href="#二、自己动手制作静态链接库" class="headerlink" title="二、自己动手制作静态链接库"></a>二、自己动手制作静态链接库</h1><p>准备工作，共准备4个文件，目录结构如下</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100406820-895205743.png"></p><p>my_print.h 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _TEST_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _TEST_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_int</span><span class="hljs-params">(<span class="hljs-type">int</span>* array, <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_char</span><span class="hljs-params">(<span class="hljs-type">char</span>* array, <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_string</span><span class="hljs-params">(<span class="hljs-type">char</span>* array[], <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_hello</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>my_print.c 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_print.h&quot;</span></span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_int</span><span class="hljs-params">(<span class="hljs-type">int</span>* array, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;   <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, array[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_char</span><span class="hljs-params">(<span class="hljs-type">char</span>* array, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>  i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, array[i]);<br>    &#125;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_string</span><span class="hljs-params">(<span class="hljs-type">char</span>* array[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, array[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>main.c 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_print.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a1[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>       a1[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">print_array_int</span>(a1, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">print_hello</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>print_hello.c 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_print.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_hello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello Linux ...\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-静态库的制作"><a href="#1-静态库的制作" class="headerlink" title="1. 静态库的制作"></a>1. 静态库的制作</h2><p>① 首先把所有 .c 文件编译为 .o 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -c *<span class="hljs-selector-class">.c</span> -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100406469-1794039349.png"></p><p>一定要从 .o 文件去生成 .a 文件，否则即使你生成了库，在使用时也可能出现未知的错误。<br />② 将 .o 文件打包为 .a 文件<br />这一步需要使用 ar 工具来完成。ar 工具是用来创建, 修改和提取档案的工具，ar 是 archive 的缩写。归档是指将多个文件（或一个文件）放到单个文件中，不进行其他额外的操作。也就是说，归档并不等同于压缩，压缩会使文件的大小减小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ar rcs libmprint.a *.o<br></code></pre></td></tr></table></figure><ul><li>参数 r ：在库中插入模块（替换）。当插入的模块名已经在库中存在，则替换同名的模块。如果若干模块中有一个模块在库中不存在，ar 显示一个错误消息，并不替换其他同名模块。默认的情况下，新的成员增加在库的结尾处，可以使用其他任选项来改变增加的位置。</li><li>参数 c ：创建一个库。不管库是否存在，都将创建。</li><li>参数 s ：创建目标文件索引，这在创建较大的库时能加快时间。如果不需要创建索引，可改成大写 S 参数。如果 .a 文件缺少索引，可以使用 ranlib 命令添加）。</li></ul><p>一般我们命令静态库的时候是这样的，前面是 lib 中间加上我们自己给静态库文件的名称，后面加后缀 .a ，也就是 libxxx.a ，实际上， xxx 才是静态库文件的名称。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100406102-983046895.png"></p><p>可以查看一下生成的 libmprint.a 的内容，一堆乱码</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100400726-123184020.png"></p><p>我们可以用 nm 命令查看库文件的信息，可以看到它是由 my_print.o 和 print_hello.o 生成的。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100400331-1423504129.png"></p><h2 id="2-静态库的使用"><a href="#2-静态库的使用" class="headerlink" title="2. 静态库的使用"></a>2. 静态库的使用</h2><p>静态库的使用方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -o exe -lmyprint -L ../lib/ -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p>首先对上面的命令进行分解一下，-lmyprint 用于指定链接库的名字，我们上面生成了一个名为 libmprint.a 的静态库，把前缀后缀去掉留下中间的名字即可；-L …&#x2F;lib&#x2F; 指定静态库的搜索目录，不指定的会，编译器只会去默认的链接库搜索路径寻找；-I …&#x2F;header&#x2F; 这个就比较熟悉了，指定头文件的路径。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog20241125000251.png"></p><p>我们再发布的时候，只需要把 header 和 lib 发布给别人即可</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100359610-349123771.png"></p><h1 id="三、自己动手制作动态链接库"><a href="#三、自己动手制作动态链接库" class="headerlink" title="三、自己动手制作动态链接库"></a>三、自己动手制作动态链接库</h1><h2 id="1-动态库的制作"><a href="#1-动态库的制作" class="headerlink" title="1. 动态库的制作"></a>1. 动态库的制作</h2><p>① 编译生成与位置无关的 .o 文件<br />动态共享库是在运行的时候才加载的，它加载到内存的共享库段，用完后就释放，所以要编译为与位置无关的。这里要用到GCC 的 -fPIC 选项参数，该选项表示编译为位置独立的代码，如果不用这个选项的话编译后的代码是位置相关的，所以动态载入的时候会通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。在静态链接库中，可执行文件在链接时就知道每一行代码、每一个变量会被放到线性地址空间的什么位置，因此这些地址可以都作为常数写到代码里面。对于动态库，只有加载的时候才知道。也就是说，动态链接库要编译为与位置无关的代码，这样只有在运行时才直到代码的位置。而静态库是在生成可执行文件之前，就直接把代码加载到内存的代码段了，代码的位置等信息也就已经知道了，所以不需要生成与位置无关的代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -fPIC -c *<span class="hljs-selector-class">.c</span> -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100359252-1811276820.png"></p><p>② 将 .o 文件打包<br />这里要用到 GCC 的 -shared 选项，该选项指定生成动态连接库（让连接器生成T类型的导出符号表，有时候也生成弱连接W类型的导出符号），如果不用该标志的话外部程序将无法连接。<br />可以在动态库文件名后面加版本号 libxxx.so.主版本号.副版本号 ，比如 libmdprint.so.1.1 表示我这是 1.1 版本的动态库，文件后缀后面的数字就是版本号的意思。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">gcc -<span class="hljs-keyword">shared</span> *.o -o libmdrint.so<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100358934-453919108.png"></p><h2 id="2-动态库的使用"><a href="#2-动态库的使用" class="headerlink" title="2. 动态库的使用"></a>2. 动态库的使用</h2><h3 id="（1）加载动态库"><a href="#（1）加载动态库" class="headerlink" title="（1）加载动态库"></a>（1）加载动态库</h3><p>使用动态库的命令和使用静态库的命令一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -o exe -lmdrint -L ../lib/ -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100358477-960135349.png"></p><h3 id="（2）“加载共享库出错”的解决方法"><a href="#（2）“加载共享库出错”的解决方法" class="headerlink" title="（2）“加载共享库出错”的解决方法"></a>（2）“加载共享库出错”的解决方法</h3><p>这个是时候，虽然我们已经生成了可执行文件，但是当我们运行可执行文件的时候，可能会出现这样的错误</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100358144-366040362.png"></p><p>我们可以通过命令 ldd 来查看一下可执行文件的链接情况</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100357744-493835779.png"></p><p>在我们自己引入的库 libmdrint.so 一栏显示 “not found” ，在默认情况下，我们自己引入的动态库是无法使用的，需要进行一些配置。这里提供以下几种解决方法。</p><h4 id="①-在系统库路径下建立软链接"><a href="#①-在系统库路径下建立软链接" class="headerlink" title="① 在系统库路径下建立软链接"></a>① 在系统库路径下建立软链接</h4><p>前面我们已经介绍了，GCC 会默认去系统库路径下搜索库文件，所以只要我们把自己的库文件放到这个目录下就可以了，系统库的路径是 &#x2F;usr&#x2F;lib 或 &#x2F;lib 。但是我们实际操作的时候，可能无法把文件拷贝到这两个路径下，我们可以在系统库路径下建立一个软链接来指向我们的库文件（软链接相关知识请参考本人 Linux 专栏文章《【Linux王者之路基础篇：基本命令与基础知识】Linux常用shell命令（及相关知识）详解与用法演示》）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /home/qq/dm/dm_lib/lib/libmdrint.so /usr/lib/libmdrint.so<br></code></pre></td></tr></table></figure><p>这里第一个路径也就是我们自己的动态库文件所在目录，一定要用绝对路径（如果使用相对路径，会找不到该路径），第二个路径是系统库的路径。</p><h4 id="②-配置环境变量"><a href="#②-配置环境变量" class="headerlink" title="② 配置环境变量"></a>② 配置环境变量</h4><p>实际上， ld 链接器在寻找库路径的时候，都是通过一个环境变量 LD_LIBRARY_PATH 来寻找的，我们可以打印看一下这个环境变量</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100357370-1446409994.png"></p><p>我们可以通过 export 命令来给环境变量增加一个路径，只需要把自己的路径加进去即可，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/home/qq/dm/dm_lib/lib/:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br></code></pre></td></tr></table></figure><p>我们知道在 shell 下直接把绝对路径加到环境变量中，只是一种临时的环境变量，当关机再次开机的时候，就会失效，如果想要永久有效，可以修改配置文件。我们可以把上面这条命令放到 .bashrc 文件中。<br />在我的 Linux 专栏文章中，已经不只一次提到 .bashrc 这个配置文件了，其实 Linux 每次开机都会执行这个配置文件，我们实现环境变量永久有效的原理就是，Linux 每次开机都会执行 .bashrc 配置文件，而配置文件中包含设置环境变量的命令，所以每次开机都会配一下环境变量，这样就达到了环境变量永久有效的目的。.bashrc 配置文件在家目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100351951-1293865682.png"></p><h4 id="③-修改-ld-so-加载器的配置文件-ld-so-conf"><a href="#③-修改-ld-so-加载器的配置文件-ld-so-conf" class="headerlink" title="③ 修改 ld.so 加载器的配置文件 ld.so.conf"></a>③ 修改 ld.so 加载器的配置文件 ld.so.conf</h4><p>这里先介绍几个概念：</p><ul><li>ld链接器 ：gcc 可以在编译周期传递参数，指定需要链接的库文件，生命周期是在 compile-time。</li><li>ld.so动态链接器&#x2F;加载器，程序运行的时候会根据指定的路径去加载指定的库，生命周期是在 run-time。</li><li>ld.so加载器及配置文件ld.so.conf：指定动态链接库的搜索路径（也可以通过配置环境变量$LD_LIBRARY_PATH 来指定程序运行时的动态库.so文件的搜索路径）。使用 ldconfig 就可以将 ld.so.conf 中的指定目录的库文件加载到内存中，并记录在&#x2F;etc&#x2F;ld.so.cache文件中。配置文件 &#x2F;etc&#x2F;ld.so.conf 记录了编译时使用的动态链接库的路径，在默认情况下，编译器只会使用 &#x2F;lib 和 &#x2F;usr&#x2F;lib 这两个目录下的库文件，通过这个配置文件可以增加我们自己的动态库文件搜索路径。</li></ul><p>使用 vim 编辑器打开配置文件，把路径放进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/ld.so.conf<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100351591-1560610303.png"></p><p>放入路径之后，还要在 shell 下执行一条命令，使刚才的配置生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo ldconfig -v<br></code></pre></td></tr></table></figure><p>不管使用上面三种方法的哪种，都可以使动态库正常加载到可执行文件中，我们再次使用 ldd 命令查看 exe 文件，可以看到，我们的动态库 libmdrint.so 后面由原来的 “not found” 变成了一个路径，这说明加载器现在可以找到动态库的路径了，可执行文件 exe 也就可以运行了。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100351053-1224186757.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、什么是链接库&quot;&gt;&lt;a href=&quot;#一、什么是链接库&quot; class=&quot;headerlink&quot; title=&quot;一、什么是链接库&quot;&gt;&lt;/a&gt;一、什么是链接库&lt;/h1&gt;&lt;p&gt;有时候我们对外提供功能的时候，可能不希望对方看到源码，我们就可以制作成库文件，把库文件和头文</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>预处理、编译、汇编、链接</title>
    <link href="http://example.com/posts/%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E3%80%81%E9%93%BE%E6%8E%A5.html"/>
    <id>http://example.com/posts/%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E3%80%81%E9%93%BE%E6%8E%A5.html</id>
    <published>2024-11-24T15:56:01.000Z</published>
    <updated>2024-11-24T15:56:19.559Z</updated>
    
    <content type="html"><![CDATA[<p>C语言经典的 “hello world ” 程序，伴随着每个程序员一起步入编程世界的大门。从编写、编译到运行，看到屏幕上输出的“hello world ”，那么你知道它都经历了什么吗？今天我们就来聊聊这个话题。</p><p>一、从hello.c聊起<br>hello world.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello,world!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在linux下，使用 gcc 编译hello.c源文件，会在当前目录下默认生成 a.out 可执行文件，在终端输出hello，world！。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">$ gcc hello.c<br>$ ./a.out<br>$ hello,world!<br></code></pre></td></tr></table></figure><p>预编译器、汇编器as、链接器ld，实际上gcc 命令只是对这些不同程序的封装，根据不同的参数去调用不同的程序。</p><p>从 hello.c 到可执行文件的全过程，可分为4个步骤：</p><p>1、预处理<br>gcc -E hello.c -o hello.i 得到预处理文件，其中，-E 表示只进行预编译。<br>源文件在预编译阶段会被编译器生成.i文件，主要处理源代码文件中以“#”开头的预编译指令。如：宏定义展开，将被包含的文件插入到该编译指令的位置等。</p><p>2、编译<br>gcc -S hello.i -o hello.s 得到汇编文件，其中，-S 表示生成汇编文件。<br>编译就是把预处理完的文件，进行语法分析、词法分析、语义分析及优化后生成相应的汇编代码文件，这个过程是整个程序构建的核心过程，也是最复杂的部分。</p><p>3、汇编<br>as hello.s -o hello.o 或者 gcc -c hello.s -o hello.o，其中，-c 表示只编译不链接。<br>将汇编代码文件转变成机器可以执行的指令文件，即目标文件。也可以直接使用：gcc -c hello.c -o hello.o 经过预处理、编译、汇编直接输出目标文件。<br>为什么汇编器不直接生成可执行程序，而是一个目标文件呢？为什么要链接？这个我们后面会详细讨论。</p><p>4、链接<br>随着代码量的增多，所有代码若是都放在同一个文件里，那将是一场灾难。现代大型软件，动辄由成千上万的模块组成，每个模块相互依赖又相互独立。将这些模块组装起来的过程就是链接。<br>这些模块如何形成一个单一的程序呢？无非就是两种方式：1、模块间的函数调用；2、模块间的变量访问。函数访问必须知道函数地址，变量访问必须知道变量地址，所以终归到底就是一种方式，不同模块间符号的引用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C语言经典的 “hello world ” 程序，伴随着每个程序员一起步入编程世界的大门。从编写、编译到运行，看到屏幕上输出的“hello world ”，那么你知道它都经历了什么吗？今天我们就来聊聊这个话题。&lt;/p&gt;
&lt;p&gt;一、从hello.c聊起&lt;br&gt;hello wo</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>内存申请函数</title>
    <link href="http://example.com/posts/%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E5%87%BD%E6%95%B0.html"/>
    <id>http://example.com/posts/%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E5%87%BD%E6%95%B0.html</id>
    <published>2024-11-24T15:55:07.000Z</published>
    <updated>2024-11-24T15:55:29.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、malloc"><a href="#一、malloc" class="headerlink" title="一、malloc"></a>一、malloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针；</p><p>如果开辟成功，返回一个指向开辟的空间的首地址的指针；</p><p>如果开辟失败，返回一个NULL指针，因此malloc函数的返回值，一定要做检查；</p><p>返回值的类型时void*，所以malloc函数并不知道开辟空间的类型，具体在使用时由使用者自己决定（强制转换）；</p><p>如果参数size为0，malloc函数的行为是标准未定义的，取决于编译器；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>  <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(arr));<span class="hljs-comment">//动态内存开辟；</span><br>  <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>    perror(<span class="hljs-string">&quot;malloc&quot;</span>);<span class="hljs-comment">//是空指针则输出错误代码；</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//终止程序；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    *(p + i) = i;<span class="hljs-comment">//赋值；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<span class="hljs-comment">//输出</span><br>  &#125;<br> <br>  <span class="hljs-comment">//没有使用 动态内存释放函数 free ，此时如果程序继续运行，则被malloc函数开辟的空间不会被回收；</span><br>  <span class="hljs-comment">//但只要程序退出，系统会自动回收内存空间；</span><br>  <span class="hljs-comment">//正常情况下，由动态内存开辟函数所开辟的内存空间，在使用完成后必须被释放并销毁；</span><br>  <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//将p空间中的值销毁；</span><br>  p = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//p不再指向有效空间；</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、calloc"><a href="#二、calloc" class="headerlink" title="二、calloc"></a>二、calloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> num,<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>函数的功能是为num个大小为size的元素开辟一块空间，并将空间的每个字节初始化为0；</p><p> 与函数malloc的区别在于，calloc会在返回地址前把申请的空间的每个字节初始化为全0；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">10</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//动态内存开辟；</span><br>  <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>    perror(<span class="hljs-string">&quot;calloc&quot;</span>);<span class="hljs-comment">//是空指针则输出错误代码；</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//终止程序；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<span class="hljs-comment">//输出为：0 0 0 0 0 0 0 0 0 0；</span><br>  &#125;<br>  <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//将p空间中的值销毁；</span><br>  p = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//p不再指向有效空间；</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、realloc"><a href="#三、realloc" class="headerlink" title="三、realloc"></a>三、realloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr,<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>ptr是需要调整的内存地址，size是调整之后的空间大小；</p><p>返回值为调整后的内存的起始地址；</p><p>函数在调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的空间；</p><p>&#x2F;&#x2F;对于内存空间的调整，存在两种情况：</p><p>1.原有空间之后的空间足够满足新空间的开辟；</p><p>2.原有空间之后没有足够大的空间满足新空间的开辟；</p><p>&#x2F;&#x2F;函数调整失败的情况：</p><p>1.realloc失败的时候，返回NULL；</p><p>2.realloc失败的时候，原来的内存不改变，不会释放也不会移动；</p><p>&#x2F;&#x2F;注意使用realloc函数改变或开辟空间，最好使用新的变量接收，再将新变量赋值给旧变量；原因是为了避免开辟空间失败返回空指针，导致的旧空间内存泄漏(指针被置空，无法找到旧空间)；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<span class="hljs-comment">//开辟40字节空间赋予p；</span><br>  <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>    perror(<span class="hljs-string">&quot;malloc&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    *(p + i) = i + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">int</span>* ptr = <span class="hljs-built_in">realloc</span>(p, <span class="hljs-number">80</span>);<span class="hljs-comment">//扩容；此时，如果后续内存空间足够，则空间首地址不会改变，但如果后续内存空间不足，则会发现空间首地址改变，即新空间的开辟；</span><br>  <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    p = ptr;<span class="hljs-comment">//扩容成功则将扩容后的空间赋予p；</span><br>    ptr = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//ptr不再指向有效空间；</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    perror(<span class="hljs-string">&quot;realloc&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &lt; <span class="hljs-number">20</span>; i++)<span class="hljs-comment">//为扩容后的空间赋值；</span><br>  &#123;<br>    *(p + i) = i + <span class="hljs-number">1</span>;<br>  &#125;<br>  ptr = <span class="hljs-built_in">realloc</span>(p, <span class="hljs-number">40</span>);<span class="hljs-comment">//缩容； </span><br>  <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    p = ptr;<span class="hljs-comment">//缩容成功则将扩容后的空间赋予p；</span><br>    ptr = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//将ptr置空；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<span class="hljs-comment">//为扩容后的空间赋值；</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i]);<br>  &#125;<br>  <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//将p空间中的值销毁；</span><br>  p = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//p不再指向有效空间；</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、malloc&quot;&gt;&lt;a href=&quot;#一、malloc&quot; class=&quot;headerlink&quot; title=&quot;一、malloc&quot;&gt;&lt;/a&gt;一、malloc&lt;/h2&gt;&lt;p&gt;函数原型：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串函数</title>
    <link href="http://example.com/posts/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.html"/>
    <id>http://example.com/posts/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.html</id>
    <published>2024-11-24T15:54:08.000Z</published>
    <updated>2024-11-24T15:54:33.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、strlen"><a href="#一、strlen" class="headerlink" title="一、strlen"></a>一、strlen</h2><p>1、原型：<code>size_t strlen(char const* string);</code><br>2、功能：返回字符串 string 的长度（不包含字符串终止符NUL）<br>3、注意：size_t是一个无符号整数类型</p><h2 id="二、strcpy"><a href="#二、strcpy" class="headerlink" title="二、strcpy"></a>二、strcpy</h2><p>1、原型：<code>char *strcpy(char *dst, char const *src);</code></p><p>2、功能：将参数src字符串复制到dst参数中。如果参数src和dst在内存中出现重叠，其结果是未定义的。由于dst参数将进行修改，所以它必须是个字符数组或者是一个指向动态分配内存的数组的指针，不能使用字符串常量。返回参数dst的一份拷贝。</p><p>3、注意：</p><p>目标参数dst的以前内容将被覆盖并丢失。即使新的字符串比dst原先的内存更短，由于新字符串是以NUL字符结尾，所以老字符串最后剩余的几个字符也会被有效的删除。如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。所以必须保证目标字符数组的空间足以容纳需要复制的字符串。</p><h2 id="三、strncpy"><a href="#三、strncpy" class="headerlink" title="三、strncpy"></a>三、strncpy</h2><p>1、原型：<code>char *strncpy(char *dst, char const *src, size_t len);</code></p><p>2、功能：和strcpy一样，strncpy把源字符串的字符复制到目标数组。然而，它总是 正好向dst写入len个字符。如果strlen(src)的值小于len, dst数组就用额外的NUL字节填充到len长度。如果strlen(src)的值大于或者等于len,那么只有len个字符被复制到dst中。</p><p>3、注意：strncpy调用的结果可能不是一个字符串，<strong>它的结果将不会以NUL字符结尾，</strong>  因此字符串必须以NUL字符结尾</p><h2 id="四、strcat"><a href="#四、strcat" class="headerlink" title="四、strcat"></a>四、strcat</h2><p>1、原型：<code>char *strcat(char *dst, char const *src);</code></p><p>2、功能：将一个字符串添加(连接)到另一个字符串的后面。</p><p>3、注意：src和dst的所指的内存区域不能重叠，如果发生重叠，其结果是未定义的。</p><h2 id="五、strncat"><a href="#五、strncat" class="headerlink" title="五、strncat"></a>五、strncat</h2><p>1、原型：<code>char *strncat(char *dst, char const *src, size_t len);</code></p><p>2、功能：它从src最多复制 len个字符到dst中。但是, strncat总是在结果字符串后面添加一个NUL字符。</p><p>3、注意：src和dst所指的内存区域不能重叠，并且dst必须有足够多的空间来容纳src的字符串。</p><h2 id="六、strcmp"><a href="#六、strcmp" class="headerlink" title="六、strcmp"></a>六、strcmp</h2><p>1、原型：<code>int strcmp(char const *s1, char const *s2);</code></p><p>2、功能：比较两个字符串。如果s1小于s2，strcmp函数返回一个小于零的值。如果s1大于s2，函数返回一个大于零的值。如果两个字符串相等，函数就返回零。</p><p>3、注意：由于strcmp并不修改它的任何一个参数，所以不存在溢出字符数组的危险。但是，和其他不受限制的字符串函数(strcpy, strcat)一样，strcmp函数的字符串参数也必须以一个NUL字符结尾。如果并非如此，strcmp就可能对参数后面的字符进行比较，这个比较结果将不会有什么意义。</p><h2 id="七、strncmp"><a href="#七、strncmp" class="headerlink" title="七、strncmp"></a>七、strncmp</h2><p>1、原型：<code>int strncmp(char const *s1, char const *s2, size_t len);</code></p><p> 2、功能：和strcmp一样，也用于比较两个字符串，但它最多比较 len 个字节。如果两个字符串在第 len 个字符之前存在不相等的字符，这个函数就像strcmp一样停止比较，返回结果。如果两个字符串的前len 个字符相等，函数就返回零。</p><h2 id="八、strchr、strrchr"><a href="#八、strchr、strrchr" class="headerlink" title="八、strchr、strrchr"></a>八、strchr、strrchr</h2><p>1、原型：<code>char *strchr(char const *str, int ch);</code></p><p><code>char *strrchr(char const *str, int ch);</code></p><p>2、功能：在一个字符串中查找一个特定字符。</p><p>3、注意：第2个参数是一个整型值。但是，它包含了一个字符值。strchr在字符串str中查找字符ch第一次出现的位置，找到后函数返回一个指向该位置的指针。如果该字符并不存在于str中，函数就返回一个NULL指针。strrchr的功能和strchr基本一致，只是它所返回的是一个指向字符串中该字符最后一次出现的位置(最右边那个)。</p><h2 id="九、strpbrk"><a href="#九、strpbrk" class="headerlink" title="九、strpbrk"></a>九、strpbrk</h2><p>1、原型：<code>char *strpbrk(char const *str, char const *group);</code></p><p>2、功能：这个函数返回一个指向str中第1个匹配group中任何一个字符的字符位置。如果未找到匹配，函数返回一个NULL指针。</p><h2 id="十、strstr"><a href="#十、strstr" class="headerlink" title="十、strstr"></a>十、strstr</h2><p>1、原型：<code>char *strstr(char *s1, char *s2);</code></p><p>2、功能：这个函数在s1中查找整个s2第1次出现的起始位置，并返回一个指向该位置的指针。如果s2并没有完整地出现在s1的任何地方，函数将返回一个NULL指针。如果第2个参数是一个空字符串，函数就返回s1。</p><h2 id="十一、strtok"><a href="#十一、strtok" class="headerlink" title="十一、strtok"></a>十一、strtok</h2><p>1、原型：<code>char *strtok(char *str, char const *sep);</code></p><p>2、功能：分解字符串str为一组字符串，分隔符为sep。</p><p>3、注意：如果strtok函数的第1个参数不是NULL，函数将找到字符串的第1个标记。strtok同时将保存它在字符串中的位置。如果strtok函数的第1个参数是NULL，函数就在同一个字符串中从这个被保存的位置开始像前面一样查找下一个标记。如果字符串内不存在更多的标记，strtok函数就返回一个NULL指针。在典型情况下，在第1次调用strtok时，向它传递一个指向字符串的指针。然后，这个函数被重复调用（第1个参数为NULL），直到它返回NULL为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> whitespace[] = <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-type">char</span> *token;<br>    <span class="hljs-type">char</span> line[] = <span class="hljs-string">&quot;I love you&quot;</span>;<br>    <span class="hljs-keyword">for</span> (token = strtok(line, whitespace); token !=<span class="hljs-literal">NULL</span>;<br>         token = strtok(<span class="hljs-literal">NULL</span>, whitespace)) &#123;<br>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Next token is |%s|\n&quot;</span>, token);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、strlen&quot;&gt;&lt;a href=&quot;#一、strlen&quot; class=&quot;headerlink&quot; title=&quot;一、strlen&quot;&gt;&lt;/a&gt;一、strlen&lt;/h2&gt;&lt;p&gt;1、原型：&lt;code&gt;size_t strlen(char const* string);&lt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="http://example.com/posts/%E6%8C%87%E9%92%88.html"/>
    <id>http://example.com/posts/%E6%8C%87%E9%92%88.html</id>
    <published>2024-11-24T15:53:14.000Z</published>
    <updated>2024-11-24T15:53:36.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、C语言的精髓–指针"><a href="#1、C语言的精髓–指针" class="headerlink" title="1、C语言的精髓–指针"></a>1、C语言的精髓–指针</h2><p>指针就是地址，在一定程度上可以把数组名就看成一个特殊的指针,指针也就是一个变量而已，指针全名指针变量。</p><h3 id="（1）指针数组"><a href="#（1）指针数组" class="headerlink" title="（1）指针数组"></a>（1）指针数组</h3><p>指针数组，是个数组，里边放的东西都是指针。<code>char *p[2]=&#123;&quot;china&quot;,&quot;linux&quot;&#125;;</code></p><p>仔细来说，从运算符优先级来看，<code>[]的优先级比*高，所以p先和[]结合</code>。所以这就是个数组，再与指针结合，所以叫指针数组。 二重指针可以指向指针数组。</p><h3 id="（2）数组指针"><a href="#（2）数组指针" class="headerlink" title="（2）数组指针"></a>（2）数组指针</h3><p>数组指针，是个指针，指向数组的指针.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-type">int</span> (*p)[<span class="hljs-number">5</span>]=a;        <span class="hljs-comment">//指向二维数组 </span><br><span class="hljs-type">int</span> b[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 多维数组 int(*q)[3][4] = b;</span><br></code></pre></td></tr></table></figure><p>这里指针是在()中放着，())和[]优先级都是最高的，结合性是从左向右，所以先与*结合，这是个指针，然后与[]结合，就是指针数组。</p><h3 id="（3）函数指针"><a href="#（3）函数指针" class="headerlink" title="（3）函数指针"></a>（3）函数指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> (*p)(<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> b);<span class="hljs-comment">// 函数指针p指向返回值类型为int的，两个参数为int和char的函数 使用方法如下， p(a,b); 或者 (*p)(a,b);</span><br></code></pre></td></tr></table></figure><p>void *类型可以指向任何一个类型的指针</p><p><code>void (*signal(int sig, void (*func) (int))) (int)</code></p><p><strong>signal仍然是一个函数</strong>，他返回一个函数指针，这个指针指向的函数没有返回值，只有一个int类型的参数</p><h3 id="（4）二维数组"><a href="#（4）二维数组" class="headerlink" title="（4）二维数组"></a>（4）二维数组</h3><p><code>a[5][7];//用指针访问就是*（*（p+5）+7） int (*p)[7]=a;</code></p><h3 id="（5）字符数组与指向字符串指针的问题"><a href="#（5）字符数组与指向字符串指针的问题" class="headerlink" title="（5）字符数组与指向字符串指针的问题"></a>（5）字符数组与指向字符串指针的问题</h3><p>其中<code>char *p=&quot;linux&quot;</code> 这种情况字符串Linux只存在于只读数据段中（rodata），所以p所指向的内容不可以被更改，如<code>*（p+1）=a;</code>这是实现不了的，但是可以更改指针p 指向的地址，例如p&#x3D;”mengchao”,但是这里的p&#x3D;”mengchao”这段话放在子函数中是不可以的，字符串mengchao是存在于栈中，子函数结束就被释放了，不能够达到改变的目的。可以使用二重指针来实现。</p><p>char p[]&#x3D;”linux” 这个是字符数组，相当于初始化数组，可以更改内容，如p[1]&#x3D;’a’;* 这里Linux存在于栈上</p><p><strong>所以有的字符串操作函数例如</strong>​<strong>​<code>char *strcat(char *dst,char const *src);</code>​</strong>​<strong>前面的参数dst,需要修改，只能传数组，不能直接传一个字符串，因为字符串不可改变</strong></p><p>所以想修改字符串，请将他放在字符数组中。 另外关于这个程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-type">char</span> *p = &amp;c;<br><span class="hljs-type">char</span> *q = <span class="hljs-string">&quot;china&quot;</span>; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,p);     <span class="hljs-comment">//006DFEE7 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,*p);    <span class="hljs-comment">//a </span><br><span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;   <span class="hljs-comment">//a </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,q);     <span class="hljs-comment">//004B9024 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,q);     <span class="hljs-comment">//china </span><br><span class="hljs-built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//china </span><br><span class="hljs-built_in">cout</span> &lt;&lt; *q &lt;&lt; <span class="hljs-built_in">endl</span>;   <span class="hljs-comment">//c</span><br></code></pre></td></tr></table></figure><p>这里想插一句关于strlen和sizeof的区别。比如我们定义char buf[100]&#x3D;{“helloworld”}; strlen(buf);就是里边字符串的长度，而sizeof(buf);就是数组长度100.</p><p><strong>一定程度上可以认为一级指针与一维数组名等价，二级指针与指针数组名等价，数组指针与二维数组名等价。而二级指针和二维数组名没有一毛钱关系。</strong></p><h3 id="（6）数组名"><a href="#（6）数组名" class="headerlink" title="（6）数组名"></a>（6）数组名</h3><p>数组名可以看成是首元素的首地址，也可以当成一个整体来看。数组名是常量，才可以唯一的确定数组元素的起始地址。设有一维数组<code>int a[5]</code>:</p><p><code>a[1] = *(a+1); //a代表首元素首地址,加1跨度为int大小为4</code></p><p>对一维数组名和二维数组名引用(取地址)对一维数组名进行引用会将使其升级为二维数组名。</p><p><code>(&amp;a+1)//这个东西加1，加的大小是整个数组的大小，是20.</code></p><p>二维数组名解引用，降维为一维数组名。二维数组名是首元素首地址，设有<code>int a[4][3]</code>,则</p><p><code>*(a+1) //代表的是二维数组的第二维 a[1][2] = *(*(a+1)+2)</code></p><p>注意下面的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">*p++：等同于：*p;  p += <span class="hljs-number">1</span>;先运算再++ <br>解析：实际上*p++符号整体对外表现的值是*p的值，运算完成后p再加<span class="hljs-number">1.</span> 【注意】是运算后p再加<span class="hljs-number">1</span>，而不是p所指向的变量*p再加<span class="hljs-number">1</span> <br><br>*++p：等同于 p += <span class="hljs-number">1</span>;    <br>*p;先++再运算 解析：由于++在p的前面，++前置的含义是，先加<span class="hljs-number">1</span>，得到一个新的p（它的值是原来p的值加<span class="hljs-number">1</span>）。然后这个新的p再与前面的*结合. <br><br>【总结】无论是*p++还是*++p，都是指针p += <span class="hljs-number">1</span>，即p的值+<span class="hljs-number">1</span>，而不是p所指向的变量*p的值+<span class="hljs-number">1</span>。 ++前置与++后置，只是决定了到底是先p += <span class="hljs-number">1</span>，还是先*p。++前置表示先p += <span class="hljs-number">1</span>，再*p。++后置表示先*p，在p += <span class="hljs-number">1</span>； --前置与--后置的的分析方法++前置与++后置的一样。<br></code></pre></td></tr></table></figure><h2 id="2、进程空间"><a href="#2、进程空间" class="headerlink" title="2、进程空间"></a>2、进程空间</h2><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog5b809e6f908834233029fd990bccc4d5.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">全局变量：不初始化的默认为<span class="hljs-number">0</span>，放在.bss段，初始化为<span class="hljs-number">0</span>的也放在.bss段 <br>初始化为非<span class="hljs-number">0</span>的全局变量放在.data段中，生命周期全局 <br>局部变量放在栈上，当调用结束，生命周期结束<br></code></pre></td></tr></table></figure><h2 id="3、结构体"><a href="#3、结构体" class="headerlink" title="3、结构体"></a>3、结构体</h2><p>《道德经》 曰：”一生二，二生三，三生万物”。结构体用关键字 struct 定义，表达出多个不同变量在一起的类型。我们由此可以使用struct自定义几乎所有想要的类型。</p><p>结构体的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">30</span>];<br>  <span class="hljs-type">char</span> sex;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">float</span> high;<br>&#125;stu1;<span class="hljs-comment">//这里定义了一个变量stu1</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu2</span>;</span><span class="hljs-comment">//这里定义了一个变量stu2</span><br></code></pre></td></tr></table></figure><p>这种定义出来的结构体类型在定义变量时必须跟着struct，就像<code>struct student stu1;</code>一样，我们引入typedef，避免这种情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">30</span>];<br>  <span class="hljs-type">char</span> sex;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">float</span> high;<br>&#125;STUDENT;<span class="hljs-comment">//将struct student类型重命名为STUDENT</span><br>STUDENT stu, stu2;<span class="hljs-comment">//使用STUDENT替换struct student定义变量</span><br></code></pre></td></tr></table></figure><h3 id="结构体变量初始化及成员访问"><a href="#结构体变量初始化及成员访问" class="headerlink" title="结构体变量初始化及成员访问"></a>结构体变量初始化及成员访问</h3><p>定义的结构体变量用点成员运算符（.）访问成员变量，比如<code>stu.sex</code>就这样访问成员变量。如果是结构体类型的指针变量则使用-&gt;访问成员变量。<code>STUDENT stu; stu-&gt;sex = &#39;x&#39;;</code>初始化大概有三种方法。</p><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">typede <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">block</span> &#123;</span> <br>  <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];   <br>  <span class="hljs-type">int</span> type;   <br>  <span class="hljs-type">int</span> size; <br> &#125;block;<br></code></pre></td></tr></table></figure><p>方法一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">block test = &#123;<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>&#125;； 需要注意对应的顺序，不能错位。<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">block test; <br>test.name = <span class="hljs-string">&quot;version&quot;</span>; <br>test.type = <span class="hljs-number">1</span>; <br>test.size= <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">block  test = &#123;  <br>  .type= <span class="hljs-number">1</span>,  <br>  .size = <span class="hljs-number">12</span>,  <br>  .name= <span class="hljs-string">&quot;version&quot;</span> <br> &#125;;<br></code></pre></td></tr></table></figure><h3 id="结构体大小"><a href="#结构体大小" class="headerlink" title="结构体大小"></a>结构体大小</h3><p>设计内存对齐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> &#123;</span>     <br>  <span class="hljs-type">char</span> a;<br>  <span class="hljs-type">int</span> b;<br>  <span class="hljs-type">int64_t</span> c;  <br>  <span class="hljs-type">char</span> d;<br>&#125;; <br>Date data [<span class="hljs-number">2</span>][<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><p>结构体所占的内存大小 a.整体所占的内存大小应该是结构中成员类型最大的整数倍，此处最大的类型是int_64t，占8个字节。即最后所占字节的总数应该是8的倍数，不足的补足 b.数据对齐原则-内存按结构体成员的先后顺序排列，当排到该成员变量时，其前面所有成员已经占用的空间大小必须是该成员类型大小的整数倍，如果不够，则前面的成员占用的空间要补齐，使之成为当前成员类型的整数倍。假设是地址是从0开始，结构体中第一个成员类型char型占一个字节，则内存地址0-1，第二成员从2开始，int型所占内存4个字节根据原则b，第一个成员所占内存补齐4的倍数，故第一个成员所占内存:1＋3＝4；第二个成员占5-8.第三个成员占8个字节，满足原则b，不需要补齐，占9-16第四个成员占一个字节，占17.故总内存为1＋3＋4＋8＋1＝17个字节，但根据原则1总字节数需是8的倍数，需将17补齐到24.故此结构体总字节数为:24字节</p><h2 id="4、一些关键字的详解"><a href="#4、一些关键字的详解" class="headerlink" title="4、一些关键字的详解"></a>4、一些关键字的详解</h2><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>在c&#x2F;c++中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了inline修饰符，表示为内联函数。栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。 inline的使用是有所限制的，inline只适合涵数体内代码简单的涵数使用，不能包含复杂的结构控制语句例如while、switch，并且不能内联函数本身不能是直接递归函数（即，自己内部还调用自己的函数）。 inline函数仅仅是一个对编译器的建议，所以最后能否真正内联，看编译器的意思，它如果认为函数不复杂，能在调用点展开，就会真正内联，并不是说声明了内联就会内联，声明内联只是一个建议而已。</p><h3 id="inline函数的定义放在头文件中"><a href="#inline函数的定义放在头文件中" class="headerlink" title="inline函数的定义放在头文件中"></a>inline函数的定义放在头文件中</h3><p>其次，因为内联函数要在调用点展开，所以编译器必须随处可见内联函数的定义，要不然就成了非内联函数的调用了。所以，这要求每个调用了内联函数的文件都出现了该内联函数的定义。 因此，将内联函数的定义放在头文件里实现是合适的，省却你为每个文件实现一次的麻烦。 声明跟定义要一致：如果在每个文件里都实现一次该内联函数的话，那么，最好保证每个定义都是一样的，否则，将会引起未定义的行为。如果不是每个文件里的定义都一样，那么，编译器展开的是哪一个，那要看具体的编译器而定。所以，最好将内联函数定义放在头文件中。</p><p>注：之所以定义放在头文件中，是因为inline是在编译阶段展开的，并不是连接源文件。</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static别的东西不想说，就说static在修饰局部变量的时候，函数结束此时局部变量并不会被释放，并且修饰的局部变量的值是一直保存的，类似于全局变量，但是还是只能在这个函数内才能访问</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const又叫常变量，修饰的变量一般不能被更改。但是在C语言中这是假的，通过定义一个指针，修改指针指向的内存依旧可以更改const修饰的变量。在C++中才是真正的const，无法修改。 const一般出现在参数列表中，意味着这个变量在函数中并不会被修改，是输入型参数。</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>这个volatile，英文名易变的。因为访问寄存器要比访问内存单元快的多,所以编译器一般都会作减少存取内存的优化，但有可能会读脏数据。当要求使用volatile声明变量值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。 精确地说就是，遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问；如果不使用valatile，则编译器将对所声明的语句进行优化。</p><h2 id="5、多文件编程"><a href="#5、多文件编程" class="headerlink" title="5、多文件编程"></a>5、多文件编程</h2><p>一个简单的例子 全局变量最好声明为 static，只在当前文件中可见，不要对外暴露；如果必须对外暴露，可以使用宏定义代替，全局变量最好只在本文件内使用，如果其他文件必须使用，最好封装get接口set接口，请看下面的代码。 main.c 源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;module.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> n1 = <span class="hljs-number">1</span>, n2 = <span class="hljs-number">100</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;从%d 加到%d 的和为%ld [By %s]&quot;</span>, n1, n2, sum(n1, n2), OS);<br>  getch();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>module.c 源码：如果使用了头文件中的宏定义，这里也是需要包含头文件的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;module.h&quot;</span></span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> fromNum, <span class="hljs-type">int</span> endNum)</span><br>&#123;<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 参数不符合规则，返回 -1</span><br>  <span class="hljs-keyword">if</span>(fromNum&lt;<span class="hljs-number">0</span> || endNum&lt;<span class="hljs-number">0</span> || endNum&lt;fromNum)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span>(i=fromNum; i&lt;=endNum; i++)&#123;<br>    result += i;<br>  &#125;<br>  <span class="hljs-comment">// 返回大于等于 0 的值</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>module.h 源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __MODULE_H_ </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MODULE_H_ </span><br><span class="hljs-comment">// 用宏定义来代替全局变量 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OS <span class="hljs-string">&quot;Windows 7&quot;</span> </span><br><span class="hljs-comment">// 也可以省略 extern；不过为了程序可读性，建议写上 </span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>多个.c文件的时候，也可以只用一个.h头文件，然后都包含一下这个.h文件</p><h2 id="6、文件操作"><a href="#6、文件操作" class="headerlink" title="6、文件操作"></a>6、文件操作</h2><p><a href="https://www.cnblogs.com/wuqianling/p/5340719.html">https://www.cnblogs.com/wuqianling/p/5340719.html</a>这篇文章写的就不错。</p><p>主要是文件操作分为二进制文件和文本文件，fopen打开的时候设置打开模式，返回值问FILE*类型的一个文件指针。通过这个文件指针就可以访问这个文件。</p><h2 id="7、编码规范"><a href="#7、编码规范" class="headerlink" title="7、编码规范"></a>7、编码规范</h2><ul><li>for while等关键字和括号之间留出一个空格，突出关键字，for后哪怕只有一行也写{}</li><li>注释的双斜线之后要有一个空格，突出注释</li><li>函数名和类使用大驼峰命名法首个单词大写，变量使用小驼峰命名法第一个字母小写</li><li>类和函数写完之后要空一行</li><li>分号、逗号前边不空格，后边留空格。双目运算符两边留空格</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、C语言的精髓–指针&quot;&gt;&lt;a href=&quot;#1、C语言的精髓–指针&quot; class=&quot;headerlink&quot; title=&quot;1、C语言的精髓–指针&quot;&gt;&lt;/a&gt;1、C语言的精髓–指针&lt;/h2&gt;&lt;p&gt;指针就是地址，在一定程度上可以把数组名就看成一个特殊的指针,指针也就</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>proc目录下pid各文件目录含义</title>
    <link href="http://example.com/posts/proc%E7%9B%AE%E5%BD%95%E4%B8%8Bpid%E5%90%84%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%90%AB%E4%B9%89.html"/>
    <id>http://example.com/posts/proc%E7%9B%AE%E5%BD%95%E4%B8%8Bpid%E5%90%84%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%90%AB%E4%B9%89.html</id>
    <published>2024-11-24T15:41:06.000Z</published>
    <updated>2024-11-25T14:44:43.732Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 内核提供了一种通过 proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。</p><p>用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取 proc 文件时，proc 文件系统是动态从系统内核读出所需信息并提交的。</p><p>下面列出的这些文件或子文件夹，并不是都是在你的系统中存在，这取决于你的内核配置和装载的模块。另外，在 proc 下还有三个很重要的目录：net，scsi 和 sys。 sys 目录是可写的，可以通过它来访问或修改内核的参数，而 net 和 scsi 则依赖于内核配置。例如，如果系统不支持 scsi，则 scsi 目录不存在。</p><p>除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在 proc 下，以进程的 PID 号为目录名，它们是读取进程信息的接口。而 self 目录则是读取进程本身的信息接口，是一个 link。</p><h3 id="proc-pid-auxv"><a href="#proc-pid-auxv" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;auxv"></a>&#x2F;proc&#x2F;[pid]&#x2F;auxv</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;auxv 包含传递给进程的 ELF 解释器信息，格式是每一项都是一个 unsigned long长度的 ID 加上一个 unsigned long 长度的值。最后一项以连续的两个 0x00 开头。举例如下：</p><blockquote><p>$ hexdump -x &#x2F;proc&#x2F;2406&#x2F;auxv</p><p>0000000    0021    0000    0000    0000    f000    f7fa    7fff    0000<br>0000010    0010    0000    0000    0000    fbff    1f8b    0000    0000<br>0000020    0006    0000    0000    0000    1000    0000    0000    0000<br>0000030    0011    0000    0000    0000    0064    0000    0000    0000<br>0000040    0003    0000    0000    0000    0040    0040    0000    0000<br>0000050    0004    0000    0000    0000    0038    0000    0000    0000<br>0000060    0005    0000    0000    0000    0007    0000    0000    0000<br>0000070    0007    0000    0000    0000    0000    0000    0000    0000<br>0000080    0008    0000    0000    0000    0000    0000    0000    0000<br>0000090    0009    0000    0000    0000    55e0    0045    0000    0000<br>00000a0    000b    0000    0000    0000    0000    0000    0000    0000<br>00000b0    000c    0000    0000    0000    0000    0000    0000    0000<br>00000c0    000d    0000    0000    0000    0000    0000    0000    0000<br>00000d0    000e    0000    0000    0000    0000    0000    0000    0000<br>00000e0    0017    0000    0000    0000    0000    0000    0000    0000<br>00000f0    0019    0000    0000    0000    f079    f7f6    7fff    0000<br>0000100    001f    0000    0000    0000    ffea    f7f6    7fff    0000<br>0000110    000f    0000    0000    0000    f089    f7f6    7fff    0000<br>0000120    0000    0000    0000    0000    0000    0000    0000    0000<br>0000130</p></blockquote><h3 id="proc-pid-cmdline"><a href="#proc-pid-cmdline" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;cmdline"></a>&#x2F;proc&#x2F;[pid]&#x2F;cmdline</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;cmdline 是一个只读文件，包含进程的完整命令行信息。如果该进程已经被交换出内存或者这个进程是 zombie 进程，则这个文件没有任何内容。该文件以空字符 null 而不是换行符作为结束标志。举例如下：</p><blockquote><p>$ ps aux|grep frps<br>root      2406  0.1  0.1  54880 10524 ?        Sl   Dec11  21:30 frps -c .&#x2F;frps.ini</p><p>$ cat &#x2F;proc&#x2F;2406&#x2F;cmdline<br>frps-c.&#x2F;frps.ini</p></blockquote><h3 id="proc-pid-comm"><a href="#proc-pid-comm" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;comm"></a>&#x2F;proc&#x2F;[pid]&#x2F;comm</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;comm 包含进程的命令名。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;comm<br>frps</p></blockquote><h3 id="proc-pid-cwd"><a href="#proc-pid-cwd" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;cwd"></a>&#x2F;proc&#x2F;[pid]&#x2F;cwd</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;cwd 是进程当前工作目录的符号链接。举例如下：</p><blockquote><p>$ ls -lt &#x2F;proc&#x2F;2406&#x2F;cwd<br>lrwxrwxrwx 1 root root 0 Dec 12 20:39 &#x2F;proc&#x2F;2406&#x2F;cwd -&gt; &#x2F;home&#x2F;mike&#x2F;frp_0.13.0_linux_amd64</p></blockquote><h3 id="proc-pid-environ"><a href="#proc-pid-environ" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;environ"></a>&#x2F;proc&#x2F;[pid]&#x2F;environ</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;environ 显示进程的环境变量。举例如下：</p><blockquote><p>$ strings &#x2F;proc&#x2F;2406&#x2F;environ</p><p>SUPERVISOR_GROUP_NAME&#x3D;ssh<br>TERM&#x3D;linux<br>SUPERVISOR_SERVER_URL&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock<br>SUPERVISOR_PROCESS_NAME&#x3D;ssh<br>RUNLEVEL&#x3D;2<br>UPSTART_EVENTS&#x3D;runlevel<br>PREVLEVEL&#x3D;N<br>PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin<br>UPSTART_INSTANCE&#x3D;<br>UPSTART_JOB&#x3D;rc<br>SUPERVISOR_ENABLED&#x3D;1<br>runlevel&#x3D;2<br>PWD&#x3D;&#x2F;<br>previous&#x3D;N</p></blockquote><h3 id="proc-pid-exe"><a href="#proc-pid-exe" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;exe"></a>&#x2F;proc&#x2F;[pid]&#x2F;exe</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;exe 为实际运行程序的符号链接。举例如下：</p><blockquote><p>$ ls -lt &#x2F;proc&#x2F;2406&#x2F;exe<br>lrwxrwxrwx 1 root root 0 Dec 11 19:00 &#x2F;proc&#x2F;2406&#x2F;exe -&gt; &#x2F;usr&#x2F;bin&#x2F;frps</p></blockquote><h3 id="proc-pid-fd"><a href="#proc-pid-fd" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;fd"></a>&#x2F;proc&#x2F;[pid]&#x2F;fd</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;fd 是一个目录，包含进程打开文件的情况。举例如下：</p><blockquote><p>$ ls -lt &#x2F;proc&#x2F;2406&#x2F;fd</p><p>lrwx—— 1 root root 64 Dec 24 09:39 77 -&gt; socket:[44377722]<br>lrwx—— 1 root root 64 Dec 17 15:07 47 -&gt; socket:[29482617]<br>lr-x—— 1 root root 64 Dec 12 20:18 0 -&gt; pipe:[13282]<br>l-wx—— 1 root root 64 Dec 12 20:18 1 -&gt; pipe:[13283]<br>lrwx—— 1 root root 64 Dec 12 20:18 10 -&gt; socket:[12238218]<br>lrwx—— 1 root root 64 Dec 12 20:18 4 -&gt; anon_inode:[eventpoll]<br>lrwx—— 1 root root 64 Dec 12 20:18 40 -&gt; socket:[19378614]</p></blockquote><p>目录中的每一项都是一个符号链接，指向打开的文件，数字则代表文件描述符。</p><h3 id="proc-pid-latency"><a href="#proc-pid-latency" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;latency"></a>&#x2F;proc&#x2F;[pid]&#x2F;latency</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;latency 显示哪些代码造成的延时比较大。如果要使用这个特性需要执行：</p><blockquote><p>$ echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;latencytop</p></blockquote><p>举例如下</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;latency</p><p>Latency Top version : v0.1<br>30667 10650491 4891 poll_schedule_timeout do_sys_poll SyS_poll system_call_fastpath 0x7f636573dc1d<br>8 105 44 futex_wait_queue_me futex_wait do_futex SyS_futex system_call_fastpath 0x7f6365a167bc</p></blockquote><p>每一行前三个数字分别是后面代码执行的次数、总共执行延迟时间(单位是微秒)和最长执行延迟时间(单位是微秒)。后面则是代码完整的调用栈。</p><h3 id="proc-pid-maps"><a href="#proc-pid-maps" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;maps"></a>&#x2F;proc&#x2F;[pid]&#x2F;maps</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;maps 显示进程的内存区域映射信息。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;maps<br>00400000-006ea000 r-xp 00000000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps<br>006ea000-00a6c000 r–p 002ea000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps<br>00a6c000-00ab1000 rw-p 0066c000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps<br>00ab1000-00ad4000 rw-p 00000000 00:00 0<br>c000000000-c00000b000 rw-p 00000000 00:00 0<br>c41feac000-c420000000 rw-p 00000000 00:00 0<br>c420000000-c420400000 rw-p 00000000 00:00 0<br>c420400000-c420700000 rw-p 00000000 00:00 0<br>c420700000-c420800000 rw-p 00000000 00:00 0<br>c420800000-c420900000 rw-p 00000000 00:00 0<br>c420900000-c420a00000 rw-p 00000000 00:00 0<br>c420a00000-c421ea0000 rw-p 00000000 00:00 0<br>c421ea0000-c422a00000 rw-p 00000000 00:00 0<br>c422a00000-c422a60000 rw-p 00000000 00:00 0<br>7f0418c01000-7f0418ee1000 rw-p 00000000 00:00 0<br>7ffff7f4f000-7ffff7f70000 rw-p 00000000 00:00 0                          [stack:5121]<br>7ffff7fad000-7ffff7faf000 r–p 00000000 00:00 0                          [vvar]<br>7ffff7faf000-7ffff7fb1000 r-xp 00000000 00:00 0                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</p></blockquote><p>其中注意的一点是 [stack:] 是线程的堆栈信息，对应于 &#x2F;proc&#x2F;[pid]&#x2F;task&#x2F;[tid]&#x2F; 路径。</p><h3 id="proc-pid-root"><a href="#proc-pid-root" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;root"></a>&#x2F;proc&#x2F;[pid]&#x2F;root</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;root 是进程根目录的符号链接。举例如下：</p><blockquote><p>$  ls -lt &#x2F;proc&#x2F;2406&#x2F;root<br>lrwxrwxrwx 1 root root 0 Dec 12 20:39 &#x2F;proc&#x2F;2406&#x2F;root -&gt; &#x2F;</p></blockquote><h3 id="proc-pid-stack"><a href="#proc-pid-stack" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;stack"></a>&#x2F;proc&#x2F;[pid]&#x2F;stack</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;stack 示当前进程的内核调用栈信息，只有内核编译时打开了 CONFIG_STACKTRACE 编译选项，才会生成这个文件。举例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">$ cat /proc/<span class="hljs-number">2406</span>/<span class="hljs-built_in">stack</span><br>[&lt;ffffffff810fa996&gt;] futex_wait_queue_me+<span class="hljs-number">0xc6</span>/<span class="hljs-number">0x130</span><br>[&lt;ffffffff810fb05d&gt;] futex_wait+<span class="hljs-number">0x17d</span>/<span class="hljs-number">0x270</span><br>[&lt;ffffffff810fd2d5&gt;] do_futex+<span class="hljs-number">0xd5</span>/<span class="hljs-number">0x520</span><br>[&lt;ffffffff810fd791&gt;] SyS_futex+<span class="hljs-number">0x71</span>/<span class="hljs-number">0x150</span><br>[&lt;ffffffff8180cc76&gt;] entry_SYSCALL_64_fastpath+<span class="hljs-number">0x16</span>/<span class="hljs-number">0x75</span><br>[&lt;ffffffffffffffff&gt;] <span class="hljs-number">0xffffffffffffffff</span><br></code></pre></td></tr></table></figure><h3 id="proc-pid-statm"><a href="#proc-pid-statm" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;statm"></a>&#x2F;proc&#x2F;[pid]&#x2F;statm</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;statm 显示进程所占用内存大小的统计信息。包含七个值，度量单位是 page(page大小可通过 getconf PAGESIZE 得到)。举例如下：</p><blockquote><p>$  cat &#x2F;proc&#x2F;2406&#x2F;statm<br>13720 2617 493 746 0 12007 0</p></blockquote><p>各个值含义：</p><blockquote><p>a）进程占用的总的内存<br>b）进程当前时刻占用的物理内存<br>c）同其它进程共享的内存<br>d）进程的代码段<br>e）共享库(从2.6版本起，这个值为0)<br>f）进程的堆栈<br>g）dirty pages(从2.6版本起，这个值为0)</p></blockquote><h3 id="proc-pid-status"><a href="#proc-pid-status" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;status"></a>&#x2F;proc&#x2F;[pid]&#x2F;status</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;status 包含进程的状态信息。其很多内容与 &#x2F;proc&#x2F;[pid]&#x2F;stat 和 &#x2F;proc&#x2F;[pid]&#x2F;statm 相同，但是却是以一种更清晰地方式展现出来。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;status<br>Name:   frps<br>State:  S (sleeping)<br>Tgid:   2406<br>Ngid:   0<br>Pid:    2406<br>PPid:   2130<br>TracerPid:  0<br>Uid:    0   0   0   0<br>Gid:    0   0   0   0<br>FDSize: 128<br>Groups: 0<br>NStgid: 2406<br>NSpid:  2406<br>NSpgid: 2406<br>NSsid:  2130<br>VmPeak:    54880 kB<br>VmSize:    54880 kB<br>VmLck:         0 kB<br>VmPin:         0 kB<br>VmHWM:     34872 kB<br>VmRSS:     10468 kB<br>VmData:    47896 kB<br>VmStk:       132 kB<br>VmExe:      2984 kB<br>VmLib:         0 kB<br>VmPTE:        68 kB<br>VmPMD:        20 kB<br>VmSwap:        0 kB<br>HugetlbPages:          0 kB<br>Threads:    11<br>SigQ:   0&#x2F;31834<br>SigPnd: 0000000000000000<br>ShdPnd: 0000000000000000<br>SigBlk: 0000000000000000<br>SigIgn: 0000000000000000<br>SigCgt: fffffffe7fc1feff<br>CapInh: 0000000000000000<br>CapPrm: 0000003fffffffff<br>CapEff: 0000003fffffffff<br>CapBnd: 0000003fffffffff<br>CapAmb: 0000000000000000<br>Seccomp:    0<br>Cpus_allowed:   f<br>Cpus_allowed_list:  0-3<br>Mems_allowed:   00000000,00000001<br>Mems_allowed_list:  0<br>voluntary_ctxt_switches:    2251028<br>nonvoluntary_ctxt_switches: 18031</p></blockquote><p>关于信号（signal）的信息：SigQ 分为两部分（例如 0&#x2F;31834），前面表示当前处在队列中的信号（0），后面则表示队列一共可以存储多少信号（31834）；SigPnd 表示当前线程 pending 的信号，而ShdPnd 则表示整个进程 pending 的信号；SigBlk、SigIgn 和 SigCgt 分别表示对信号的处理是阻塞，忽略，还是捕获。（关于Unix信号的相关知识，可以参考 Unix: Dealing with signals）。</p><h3 id="proc-pid-syscall"><a href="#proc-pid-syscall" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;syscall"></a>&#x2F;proc&#x2F;[pid]&#x2F;syscall</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;syscall 显示当前进程正在执行的系统调用。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;syscall<br>202 0xab3730 0x0 0x0 0x0 0x0 0x0 0x7ffff7f6ec68 0x455bb3</p></blockquote><p>第一个值是系统调用号（202代表poll），后面跟着 6 个系统调用的参数值（位于寄存器中），最后两个值依次是堆栈指针和指令计数器的值。如果当前进程虽然阻塞，但阻塞函数并不是系统调用，则系统调用号的值为 -1，后面只有堆栈指针和指令计数器的值。如果进程没有阻塞，则这个文件只有一个 running  的字符串。</p><p>内核编译时打开了 CONFIG_HAVE_ARCH_TRACEHOOK 编译选项，才会生成这个文件。</p><h3 id="proc-pid-wchan"><a href="#proc-pid-wchan" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;wchan"></a>&#x2F;proc&#x2F;[pid]&#x2F;wchan</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;wchan 显示当进程 sleep 时，kernel 当前运行的函数。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;wchan<br>futex_wait_queue_meadmin</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 内核提供了一种通过 proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。&lt;/p&gt;
&lt;p&gt;用户和应用程序可以通过 proc</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>查找内核符号</title>
    <link href="http://example.com/posts/%E6%9F%A5%E6%89%BE%E5%86%85%E6%A0%B8%E7%AC%A6%E5%8F%B7.html"/>
    <id>http://example.com/posts/%E6%9F%A5%E6%89%BE%E5%86%85%E6%A0%B8%E7%AC%A6%E5%8F%B7.html</id>
    <published>2024-11-24T15:39:23.000Z</published>
    <updated>2024-11-25T14:44:57.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-proc-kallsyms"><a href="#一、-proc-kallsyms" class="headerlink" title="一、&#x2F;proc&#x2F;kallsyms"></a>一、&#x2F;proc&#x2F;kallsyms</h1><p>  内核符号可以通过&#x2F;proc&#x2F;kallsyms查看。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog20241124233848.png"></p><h3 id="1-符号类型说明"><a href="#1-符号类型说明" class="headerlink" title="(1)符号类型说明"></a>(1)符号类型说明</h3><p>  在Linux内核中，kallsyms是一个符号表，它包含了内核中所有的符号信息，包括函数、变量、常量等等。这些符号信息可以被内核模块和其他程序使用，这些符号类型可以帮助开发人员更好地理解内核中的符号信息，从而更好地进行内核开发和调试。</p><p>在kallsyms中，每个符号都有一个类型，表示它的用途。下面是一些常见的符号类型：</p><ul><li>T：表示该符号是一个函数，可以被其他代码调用。</li><li>t：表示该符号是一个局部函数，只能在当前文件中使用。</li><li>D：表示该符号是一个全局变量，可以被其他代码访问和修改。</li><li>d：表示该符号是一个局部变量，只能在当前文件中使用。</li><li>R：表示该符号是一个只读变量，不能被修改。</li><li>r：表示该符号是一个只读局部变量，只能在当前文件中使用</li><li>A：表示该符号是一个可读写的变量，可以被其他代码访问和修改。</li><li>a：表示该符号是一个可读写的局部变量，只能在当前文件中使用。</li><li>B：表示该符号是一个未初始化的全局变量，它的值在程序启动时被初始化为0。</li><li>b：表示该符号是一个未初始化的局部变量，它的值在程序启动时被初始化为0。</li><li>G：表示该符号是一个全局变量，但是它的值在程序运行时可能会被修改。</li><li>C：表示该符号是一个常量，它的值在程序运行时不能被修改。</li><li>W：表示该符号是一个弱符号，</li><li>?: 表示该符号的类型未知。</li></ul><h3 id="2-弱符号"><a href="#2-弱符号" class="headerlink" title="(2)弱符号"></a>(2)弱符号</h3><p>关于弱符号的一些说明：__weak 是一个关键字，用于声明一个弱符号。在 C 语言中，如果一个符号被定义了多次，编译器会报错。但是，如果一个符号被声明为弱符号，那么编译器就不会报错，而是在链接时选择其中一个符号作为最终的符号。这个特性在编写库时非常有用，因为它允许用户在链接时覆盖库中的函数。</p><p>如下为一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * probe_kernel_read(): safely attempt to read from a location</span><br><span class="hljs-comment"> * @dst: pointer to the buffer that shall take the data</span><br><span class="hljs-comment"> * @src: address to read from</span><br><span class="hljs-comment"> * @size: size of the data chunk</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Safely read from address @src to the buffer at @dst.  If a kernel fault</span><br><span class="hljs-comment"> * happens, handle that and return -EFAULT.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We ensure that the copy_from_user is executed in atomic context so that</span><br><span class="hljs-comment"> * do_page_fault() doesn&#x27;t attempt to take mmap_sem.  This makes</span><br><span class="hljs-comment"> * probe_kernel_read() suitable for use within regions where the caller</span><br><span class="hljs-comment"> * already holds mmap_sem, or other locks which nest inside mmap_sem.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">long</span> __weak <span class="hljs-title function_">probe_kernel_read</span><span class="hljs-params">(<span class="hljs-type">void</span> *dst, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> size)</span><br>    __<span class="hljs-title function_">attribute__</span><span class="hljs-params">((alias(<span class="hljs-string">&quot;__probe_kernel_read&quot;</span>)))</span>;<br><br><span class="hljs-type">long</span> __probe_kernel_read(<span class="hljs-type">void</span> *dst, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> size)<br>&#123;<br>        <span class="hljs-type">long</span> ret;<br>        <span class="hljs-type">mm_segment_t</span> old_fs = get_fs();<br><br>        set_fs(KERNEL_DS);<br>        pagefault_disable();<br>        ret = __copy_from_user_inatomic(dst,<br>                        (__force <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *)src, size);<br>        pagefault_enable();<br>        set_fs(old_fs);<br><br>        <span class="hljs-keyword">return</span> ret ? -EFAULT : <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL_GPL(probe_kernel_read);<br></code></pre></td></tr></table></figure><h3 id="3-内核驱动获取符号地址"><a href="#3-内核驱动获取符号地址" class="headerlink" title="(3)内核驱动获取符号地址"></a>(3)内核驱动获取符号地址</h3><p>符号存在于&#x2F;proc&#x2F;kallsyms 文件中，可以通过kallsyms_lookup_name获取其符号的地址。在内核版本 2.6.33 - 5.7.0 可以用kallsyms_lookup_name来获取该函数的地址。在内核2.6.33 以下和 5.7.0 以上可以用 kprobe 来获取该函数的地址</p><p>kallsyms_lookup_name是内核API，源码如下：</p><p>使用kallsyms_lookup_name函数需要<code>#include &lt;linux/kallsyms.h&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* Lookup the address for this symbol. Returns 0 if not found. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">kallsyms_lookup_name</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>        <span class="hljs-type">char</span> namebuf[KSYM_NAME_LEN];<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> i;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> off;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, off = <span class="hljs-number">0</span>; i &lt; kallsyms_num_syms; i++) &#123;<br>                off = kallsyms_expand_symbol(off, namebuf, ARRAY_SIZE(namebuf));<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(namebuf, name) == <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">return</span> kallsyms_sym_address(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> module_kallsyms_lookup_name(name);<br>&#125;<br>EXPORT_SYMBOL_GPL(kallsyms_lookup_name);<br></code></pre></td></tr></table></figure><p>上述函数可以使用符号名找到在内核中的地址，使用该方法可以使用内核中未导出的内核函数。如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * text_poke - Update instructions on a live kernel</span><br><span class="hljs-comment"> * @addr: address to modify</span><br><span class="hljs-comment"> * @opcode: source of the copy</span><br><span class="hljs-comment"> * @len: length to copy</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Only atomic text poke/set should be allowed when not doing early patching.</span><br><span class="hljs-comment"> * It means the size must be writable atomically and the address must be aligned</span><br><span class="hljs-comment"> * in a way that permits an atomic write. It also makes sure we fit on a single</span><br><span class="hljs-comment"> * page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">text_poke</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *opcode, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br>        <span class="hljs-type">char</span> *vaddr;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">pages</span>[2];</span><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * While boot memory allocator is runnig we cannot use struct</span><br><span class="hljs-comment">         * pages as they are not yet initialized.</span><br><span class="hljs-comment">         */</span><br>        BUG_ON(!after_bootmem);<br><br>        lockdep_assert_held(&amp;text_mutex);<br><br>        <span class="hljs-keyword">if</span> (!core_kernel_text((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)addr)) &#123;<br>                pages[<span class="hljs-number">0</span>] = vmalloc_to_page(addr);<br>                pages[<span class="hljs-number">1</span>] = vmalloc_to_page(addr + PAGE_SIZE);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                pages[<span class="hljs-number">0</span>] = virt_to_page(addr);<br>                WARN_ON(!PageReserved(pages[<span class="hljs-number">0</span>]));<br>                pages[<span class="hljs-number">1</span>] = virt_to_page(addr + PAGE_SIZE);<br>        &#125;<br>        BUG_ON(!pages[<span class="hljs-number">0</span>]);<br>        local_irq_save(flags);<br>        set_fixmap(FIX_TEXT_POKE0, page_to_phys(pages[<span class="hljs-number">0</span>]));<br>        <span class="hljs-keyword">if</span> (pages[<span class="hljs-number">1</span>])<br>                set_fixmap(FIX_TEXT_POKE1, page_to_phys(pages[<span class="hljs-number">1</span>]));<br>        vaddr = (<span class="hljs-type">char</span> *)fix_to_virt(FIX_TEXT_POKE0);<br>        <span class="hljs-built_in">memcpy</span>(&amp;vaddr[(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)addr &amp; ~PAGE_MASK], opcode, len);<br>        clear_fixmap(FIX_TEXT_POKE0);<br>        <span class="hljs-keyword">if</span> (pages[<span class="hljs-number">1</span>])<br>                clear_fixmap(FIX_TEXT_POKE1);<br>        local_flush_tlb();<br>        sync_core();<br>        <span class="hljs-comment">/* Could also do a CLFLUSH here to speed up CPU recovery; but</span><br><span class="hljs-comment">           that causes hangs on some VIA CPUs. */</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>                BUG_ON(((<span class="hljs-type">char</span> *)addr)[i] != ((<span class="hljs-type">char</span> *)opcode)[i]);<br>        local_irq_restore(flags);<br>        <span class="hljs-keyword">return</span> addr;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>text_poke</code>为非导出函数，在驱动中无法使用，可以使用<code>kallsyms_lookup_name</code>获取函数地址并赋值给函数指针，便可以使用该函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> *(*text_poke_fn)(<span class="hljs-type">void</span> *addr, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *opcode, <span class="hljs-type">size_t</span> len);<br>text_poke_fn = (<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>))kallsyms_lookup_nama(<span class="hljs-string">&quot;text_poke&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-proc-kallsyms&quot;&gt;&lt;a href=&quot;#一、-proc-kallsyms&quot; class=&quot;headerlink&quot; title=&quot;一、&amp;#x2F;proc&amp;#x2F;kallsyms&quot;&gt;&lt;/a&gt;一、&amp;#x2F;proc&amp;#x2F;kallsyms&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>OOM</title>
    <link href="http://example.com/posts/OOM.html"/>
    <id>http://example.com/posts/OOM.html</id>
    <published>2024-11-24T15:37:20.000Z</published>
    <updated>2024-11-24T15:37:36.757Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux操作系统中，OOM（Out of Memory）指的是系统可用内存耗尽，无法再为任何进程分配所需的内存，从而导致系统必须采取某些极端措施的情况。当系统面临OOM时，可能会选择杀死某些进程以释放内存，这是通过Linux内核的OOM Killer机制实现的。</p><h3 id="OOM发生的原因："><a href="#OOM发生的原因：" class="headerlink" title="OOM发生的原因："></a>OOM发生的原因：</h3><ol><li><strong>物理内存不足</strong>：实际物理内存资源耗尽，无法满足所有进程的内存需求，尤其是当大量进程同时运行且内存占用较大时更容易出现。</li><li><strong>交换空间不足</strong>：即使有交换分区（Swap），但当系统试图将物理内存中的页换出到交换空间时，发现交换空间也已满，无法继续进行内存交换。</li><li><strong>内存泄漏</strong>：应用程序存在内存泄漏问题，随着时间推移不断消耗内存，直至耗尽整个系统资源。</li><li><strong>一次性加载大量数据</strong>：某个进程瞬间请求大量内存，超出了系统所能提供的范围。</li><li><strong>内存限制</strong>：在容器环境下，单个容器可能存在严格的内存限制，超出限制后也会触发OOM。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Linux操作系统中，OOM（Out of Memory）指的是系统可用内存耗尽，无法再为任何进程分配所需的内存，从而导致系统必须采取某些极端措施的情况。当系统面临OOM时，可能会选择杀死某些进程以释放内存，这是通过Linux内核的OOM Killer机制实现的。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ftpget</title>
    <link href="http://example.com/posts/ftpget.html"/>
    <id>http://example.com/posts/ftpget.html</id>
    <published>2024-11-24T15:31:27.000Z</published>
    <updated>2024-11-24T15:35:20.228Z</updated>
    
    <content type="html"><![CDATA[<p>ftpget -u  username -p passwd IP  source  target</p><p>ftpput -u  username -p passwd IP  target  source</p><p>举个例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ftpput -u zhangsan -p 000000 192.168.10.10 target.txt source.txt   <br>// 将本地的 source.txt 文件传输到 192.168.10.10 /home/zhangsan/ 目录下，并以target.txt 保存<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ftpget -u  username -p passwd IP  source  target&lt;/p&gt;
&lt;p&gt;ftpput -u  username -p passwd IP  target  source&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>scp</title>
    <link href="http://example.com/posts/scp.html"/>
    <id>http://example.com/posts/scp.html</id>
    <published>2024-11-24T15:30:53.000Z</published>
    <updated>2024-11-24T15:34:55.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、从本地复制到远程主机"><a href="#一、从本地复制到远程主机" class="headerlink" title="一、从本地复制到远程主机"></a>一、从本地复制到远程主机</h2><p>命令格式如下：</p><p>scp &#x2F;path&#x2F;to&#x2F;local&#x2F;file.txt user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;</p><p>这会将本地的 <code>file.txt</code> 文件复制到远程主机 <code>remote_host</code> 的 <code>/path/on/remote/</code> 目录下。</p><h3 id="二、从远程主机复制到本地"><a href="#二、从远程主机复制到本地" class="headerlink" title="二、从远程主机复制到本地"></a>二、从远程主机复制到本地</h3><p>（1）命令解释<br>命令格式如下：scp user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;file.txt &#x2F;path&#x2F;to&#x2F;local&#x2F;</p><p>这会将远程主机 <code>remote_host</code> 的 <code>/path/on/remote/file.txt</code> 文件复制到本地的 <code>/path/to/local/</code> 目录下。</p><p>（2）实际操作<br>实操命令如下：<br>scp <a href="mailto:&#114;&#x6f;&#111;&#116;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#x2e;&#49;&#48;&#x39;">&#114;&#x6f;&#111;&#116;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#x2e;&#49;&#48;&#x39;</a>:&#x2F;home&#x2F;DataBaseMysql.zip .&#x2F;</p><p>这会将远程主机 <code>192.168.1.109</code> 的&#x2F;home&#x2F;DataBaseMysql.zip 文件复制到本地的当前目录下</p><h3 id="三、递归复制目录"><a href="#三、递归复制目录" class="headerlink" title="三、递归复制目录"></a>三、递归复制目录</h3><p>实操命令如下：scp -r user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;directory &#x2F;path&#x2F;to&#x2F;local&#x2F;</p><p>这会将远程主机 <code>remote_host</code> 的 <code>/path/on/remote/directory</code> 目录及其所有内容复制到本地的 <code>/path/to/local/</code> 目录下。</p><h3 id="四、指定-SSH-端口"><a href="#四、指定-SSH-端口" class="headerlink" title="四、指定 SSH 端口"></a>四、指定 SSH 端口</h3><p>如果远程主机的 SSH 端口不是默认的 22，可以使用 <code>-P</code> 选项指定端口：</p><p>scp -P 2222 user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;file.txt &#x2F;path&#x2F;to&#x2F;local&#x2F;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、从本地复制到远程主机&quot;&gt;&lt;a href=&quot;#一、从本地复制到远程主机&quot; class=&quot;headerlink&quot; title=&quot;一、从本地复制到远程主机&quot;&gt;&lt;/a&gt;一、从本地复制到远程主机&lt;/h2&gt;&lt;p&gt;命令格式如下：&lt;/p&gt;
&lt;p&gt;scp &amp;#x2F;path&amp;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
