<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mengchao666</title>
  
  <subtitle>个人记录</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-24T16:03:59.816Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态链接库、静态链接库</title>
    <link href="http://example.com/posts/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E3%80%81%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93.html"/>
    <id>http://example.com/posts/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E3%80%81%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93.html</id>
    <published>2024-11-24T16:03:41.000Z</published>
    <updated>2024-11-24T16:03:59.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是链接库"><a href="#一、什么是链接库" class="headerlink" title="一、什么是链接库"></a>一、什么是链接库</h1><p>有时候我们对外提供功能的时候，可能不希望对方看到源码，我们就可以制作成库文件，把库文件和头文件给到对方就可以达到提供功能又不暴露源码的目的。链接库就是指将库文件编译后打包为一个二进制文件，这些二进制文件会在程序调用的时候加载到内存中。实际上，一个或多个源文件编译为目标文件后，这个文件中所引用的外部的符号需要通过链接来找到这部分缺失的地址。而链接的方式又分为两种，如果是在生成可执行文件之前就已经把所有的链接操作完成了，这种链接称为静态链接，这种库文件称为静态链接库；如果是在程序执行的时候才进行链接，这种称为动态链接，对应的库文件称为动态链接库。也正因为如此，使用静态库时生成的可执行文件是可以独立运行的，因为他不再需要外部的内容，而动态库编译生成的可执行文件就无法单独运行，因为他在运行时，才会去链接所引用的外部地址。</p><h2 id="1-静态链接库"><a href="#1-静态链接库" class="headerlink" title="1. 静态链接库"></a>1. 静态链接库</h2><p>静态库会直接加载到代码段，他和所有的目标文件一起链接成可执行文件，生成可执行文件后可以独立运行。但是，正因为静态库会直接加载到内存的代码段，可执行文件的内部都拷贝了所有目标文件和静态库的指令和数据，编译生成的可执行文件会比较大。并且，如果整个系统中有多个链接统一静态库的可执行文件时，每个可执行文件都要拷贝一份静态库的指令和数据，这就造成了空间浪费，因为他们拷贝的数据都是同样的内容。最后，如果一旦静态库文件有代码更新，就需要重新编译链接重新生成整个可执行文件，更新升级麻烦。在 Linux 系统中，静态链接库文件的名称通常为 libxxx .a，在 Windows 系统中，静态链接库文件的后缀名为 .lib。</p><h2 id="2-动态链接库"><a href="#2-动态链接库" class="headerlink" title="2. 动态链接库"></a>2. 动态链接库</h2><p>其实，动态库这个称呼本身是对 Windows 平台上动态链接所用的库文件的一种称呼，在 Linux 下，一般称为共享库。动态库是在运行时加载到内存的共享库段，这样，如果很多程序都要用到静态库的时候，就会节省大量内存，因为它不像静态库那样加载到代码段，而是是在运行时载入内存的共享库段，当多个程序要用到同一个动态库时，所有程序可以共享这个共享库段的指令和数据。动态链接的实现是这样的，在编译时首先由静态链接器将所有的目标文件链接为一个可执行文件，等到程序运行时会将要用到的动态库加载到内存的共享库段，由动态链接器完成可执行文件和动态库文件的链接工作，可以理解为按需载入内存（在需要用到的时候，才会载入内存）。动态库大大方便了程序的升级和更改，只要用新的动态库文件替换旧的动态库文件即可，在运行时，会自动连接新的库文件。但是正因为动态库运行时载入的这个特点，使用动态库的可执行文件在运行时，会略慢一些，但整体来说，运行速度的性能损失，远远小于内存节省带来的收益。在Linux系统中，动态链接库的名称通常为 libxxx.so，在 Windows 系统中，动态链接库的后缀名为 .dll。GCC 编译器在生成可执行文件时，默认会优先使用动态链接库完成链接，如果当前系统环境中没有程序文件所需要的动态链接库，GCC 便会选择静态链接库进行静态链接。如果两种库文件都没有找到，则链接失败。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100407187-924921633.png"></p><h2 id="3-库文件与头文件"><a href="#3-库文件与头文件" class="headerlink" title="3. 库文件与头文件"></a>3. 库文件与头文件</h2><p>我们在发布库文件的同时，要将库文件和头文件一起发布，头文件中存储了变量、函数或者类等这些功能模块的声明部分，库文件中存储了各模块具体的实现部分。也就是说，头文件中定义了调用库文件中功能模块的接口。头文件的存在也实现了这样一种功能，当我们对外提供功能时，可以通过库文件来隐藏源码实现，功能的使用方只需要根据头文件所提供的接口来调用功能模块即可。</p><h2 id="4-库文件的引用"><a href="#4-库文件的引用" class="headerlink" title="4. 库文件的引用"></a>4. 库文件的引用</h2><p>当我们使用 GCC 编译和链接程序时，GCC 默认会链接 libc.a 或者 libc.so这两个标准库，但是对于其他的库（非标准库、第三方库等），就需要手动去添加链接库。通过 GCC -l 选项来指定库名，直接在 -l 后面加库名即可。（ -l 是小写的 L ）<br />正常情况下，我们指定了要使用的库名时，GCC 会自动在标准库目录中搜索文件，例如在CentOS中是 &#x2F;usr&#x2F;lib 目录。但是，如果想链接位于其它目录中的库，比如说我们自己建的库，或者我们要引用别人提供的库，就需要在编译时显示指定库的路径。指定方法有三种：<br />① 像指定普通头文件的路径一样，为 GCC 显示指定该库文件的完整路径与文件名 -I &#x2F;目录名 。<br />② 通过 GCC 的 -L 选项，为GCC增加搜索目录，可以使用多个 -L 选项，或者在一个选项内使用冒号 : 分割来指定多个搜索路径。<br />③ 把库文件所在的目录加到环境变量 LIBRARYPATH 中。</p><h1 id="二、自己动手制作静态链接库"><a href="#二、自己动手制作静态链接库" class="headerlink" title="二、自己动手制作静态链接库"></a>二、自己动手制作静态链接库</h1><p>准备工作，共准备4个文件，目录结构如下</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100406820-895205743.png"></p><p>my_print.h 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _TEST_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _TEST_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_int</span><span class="hljs-params">(<span class="hljs-type">int</span>* array, <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_char</span><span class="hljs-params">(<span class="hljs-type">char</span>* array, <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_string</span><span class="hljs-params">(<span class="hljs-type">char</span>* array[], <span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_hello</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>my_print.c 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_print.h&quot;</span></span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_int</span><span class="hljs-params">(<span class="hljs-type">int</span>* array, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;   <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, array[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_char</span><span class="hljs-params">(<span class="hljs-type">char</span>* array, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>  i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, array[i]);<br>    &#125;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_array_string</span><span class="hljs-params">(<span class="hljs-type">char</span>* array[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;array: &quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, array[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>main.c 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_print.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a1[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>       a1[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">print_array_int</span>(a1, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">print_hello</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>print_hello.c 文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_print.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_hello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello Linux ...\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-静态库的制作"><a href="#1-静态库的制作" class="headerlink" title="1. 静态库的制作"></a>1. 静态库的制作</h2><p>① 首先把所有 .c 文件编译为 .o 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -c *<span class="hljs-selector-class">.c</span> -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100406469-1794039349.png"></p><p>一定要从 .o 文件去生成 .a 文件，否则即使你生成了库，在使用时也可能出现未知的错误。<br />② 将 .o 文件打包为 .a 文件<br />这一步需要使用 ar 工具来完成。ar 工具是用来创建, 修改和提取档案的工具，ar 是 archive 的缩写。归档是指将多个文件（或一个文件）放到单个文件中，不进行其他额外的操作。也就是说，归档并不等同于压缩，压缩会使文件的大小减小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ar rcs libmprint.a *.o<br></code></pre></td></tr></table></figure><ul><li>参数 r ：在库中插入模块（替换）。当插入的模块名已经在库中存在，则替换同名的模块。如果若干模块中有一个模块在库中不存在，ar 显示一个错误消息，并不替换其他同名模块。默认的情况下，新的成员增加在库的结尾处，可以使用其他任选项来改变增加的位置。</li><li>参数 c ：创建一个库。不管库是否存在，都将创建。</li><li>参数 s ：创建目标文件索引，这在创建较大的库时能加快时间。如果不需要创建索引，可改成大写 S 参数。如果 .a 文件缺少索引，可以使用 ranlib 命令添加）。</li></ul><p>一般我们命令静态库的时候是这样的，前面是 lib 中间加上我们自己给静态库文件的名称，后面加后缀 .a ，也就是 libxxx.a ，实际上， xxx 才是静态库文件的名称。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100406102-983046895.png"></p><p>可以查看一下生成的 libmprint.a 的内容，一堆乱码</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100400726-123184020.png"></p><p>我们可以用 nm 命令查看库文件的信息，可以看到它是由 my_print.o 和 print_hello.o 生成的。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100400331-1423504129.png"></p><h2 id="2-静态库的使用"><a href="#2-静态库的使用" class="headerlink" title="2. 静态库的使用"></a>2. 静态库的使用</h2><p>静态库的使用方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -o exe -lmyprint -L ../lib/ -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p>首先对上面的命令进行分解一下，-lmyprint 用于指定链接库的名字，我们上面生成了一个名为 libmprint.a 的静态库，把前缀后缀去掉留下中间的名字即可；-L …&#x2F;lib&#x2F; 指定静态库的搜索目录，不指定的会，编译器只会去默认的链接库搜索路径寻找；-I …&#x2F;header&#x2F; 这个就比较熟悉了，指定头文件的路径。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog20241125000251.png"></p><p>我们再发布的时候，只需要把 header 和 lib 发布给别人即可</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100359610-349123771.png"></p><h1 id="三、自己动手制作动态链接库"><a href="#三、自己动手制作动态链接库" class="headerlink" title="三、自己动手制作动态链接库"></a>三、自己动手制作动态链接库</h1><h2 id="1-动态库的制作"><a href="#1-动态库的制作" class="headerlink" title="1. 动态库的制作"></a>1. 动态库的制作</h2><p>① 编译生成与位置无关的 .o 文件<br />动态共享库是在运行的时候才加载的，它加载到内存的共享库段，用完后就释放，所以要编译为与位置无关的。这里要用到GCC 的 -fPIC 选项参数，该选项表示编译为位置独立的代码，如果不用这个选项的话编译后的代码是位置相关的，所以动态载入的时候会通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。在静态链接库中，可执行文件在链接时就知道每一行代码、每一个变量会被放到线性地址空间的什么位置，因此这些地址可以都作为常数写到代码里面。对于动态库，只有加载的时候才知道。也就是说，动态链接库要编译为与位置无关的代码，这样只有在运行时才直到代码的位置。而静态库是在生成可执行文件之前，就直接把代码加载到内存的代码段了，代码的位置等信息也就已经知道了，所以不需要生成与位置无关的代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -fPIC -c *<span class="hljs-selector-class">.c</span> -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100359252-1811276820.png"></p><p>② 将 .o 文件打包<br />这里要用到 GCC 的 -shared 选项，该选项指定生成动态连接库（让连接器生成T类型的导出符号表，有时候也生成弱连接W类型的导出符号），如果不用该标志的话外部程序将无法连接。<br />可以在动态库文件名后面加版本号 libxxx.so.主版本号.副版本号 ，比如 libmdprint.so.1.1 表示我这是 1.1 版本的动态库，文件后缀后面的数字就是版本号的意思。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">gcc -<span class="hljs-keyword">shared</span> *.o -o libmdrint.so<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100358934-453919108.png"></p><h2 id="2-动态库的使用"><a href="#2-动态库的使用" class="headerlink" title="2. 动态库的使用"></a>2. 动态库的使用</h2><h3 id="（1）加载动态库"><a href="#（1）加载动态库" class="headerlink" title="（1）加载动态库"></a>（1）加载动态库</h3><p>使用动态库的命令和使用静态库的命令一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -o exe -lmdrint -L ../lib/ -<span class="hljs-selector-tag">I</span> ../<span class="hljs-selector-tag">header</span>/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100358477-960135349.png"></p><h3 id="（2）“加载共享库出错”的解决方法"><a href="#（2）“加载共享库出错”的解决方法" class="headerlink" title="（2）“加载共享库出错”的解决方法"></a>（2）“加载共享库出错”的解决方法</h3><p>这个是时候，虽然我们已经生成了可执行文件，但是当我们运行可执行文件的时候，可能会出现这样的错误</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100358144-366040362.png"></p><p>我们可以通过命令 ldd 来查看一下可执行文件的链接情况</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100357744-493835779.png"></p><p>在我们自己引入的库 libmdrint.so 一栏显示 “not found” ，在默认情况下，我们自己引入的动态库是无法使用的，需要进行一些配置。这里提供以下几种解决方法。</p><h4 id="①-在系统库路径下建立软链接"><a href="#①-在系统库路径下建立软链接" class="headerlink" title="① 在系统库路径下建立软链接"></a>① 在系统库路径下建立软链接</h4><p>前面我们已经介绍了，GCC 会默认去系统库路径下搜索库文件，所以只要我们把自己的库文件放到这个目录下就可以了，系统库的路径是 &#x2F;usr&#x2F;lib 或 &#x2F;lib 。但是我们实际操作的时候，可能无法把文件拷贝到这两个路径下，我们可以在系统库路径下建立一个软链接来指向我们的库文件（软链接相关知识请参考本人 Linux 专栏文章《【Linux王者之路基础篇：基本命令与基础知识】Linux常用shell命令（及相关知识）详解与用法演示》）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /home/qq/dm/dm_lib/lib/libmdrint.so /usr/lib/libmdrint.so<br></code></pre></td></tr></table></figure><p>这里第一个路径也就是我们自己的动态库文件所在目录，一定要用绝对路径（如果使用相对路径，会找不到该路径），第二个路径是系统库的路径。</p><h4 id="②-配置环境变量"><a href="#②-配置环境变量" class="headerlink" title="② 配置环境变量"></a>② 配置环境变量</h4><p>实际上， ld 链接器在寻找库路径的时候，都是通过一个环境变量 LD_LIBRARY_PATH 来寻找的，我们可以打印看一下这个环境变量</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100357370-1446409994.png"></p><p>我们可以通过 export 命令来给环境变量增加一个路径，只需要把自己的路径加进去即可，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/home/qq/dm/dm_lib/lib/:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br></code></pre></td></tr></table></figure><p>我们知道在 shell 下直接把绝对路径加到环境变量中，只是一种临时的环境变量，当关机再次开机的时候，就会失效，如果想要永久有效，可以修改配置文件。我们可以把上面这条命令放到 .bashrc 文件中。<br />在我的 Linux 专栏文章中，已经不只一次提到 .bashrc 这个配置文件了，其实 Linux 每次开机都会执行这个配置文件，我们实现环境变量永久有效的原理就是，Linux 每次开机都会执行 .bashrc 配置文件，而配置文件中包含设置环境变量的命令，所以每次开机都会配一下环境变量，这样就达到了环境变量永久有效的目的。.bashrc 配置文件在家目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100351951-1293865682.png"></p><h4 id="③-修改-ld-so-加载器的配置文件-ld-so-conf"><a href="#③-修改-ld-so-加载器的配置文件-ld-so-conf" class="headerlink" title="③ 修改 ld.so 加载器的配置文件 ld.so.conf"></a>③ 修改 ld.so 加载器的配置文件 ld.so.conf</h4><p>这里先介绍几个概念：</p><ul><li>ld链接器 ：gcc 可以在编译周期传递参数，指定需要链接的库文件，生命周期是在 compile-time。</li><li>ld.so动态链接器&#x2F;加载器，程序运行的时候会根据指定的路径去加载指定的库，生命周期是在 run-time。</li><li>ld.so加载器及配置文件ld.so.conf：指定动态链接库的搜索路径（也可以通过配置环境变量$LD_LIBRARY_PATH 来指定程序运行时的动态库.so文件的搜索路径）。使用 ldconfig 就可以将 ld.so.conf 中的指定目录的库文件加载到内存中，并记录在&#x2F;etc&#x2F;ld.so.cache文件中。配置文件 &#x2F;etc&#x2F;ld.so.conf 记录了编译时使用的动态链接库的路径，在默认情况下，编译器只会使用 &#x2F;lib 和 &#x2F;usr&#x2F;lib 这两个目录下的库文件，通过这个配置文件可以增加我们自己的动态库文件搜索路径。</li></ul><p>使用 vim 编辑器打开配置文件，把路径放进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/ld.so.conf<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100351591-1560610303.png"></p><p>放入路径之后，还要在 shell 下执行一条命令，使刚才的配置生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo ldconfig -v<br></code></pre></td></tr></table></figure><p>不管使用上面三种方法的哪种，都可以使动态库正常加载到可执行文件中，我们再次使用 ldd 命令查看 exe 文件，可以看到，我们的动态库 libmdrint.so 后面由原来的 “not found” 变成了一个路径，这说明加载器现在可以找到动态库的路径了，可执行文件 exe 也就可以运行了。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog458378-20231222100351053-1224186757.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、什么是链接库&quot;&gt;&lt;a href=&quot;#一、什么是链接库&quot; class=&quot;headerlink&quot; title=&quot;一、什么是链接库&quot;&gt;&lt;/a&gt;一、什么是链接库&lt;/h1&gt;&lt;p&gt;有时候我们对外提供功能的时候，可能不希望对方看到源码，我们就可以制作成库文件，把库文件和头文</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>预处理、编译、汇编、链接</title>
    <link href="http://example.com/posts/%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E3%80%81%E9%93%BE%E6%8E%A5.html"/>
    <id>http://example.com/posts/%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%BC%96%E8%AF%91%E3%80%81%E6%B1%87%E7%BC%96%E3%80%81%E9%93%BE%E6%8E%A5.html</id>
    <published>2024-11-24T15:56:01.000Z</published>
    <updated>2024-11-24T15:56:19.559Z</updated>
    
    <content type="html"><![CDATA[<p>C语言经典的 “hello world ” 程序，伴随着每个程序员一起步入编程世界的大门。从编写、编译到运行，看到屏幕上输出的“hello world ”，那么你知道它都经历了什么吗？今天我们就来聊聊这个话题。</p><p>一、从hello.c聊起<br>hello world.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello,world!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在linux下，使用 gcc 编译hello.c源文件，会在当前目录下默认生成 a.out 可执行文件，在终端输出hello，world！。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">$ gcc hello.c<br>$ ./a.out<br>$ hello,world!<br></code></pre></td></tr></table></figure><p>预编译器、汇编器as、链接器ld，实际上gcc 命令只是对这些不同程序的封装，根据不同的参数去调用不同的程序。</p><p>从 hello.c 到可执行文件的全过程，可分为4个步骤：</p><p>1、预处理<br>gcc -E hello.c -o hello.i 得到预处理文件，其中，-E 表示只进行预编译。<br>源文件在预编译阶段会被编译器生成.i文件，主要处理源代码文件中以“#”开头的预编译指令。如：宏定义展开，将被包含的文件插入到该编译指令的位置等。</p><p>2、编译<br>gcc -S hello.i -o hello.s 得到汇编文件，其中，-S 表示生成汇编文件。<br>编译就是把预处理完的文件，进行语法分析、词法分析、语义分析及优化后生成相应的汇编代码文件，这个过程是整个程序构建的核心过程，也是最复杂的部分。</p><p>3、汇编<br>as hello.s -o hello.o 或者 gcc -c hello.s -o hello.o，其中，-c 表示只编译不链接。<br>将汇编代码文件转变成机器可以执行的指令文件，即目标文件。也可以直接使用：gcc -c hello.c -o hello.o 经过预处理、编译、汇编直接输出目标文件。<br>为什么汇编器不直接生成可执行程序，而是一个目标文件呢？为什么要链接？这个我们后面会详细讨论。</p><p>4、链接<br>随着代码量的增多，所有代码若是都放在同一个文件里，那将是一场灾难。现代大型软件，动辄由成千上万的模块组成，每个模块相互依赖又相互独立。将这些模块组装起来的过程就是链接。<br>这些模块如何形成一个单一的程序呢？无非就是两种方式：1、模块间的函数调用；2、模块间的变量访问。函数访问必须知道函数地址，变量访问必须知道变量地址，所以终归到底就是一种方式，不同模块间符号的引用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C语言经典的 “hello world ” 程序，伴随着每个程序员一起步入编程世界的大门。从编写、编译到运行，看到屏幕上输出的“hello world ”，那么你知道它都经历了什么吗？今天我们就来聊聊这个话题。&lt;/p&gt;
&lt;p&gt;一、从hello.c聊起&lt;br&gt;hello wo</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>内存申请函数</title>
    <link href="http://example.com/posts/%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E5%87%BD%E6%95%B0.html"/>
    <id>http://example.com/posts/%E5%86%85%E5%AD%98%E7%94%B3%E8%AF%B7%E5%87%BD%E6%95%B0.html</id>
    <published>2024-11-24T15:55:07.000Z</published>
    <updated>2024-11-24T15:55:29.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、malloc"><a href="#一、malloc" class="headerlink" title="一、malloc"></a>一、malloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针；</p><p>如果开辟成功，返回一个指向开辟的空间的首地址的指针；</p><p>如果开辟失败，返回一个NULL指针，因此malloc函数的返回值，一定要做检查；</p><p>返回值的类型时void*，所以malloc函数并不知道开辟空间的类型，具体在使用时由使用者自己决定（强制转换）；</p><p>如果参数size为0，malloc函数的行为是标准未定义的，取决于编译器；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>  <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(arr));<span class="hljs-comment">//动态内存开辟；</span><br>  <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>    perror(<span class="hljs-string">&quot;malloc&quot;</span>);<span class="hljs-comment">//是空指针则输出错误代码；</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//终止程序；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    *(p + i) = i;<span class="hljs-comment">//赋值；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<span class="hljs-comment">//输出</span><br>  &#125;<br> <br>  <span class="hljs-comment">//没有使用 动态内存释放函数 free ，此时如果程序继续运行，则被malloc函数开辟的空间不会被回收；</span><br>  <span class="hljs-comment">//但只要程序退出，系统会自动回收内存空间；</span><br>  <span class="hljs-comment">//正常情况下，由动态内存开辟函数所开辟的内存空间，在使用完成后必须被释放并销毁；</span><br>  <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//将p空间中的值销毁；</span><br>  p = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//p不再指向有效空间；</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、calloc"><a href="#二、calloc" class="headerlink" title="二、calloc"></a>二、calloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> num,<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>函数的功能是为num个大小为size的元素开辟一块空间，并将空间的每个字节初始化为0；</p><p> 与函数malloc的区别在于，calloc会在返回地址前把申请的空间的每个字节初始化为全0；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">10</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//动态内存开辟；</span><br>  <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>    perror(<span class="hljs-string">&quot;calloc&quot;</span>);<span class="hljs-comment">//是空指针则输出错误代码；</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//终止程序；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<span class="hljs-comment">//输出为：0 0 0 0 0 0 0 0 0 0；</span><br>  &#125;<br>  <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//将p空间中的值销毁；</span><br>  p = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//p不再指向有效空间；</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、realloc"><a href="#三、realloc" class="headerlink" title="三、realloc"></a>三、realloc</h2><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr,<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>ptr是需要调整的内存地址，size是调整之后的空间大小；</p><p>返回值为调整后的内存的起始地址；</p><p>函数在调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的空间；</p><p>&#x2F;&#x2F;对于内存空间的调整，存在两种情况：</p><p>1.原有空间之后的空间足够满足新空间的开辟；</p><p>2.原有空间之后没有足够大的空间满足新空间的开辟；</p><p>&#x2F;&#x2F;函数调整失败的情况：</p><p>1.realloc失败的时候，返回NULL；</p><p>2.realloc失败的时候，原来的内存不改变，不会释放也不会移动；</p><p>&#x2F;&#x2F;注意使用realloc函数改变或开辟空间，最好使用新的变量接收，再将新变量赋值给旧变量；原因是为了避免开辟空间失败返回空指针，导致的旧空间内存泄漏(指针被置空，无法找到旧空间)；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<span class="hljs-comment">//开辟40字节空间赋予p；</span><br>  <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>    perror(<span class="hljs-string">&quot;malloc&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    *(p + i) = i + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">int</span>* ptr = <span class="hljs-built_in">realloc</span>(p, <span class="hljs-number">80</span>);<span class="hljs-comment">//扩容；此时，如果后续内存空间足够，则空间首地址不会改变，但如果后续内存空间不足，则会发现空间首地址改变，即新空间的开辟；</span><br>  <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    p = ptr;<span class="hljs-comment">//扩容成功则将扩容后的空间赋予p；</span><br>    ptr = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//ptr不再指向有效空间；</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    perror(<span class="hljs-string">&quot;realloc&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &lt; <span class="hljs-number">20</span>; i++)<span class="hljs-comment">//为扩容后的空间赋值；</span><br>  &#123;<br>    *(p + i) = i + <span class="hljs-number">1</span>;<br>  &#125;<br>  ptr = <span class="hljs-built_in">realloc</span>(p, <span class="hljs-number">40</span>);<span class="hljs-comment">//缩容； </span><br>  <span class="hljs-keyword">if</span> (ptr != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    p = ptr;<span class="hljs-comment">//缩容成功则将扩容后的空间赋予p；</span><br>    ptr = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//将ptr置空；</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<span class="hljs-comment">//为扩容后的空间赋值；</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i]);<br>  &#125;<br>  <span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//将p空间中的值销毁；</span><br>  p = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//p不再指向有效空间；</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、malloc&quot;&gt;&lt;a href=&quot;#一、malloc&quot; class=&quot;headerlink&quot; title=&quot;一、malloc&quot;&gt;&lt;/a&gt;一、malloc&lt;/h2&gt;&lt;p&gt;函数原型：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串函数</title>
    <link href="http://example.com/posts/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.html"/>
    <id>http://example.com/posts/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.html</id>
    <published>2024-11-24T15:54:08.000Z</published>
    <updated>2024-11-24T15:54:33.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、strlen"><a href="#一、strlen" class="headerlink" title="一、strlen"></a>一、strlen</h2><p>1、原型：<code>size_t strlen(char const* string);</code><br>2、功能：返回字符串 string 的长度（不包含字符串终止符NUL）<br>3、注意：size_t是一个无符号整数类型</p><h2 id="二、strcpy"><a href="#二、strcpy" class="headerlink" title="二、strcpy"></a>二、strcpy</h2><p>1、原型：<code>char *strcpy(char *dst, char const *src);</code></p><p>2、功能：将参数src字符串复制到dst参数中。如果参数src和dst在内存中出现重叠，其结果是未定义的。由于dst参数将进行修改，所以它必须是个字符数组或者是一个指向动态分配内存的数组的指针，不能使用字符串常量。返回参数dst的一份拷贝。</p><p>3、注意：</p><p>目标参数dst的以前内容将被覆盖并丢失。即使新的字符串比dst原先的内存更短，由于新字符串是以NUL字符结尾，所以老字符串最后剩余的几个字符也会被有效的删除。如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。所以必须保证目标字符数组的空间足以容纳需要复制的字符串。</p><h2 id="三、strncpy"><a href="#三、strncpy" class="headerlink" title="三、strncpy"></a>三、strncpy</h2><p>1、原型：<code>char *strncpy(char *dst, char const *src, size_t len);</code></p><p>2、功能：和strcpy一样，strncpy把源字符串的字符复制到目标数组。然而，它总是 正好向dst写入len个字符。如果strlen(src)的值小于len, dst数组就用额外的NUL字节填充到len长度。如果strlen(src)的值大于或者等于len,那么只有len个字符被复制到dst中。</p><p>3、注意：strncpy调用的结果可能不是一个字符串，<strong>它的结果将不会以NUL字符结尾，</strong>  因此字符串必须以NUL字符结尾</p><h2 id="四、strcat"><a href="#四、strcat" class="headerlink" title="四、strcat"></a>四、strcat</h2><p>1、原型：<code>char *strcat(char *dst, char const *src);</code></p><p>2、功能：将一个字符串添加(连接)到另一个字符串的后面。</p><p>3、注意：src和dst的所指的内存区域不能重叠，如果发生重叠，其结果是未定义的。</p><h2 id="五、strncat"><a href="#五、strncat" class="headerlink" title="五、strncat"></a>五、strncat</h2><p>1、原型：<code>char *strncat(char *dst, char const *src, size_t len);</code></p><p>2、功能：它从src最多复制 len个字符到dst中。但是, strncat总是在结果字符串后面添加一个NUL字符。</p><p>3、注意：src和dst所指的内存区域不能重叠，并且dst必须有足够多的空间来容纳src的字符串。</p><h2 id="六、strcmp"><a href="#六、strcmp" class="headerlink" title="六、strcmp"></a>六、strcmp</h2><p>1、原型：<code>int strcmp(char const *s1, char const *s2);</code></p><p>2、功能：比较两个字符串。如果s1小于s2，strcmp函数返回一个小于零的值。如果s1大于s2，函数返回一个大于零的值。如果两个字符串相等，函数就返回零。</p><p>3、注意：由于strcmp并不修改它的任何一个参数，所以不存在溢出字符数组的危险。但是，和其他不受限制的字符串函数(strcpy, strcat)一样，strcmp函数的字符串参数也必须以一个NUL字符结尾。如果并非如此，strcmp就可能对参数后面的字符进行比较，这个比较结果将不会有什么意义。</p><h2 id="七、strncmp"><a href="#七、strncmp" class="headerlink" title="七、strncmp"></a>七、strncmp</h2><p>1、原型：<code>int strncmp(char const *s1, char const *s2, size_t len);</code></p><p> 2、功能：和strcmp一样，也用于比较两个字符串，但它最多比较 len 个字节。如果两个字符串在第 len 个字符之前存在不相等的字符，这个函数就像strcmp一样停止比较，返回结果。如果两个字符串的前len 个字符相等，函数就返回零。</p><h2 id="八、strchr、strrchr"><a href="#八、strchr、strrchr" class="headerlink" title="八、strchr、strrchr"></a>八、strchr、strrchr</h2><p>1、原型：<code>char *strchr(char const *str, int ch);</code></p><p><code>char *strrchr(char const *str, int ch);</code></p><p>2、功能：在一个字符串中查找一个特定字符。</p><p>3、注意：第2个参数是一个整型值。但是，它包含了一个字符值。strchr在字符串str中查找字符ch第一次出现的位置，找到后函数返回一个指向该位置的指针。如果该字符并不存在于str中，函数就返回一个NULL指针。strrchr的功能和strchr基本一致，只是它所返回的是一个指向字符串中该字符最后一次出现的位置(最右边那个)。</p><h2 id="九、strpbrk"><a href="#九、strpbrk" class="headerlink" title="九、strpbrk"></a>九、strpbrk</h2><p>1、原型：<code>char *strpbrk(char const *str, char const *group);</code></p><p>2、功能：这个函数返回一个指向str中第1个匹配group中任何一个字符的字符位置。如果未找到匹配，函数返回一个NULL指针。</p><h2 id="十、strstr"><a href="#十、strstr" class="headerlink" title="十、strstr"></a>十、strstr</h2><p>1、原型：<code>char *strstr(char *s1, char *s2);</code></p><p>2、功能：这个函数在s1中查找整个s2第1次出现的起始位置，并返回一个指向该位置的指针。如果s2并没有完整地出现在s1的任何地方，函数将返回一个NULL指针。如果第2个参数是一个空字符串，函数就返回s1。</p><h2 id="十一、strtok"><a href="#十一、strtok" class="headerlink" title="十一、strtok"></a>十一、strtok</h2><p>1、原型：<code>char *strtok(char *str, char const *sep);</code></p><p>2、功能：分解字符串str为一组字符串，分隔符为sep。</p><p>3、注意：如果strtok函数的第1个参数不是NULL，函数将找到字符串的第1个标记。strtok同时将保存它在字符串中的位置。如果strtok函数的第1个参数是NULL，函数就在同一个字符串中从这个被保存的位置开始像前面一样查找下一个标记。如果字符串内不存在更多的标记，strtok函数就返回一个NULL指针。在典型情况下，在第1次调用strtok时，向它传递一个指向字符串的指针。然后，这个函数被重复调用（第1个参数为NULL），直到它返回NULL为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> whitespace[] = <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-type">char</span> *token;<br>    <span class="hljs-type">char</span> line[] = <span class="hljs-string">&quot;I love you&quot;</span>;<br>    <span class="hljs-keyword">for</span> (token = strtok(line, whitespace); token !=<span class="hljs-literal">NULL</span>;<br>         token = strtok(<span class="hljs-literal">NULL</span>, whitespace)) &#123;<br>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Next token is |%s|\n&quot;</span>, token);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、strlen&quot;&gt;&lt;a href=&quot;#一、strlen&quot; class=&quot;headerlink&quot; title=&quot;一、strlen&quot;&gt;&lt;/a&gt;一、strlen&lt;/h2&gt;&lt;p&gt;1、原型：&lt;code&gt;size_t strlen(char const* string);&lt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="http://example.com/posts/%E6%8C%87%E9%92%88.html"/>
    <id>http://example.com/posts/%E6%8C%87%E9%92%88.html</id>
    <published>2024-11-24T15:53:14.000Z</published>
    <updated>2024-11-24T15:53:36.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、C语言的精髓–指针"><a href="#1、C语言的精髓–指针" class="headerlink" title="1、C语言的精髓–指针"></a>1、C语言的精髓–指针</h2><p>指针就是地址，在一定程度上可以把数组名就看成一个特殊的指针,指针也就是一个变量而已，指针全名指针变量。</p><h3 id="（1）指针数组"><a href="#（1）指针数组" class="headerlink" title="（1）指针数组"></a>（1）指针数组</h3><p>指针数组，是个数组，里边放的东西都是指针。<code>char *p[2]=&#123;&quot;china&quot;,&quot;linux&quot;&#125;;</code></p><p>仔细来说，从运算符优先级来看，<code>[]的优先级比*高，所以p先和[]结合</code>。所以这就是个数组，再与指针结合，所以叫指针数组。 二重指针可以指向指针数组。</p><h3 id="（2）数组指针"><a href="#（2）数组指针" class="headerlink" title="（2）数组指针"></a>（2）数组指针</h3><p>数组指针，是个指针，指向数组的指针.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-type">int</span> (*p)[<span class="hljs-number">5</span>]=a;        <span class="hljs-comment">//指向二维数组 </span><br><span class="hljs-type">int</span> b[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 多维数组 int(*q)[3][4] = b;</span><br></code></pre></td></tr></table></figure><p>这里指针是在()中放着，())和[]优先级都是最高的，结合性是从左向右，所以先与*结合，这是个指针，然后与[]结合，就是指针数组。</p><h3 id="（3）函数指针"><a href="#（3）函数指针" class="headerlink" title="（3）函数指针"></a>（3）函数指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> (*p)(<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> b);<span class="hljs-comment">// 函数指针p指向返回值类型为int的，两个参数为int和char的函数 使用方法如下， p(a,b); 或者 (*p)(a,b);</span><br></code></pre></td></tr></table></figure><p>void *类型可以指向任何一个类型的指针</p><p><code>void (*signal(int sig, void (*func) (int))) (int)</code></p><p><strong>signal仍然是一个函数</strong>，他返回一个函数指针，这个指针指向的函数没有返回值，只有一个int类型的参数</p><h3 id="（4）二维数组"><a href="#（4）二维数组" class="headerlink" title="（4）二维数组"></a>（4）二维数组</h3><p><code>a[5][7];//用指针访问就是*（*（p+5）+7） int (*p)[7]=a;</code></p><h3 id="（5）字符数组与指向字符串指针的问题"><a href="#（5）字符数组与指向字符串指针的问题" class="headerlink" title="（5）字符数组与指向字符串指针的问题"></a>（5）字符数组与指向字符串指针的问题</h3><p>其中<code>char *p=&quot;linux&quot;</code> 这种情况字符串Linux只存在于只读数据段中（rodata），所以p所指向的内容不可以被更改，如<code>*（p+1）=a;</code>这是实现不了的，但是可以更改指针p 指向的地址，例如p&#x3D;”mengchao”,但是这里的p&#x3D;”mengchao”这段话放在子函数中是不可以的，字符串mengchao是存在于栈中，子函数结束就被释放了，不能够达到改变的目的。可以使用二重指针来实现。</p><p>char p[]&#x3D;”linux” 这个是字符数组，相当于初始化数组，可以更改内容，如p[1]&#x3D;’a’;* 这里Linux存在于栈上</p><p><strong>所以有的字符串操作函数例如</strong>​<strong>​<code>char *strcat(char *dst,char const *src);</code>​</strong>​<strong>前面的参数dst,需要修改，只能传数组，不能直接传一个字符串，因为字符串不可改变</strong></p><p>所以想修改字符串，请将他放在字符数组中。 另外关于这个程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-type">char</span> *p = &amp;c;<br><span class="hljs-type">char</span> *q = <span class="hljs-string">&quot;china&quot;</span>; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,p);     <span class="hljs-comment">//006DFEE7 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,*p);    <span class="hljs-comment">//a </span><br><span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-built_in">endl</span>;   <span class="hljs-comment">//a </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,q);     <span class="hljs-comment">//004B9024 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,q);     <span class="hljs-comment">//china </span><br><span class="hljs-built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//china </span><br><span class="hljs-built_in">cout</span> &lt;&lt; *q &lt;&lt; <span class="hljs-built_in">endl</span>;   <span class="hljs-comment">//c</span><br></code></pre></td></tr></table></figure><p>这里想插一句关于strlen和sizeof的区别。比如我们定义char buf[100]&#x3D;{“helloworld”}; strlen(buf);就是里边字符串的长度，而sizeof(buf);就是数组长度100.</p><p><strong>一定程度上可以认为一级指针与一维数组名等价，二级指针与指针数组名等价，数组指针与二维数组名等价。而二级指针和二维数组名没有一毛钱关系。</strong></p><h3 id="（6）数组名"><a href="#（6）数组名" class="headerlink" title="（6）数组名"></a>（6）数组名</h3><p>数组名可以看成是首元素的首地址，也可以当成一个整体来看。数组名是常量，才可以唯一的确定数组元素的起始地址。设有一维数组<code>int a[5]</code>:</p><p><code>a[1] = *(a+1); //a代表首元素首地址,加1跨度为int大小为4</code></p><p>对一维数组名和二维数组名引用(取地址)对一维数组名进行引用会将使其升级为二维数组名。</p><p><code>(&amp;a+1)//这个东西加1，加的大小是整个数组的大小，是20.</code></p><p>二维数组名解引用，降维为一维数组名。二维数组名是首元素首地址，设有<code>int a[4][3]</code>,则</p><p><code>*(a+1) //代表的是二维数组的第二维 a[1][2] = *(*(a+1)+2)</code></p><p>注意下面的问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">*p++：等同于：*p;  p += <span class="hljs-number">1</span>;先运算再++ <br>解析：实际上*p++符号整体对外表现的值是*p的值，运算完成后p再加<span class="hljs-number">1.</span> 【注意】是运算后p再加<span class="hljs-number">1</span>，而不是p所指向的变量*p再加<span class="hljs-number">1</span> <br><br>*++p：等同于 p += <span class="hljs-number">1</span>;    <br>*p;先++再运算 解析：由于++在p的前面，++前置的含义是，先加<span class="hljs-number">1</span>，得到一个新的p（它的值是原来p的值加<span class="hljs-number">1</span>）。然后这个新的p再与前面的*结合. <br><br>【总结】无论是*p++还是*++p，都是指针p += <span class="hljs-number">1</span>，即p的值+<span class="hljs-number">1</span>，而不是p所指向的变量*p的值+<span class="hljs-number">1</span>。 ++前置与++后置，只是决定了到底是先p += <span class="hljs-number">1</span>，还是先*p。++前置表示先p += <span class="hljs-number">1</span>，再*p。++后置表示先*p，在p += <span class="hljs-number">1</span>； --前置与--后置的的分析方法++前置与++后置的一样。<br></code></pre></td></tr></table></figure><h2 id="2、进程空间"><a href="#2、进程空间" class="headerlink" title="2、进程空间"></a>2、进程空间</h2><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog5b809e6f908834233029fd990bccc4d5.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">全局变量：不初始化的默认为<span class="hljs-number">0</span>，放在.bss段，初始化为<span class="hljs-number">0</span>的也放在.bss段 <br>初始化为非<span class="hljs-number">0</span>的全局变量放在.data段中，生命周期全局 <br>局部变量放在栈上，当调用结束，生命周期结束<br></code></pre></td></tr></table></figure><h2 id="3、结构体"><a href="#3、结构体" class="headerlink" title="3、结构体"></a>3、结构体</h2><p>《道德经》 曰：”一生二，二生三，三生万物”。结构体用关键字 struct 定义，表达出多个不同变量在一起的类型。我们由此可以使用struct自定义几乎所有想要的类型。</p><p>结构体的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">30</span>];<br>  <span class="hljs-type">char</span> sex;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">float</span> high;<br>&#125;stu1;<span class="hljs-comment">//这里定义了一个变量stu1</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> <span class="hljs-title">stu2</span>;</span><span class="hljs-comment">//这里定义了一个变量stu2</span><br></code></pre></td></tr></table></figure><p>这种定义出来的结构体类型在定义变量时必须跟着struct，就像<code>struct student stu1;</code>一样，我们引入typedef，避免这种情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">30</span>];<br>  <span class="hljs-type">char</span> sex;<br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-type">float</span> high;<br>&#125;STUDENT;<span class="hljs-comment">//将struct student类型重命名为STUDENT</span><br>STUDENT stu, stu2;<span class="hljs-comment">//使用STUDENT替换struct student定义变量</span><br></code></pre></td></tr></table></figure><h3 id="结构体变量初始化及成员访问"><a href="#结构体变量初始化及成员访问" class="headerlink" title="结构体变量初始化及成员访问"></a>结构体变量初始化及成员访问</h3><p>定义的结构体变量用点成员运算符（.）访问成员变量，比如<code>stu.sex</code>就这样访问成员变量。如果是结构体类型的指针变量则使用-&gt;访问成员变量。<code>STUDENT stu; stu-&gt;sex = &#39;x&#39;;</code>初始化大概有三种方法。</p><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">typede <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">block</span> &#123;</span> <br>  <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];   <br>  <span class="hljs-type">int</span> type;   <br>  <span class="hljs-type">int</span> size; <br> &#125;block;<br></code></pre></td></tr></table></figure><p>方法一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">block test = &#123;<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>&#125;； 需要注意对应的顺序，不能错位。<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">block test; <br>test.name = <span class="hljs-string">&quot;version&quot;</span>; <br>test.type = <span class="hljs-number">1</span>; <br>test.size= <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">block  test = &#123;  <br>  .type= <span class="hljs-number">1</span>,  <br>  .size = <span class="hljs-number">12</span>,  <br>  .name= <span class="hljs-string">&quot;version&quot;</span> <br> &#125;;<br></code></pre></td></tr></table></figure><h3 id="结构体大小"><a href="#结构体大小" class="headerlink" title="结构体大小"></a>结构体大小</h3><p>设计内存对齐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Date</span> &#123;</span>     <br>  <span class="hljs-type">char</span> a;<br>  <span class="hljs-type">int</span> b;<br>  <span class="hljs-type">int64_t</span> c;  <br>  <span class="hljs-type">char</span> d;<br>&#125;; <br>Date data [<span class="hljs-number">2</span>][<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><p>结构体所占的内存大小 a.整体所占的内存大小应该是结构中成员类型最大的整数倍，此处最大的类型是int_64t，占8个字节。即最后所占字节的总数应该是8的倍数，不足的补足 b.数据对齐原则-内存按结构体成员的先后顺序排列，当排到该成员变量时，其前面所有成员已经占用的空间大小必须是该成员类型大小的整数倍，如果不够，则前面的成员占用的空间要补齐，使之成为当前成员类型的整数倍。假设是地址是从0开始，结构体中第一个成员类型char型占一个字节，则内存地址0-1，第二成员从2开始，int型所占内存4个字节根据原则b，第一个成员所占内存补齐4的倍数，故第一个成员所占内存:1＋3＝4；第二个成员占5-8.第三个成员占8个字节，满足原则b，不需要补齐，占9-16第四个成员占一个字节，占17.故总内存为1＋3＋4＋8＋1＝17个字节，但根据原则1总字节数需是8的倍数，需将17补齐到24.故此结构体总字节数为:24字节</p><h2 id="4、一些关键字的详解"><a href="#4、一些关键字的详解" class="headerlink" title="4、一些关键字的详解"></a>4、一些关键字的详解</h2><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>在c&#x2F;c++中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了inline修饰符，表示为内联函数。栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。 inline的使用是有所限制的，inline只适合涵数体内代码简单的涵数使用，不能包含复杂的结构控制语句例如while、switch，并且不能内联函数本身不能是直接递归函数（即，自己内部还调用自己的函数）。 inline函数仅仅是一个对编译器的建议，所以最后能否真正内联，看编译器的意思，它如果认为函数不复杂，能在调用点展开，就会真正内联，并不是说声明了内联就会内联，声明内联只是一个建议而已。</p><h3 id="inline函数的定义放在头文件中"><a href="#inline函数的定义放在头文件中" class="headerlink" title="inline函数的定义放在头文件中"></a>inline函数的定义放在头文件中</h3><p>其次，因为内联函数要在调用点展开，所以编译器必须随处可见内联函数的定义，要不然就成了非内联函数的调用了。所以，这要求每个调用了内联函数的文件都出现了该内联函数的定义。 因此，将内联函数的定义放在头文件里实现是合适的，省却你为每个文件实现一次的麻烦。 声明跟定义要一致：如果在每个文件里都实现一次该内联函数的话，那么，最好保证每个定义都是一样的，否则，将会引起未定义的行为。如果不是每个文件里的定义都一样，那么，编译器展开的是哪一个，那要看具体的编译器而定。所以，最好将内联函数定义放在头文件中。</p><p>注：之所以定义放在头文件中，是因为inline是在编译阶段展开的，并不是连接源文件。</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static别的东西不想说，就说static在修饰局部变量的时候，函数结束此时局部变量并不会被释放，并且修饰的局部变量的值是一直保存的，类似于全局变量，但是还是只能在这个函数内才能访问</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const又叫常变量，修饰的变量一般不能被更改。但是在C语言中这是假的，通过定义一个指针，修改指针指向的内存依旧可以更改const修饰的变量。在C++中才是真正的const，无法修改。 const一般出现在参数列表中，意味着这个变量在函数中并不会被修改，是输入型参数。</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>这个volatile，英文名易变的。因为访问寄存器要比访问内存单元快的多,所以编译器一般都会作减少存取内存的优化，但有可能会读脏数据。当要求使用volatile声明变量值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。 精确地说就是，遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问；如果不使用valatile，则编译器将对所声明的语句进行优化。</p><h2 id="5、多文件编程"><a href="#5、多文件编程" class="headerlink" title="5、多文件编程"></a>5、多文件编程</h2><p>一个简单的例子 全局变量最好声明为 static，只在当前文件中可见，不要对外暴露；如果必须对外暴露，可以使用宏定义代替，全局变量最好只在本文件内使用，如果其他文件必须使用，最好封装get接口set接口，请看下面的代码。 main.c 源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;module.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> n1 = <span class="hljs-number">1</span>, n2 = <span class="hljs-number">100</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;从%d 加到%d 的和为%ld [By %s]&quot;</span>, n1, n2, sum(n1, n2), OS);<br>  getch();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>module.c 源码：如果使用了头文件中的宏定义，这里也是需要包含头文件的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;module.h&quot;</span></span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> fromNum, <span class="hljs-type">int</span> endNum)</span><br>&#123;<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 参数不符合规则，返回 -1</span><br>  <span class="hljs-keyword">if</span>(fromNum&lt;<span class="hljs-number">0</span> || endNum&lt;<span class="hljs-number">0</span> || endNum&lt;fromNum)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span>(i=fromNum; i&lt;=endNum; i++)&#123;<br>    result += i;<br>  &#125;<br>  <span class="hljs-comment">// 返回大于等于 0 的值</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>module.h 源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __MODULE_H_ </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MODULE_H_ </span><br><span class="hljs-comment">// 用宏定义来代替全局变量 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OS <span class="hljs-string">&quot;Windows 7&quot;</span> </span><br><span class="hljs-comment">// 也可以省略 extern；不过为了程序可读性，建议写上 </span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>多个.c文件的时候，也可以只用一个.h头文件，然后都包含一下这个.h文件</p><h2 id="6、文件操作"><a href="#6、文件操作" class="headerlink" title="6、文件操作"></a>6、文件操作</h2><p><a href="https://www.cnblogs.com/wuqianling/p/5340719.html">https://www.cnblogs.com/wuqianling/p/5340719.html</a>这篇文章写的就不错。</p><p>主要是文件操作分为二进制文件和文本文件，fopen打开的时候设置打开模式，返回值问FILE*类型的一个文件指针。通过这个文件指针就可以访问这个文件。</p><h2 id="7、编码规范"><a href="#7、编码规范" class="headerlink" title="7、编码规范"></a>7、编码规范</h2><ul><li>for while等关键字和括号之间留出一个空格，突出关键字，for后哪怕只有一行也写{}</li><li>注释的双斜线之后要有一个空格，突出注释</li><li>函数名和类使用大驼峰命名法首个单词大写，变量使用小驼峰命名法第一个字母小写</li><li>类和函数写完之后要空一行</li><li>分号、逗号前边不空格，后边留空格。双目运算符两边留空格</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、C语言的精髓–指针&quot;&gt;&lt;a href=&quot;#1、C语言的精髓–指针&quot; class=&quot;headerlink&quot; title=&quot;1、C语言的精髓–指针&quot;&gt;&lt;/a&gt;1、C语言的精髓–指针&lt;/h2&gt;&lt;p&gt;指针就是地址，在一定程度上可以把数组名就看成一个特殊的指针,指针也就</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>proc目录下pid各文件目录含义</title>
    <link href="http://example.com/posts/1.html"/>
    <id>http://example.com/posts/1.html</id>
    <published>2024-11-24T15:41:06.000Z</published>
    <updated>2024-11-24T15:41:26.771Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 内核提供了一种通过 proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。</p><p>用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取 proc 文件时，proc 文件系统是动态从系统内核读出所需信息并提交的。</p><p>下面列出的这些文件或子文件夹，并不是都是在你的系统中存在，这取决于你的内核配置和装载的模块。另外，在 proc 下还有三个很重要的目录：net，scsi 和 sys。 sys 目录是可写的，可以通过它来访问或修改内核的参数，而 net 和 scsi 则依赖于内核配置。例如，如果系统不支持 scsi，则 scsi 目录不存在。</p><p>除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在 proc 下，以进程的 PID 号为目录名，它们是读取进程信息的接口。而 self 目录则是读取进程本身的信息接口，是一个 link。</p><h3 id="proc-pid-auxv"><a href="#proc-pid-auxv" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;auxv"></a>&#x2F;proc&#x2F;[pid]&#x2F;auxv</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;auxv 包含传递给进程的 ELF 解释器信息，格式是每一项都是一个 unsigned long长度的 ID 加上一个 unsigned long 长度的值。最后一项以连续的两个 0x00 开头。举例如下：</p><blockquote><p>$ hexdump -x &#x2F;proc&#x2F;2406&#x2F;auxv</p><p>0000000    0021    0000    0000    0000    f000    f7fa    7fff    0000<br>0000010    0010    0000    0000    0000    fbff    1f8b    0000    0000<br>0000020    0006    0000    0000    0000    1000    0000    0000    0000<br>0000030    0011    0000    0000    0000    0064    0000    0000    0000<br>0000040    0003    0000    0000    0000    0040    0040    0000    0000<br>0000050    0004    0000    0000    0000    0038    0000    0000    0000<br>0000060    0005    0000    0000    0000    0007    0000    0000    0000<br>0000070    0007    0000    0000    0000    0000    0000    0000    0000<br>0000080    0008    0000    0000    0000    0000    0000    0000    0000<br>0000090    0009    0000    0000    0000    55e0    0045    0000    0000<br>00000a0    000b    0000    0000    0000    0000    0000    0000    0000<br>00000b0    000c    0000    0000    0000    0000    0000    0000    0000<br>00000c0    000d    0000    0000    0000    0000    0000    0000    0000<br>00000d0    000e    0000    0000    0000    0000    0000    0000    0000<br>00000e0    0017    0000    0000    0000    0000    0000    0000    0000<br>00000f0    0019    0000    0000    0000    f079    f7f6    7fff    0000<br>0000100    001f    0000    0000    0000    ffea    f7f6    7fff    0000<br>0000110    000f    0000    0000    0000    f089    f7f6    7fff    0000<br>0000120    0000    0000    0000    0000    0000    0000    0000    0000<br>0000130</p></blockquote><h3 id="proc-pid-cmdline"><a href="#proc-pid-cmdline" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;cmdline"></a>&#x2F;proc&#x2F;[pid]&#x2F;cmdline</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;cmdline 是一个只读文件，包含进程的完整命令行信息。如果该进程已经被交换出内存或者这个进程是 zombie 进程，则这个文件没有任何内容。该文件以空字符 null 而不是换行符作为结束标志。举例如下：</p><blockquote><p>$ ps aux|grep frps<br>root      2406  0.1  0.1  54880 10524 ?        Sl   Dec11  21:30 frps -c .&#x2F;frps.ini</p><p>$ cat &#x2F;proc&#x2F;2406&#x2F;cmdline<br>frps-c.&#x2F;frps.ini</p></blockquote><h3 id="proc-pid-comm"><a href="#proc-pid-comm" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;comm"></a>&#x2F;proc&#x2F;[pid]&#x2F;comm</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;comm 包含进程的命令名。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;comm<br>frps</p></blockquote><h3 id="proc-pid-cwd"><a href="#proc-pid-cwd" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;cwd"></a>&#x2F;proc&#x2F;[pid]&#x2F;cwd</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;cwd 是进程当前工作目录的符号链接。举例如下：</p><blockquote><p>$ ls -lt &#x2F;proc&#x2F;2406&#x2F;cwd<br>lrwxrwxrwx 1 root root 0 Dec 12 20:39 &#x2F;proc&#x2F;2406&#x2F;cwd -&gt; &#x2F;home&#x2F;mike&#x2F;frp_0.13.0_linux_amd64</p></blockquote><h3 id="proc-pid-environ"><a href="#proc-pid-environ" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;environ"></a>&#x2F;proc&#x2F;[pid]&#x2F;environ</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;environ 显示进程的环境变量。举例如下：</p><blockquote><p>$ strings &#x2F;proc&#x2F;2406&#x2F;environ</p><p>SUPERVISOR_GROUP_NAME&#x3D;ssh<br>TERM&#x3D;linux<br>SUPERVISOR_SERVER_URL&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock<br>SUPERVISOR_PROCESS_NAME&#x3D;ssh<br>RUNLEVEL&#x3D;2<br>UPSTART_EVENTS&#x3D;runlevel<br>PREVLEVEL&#x3D;N<br>PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin<br>UPSTART_INSTANCE&#x3D;<br>UPSTART_JOB&#x3D;rc<br>SUPERVISOR_ENABLED&#x3D;1<br>runlevel&#x3D;2<br>PWD&#x3D;&#x2F;<br>previous&#x3D;N</p></blockquote><h3 id="proc-pid-exe"><a href="#proc-pid-exe" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;exe"></a>&#x2F;proc&#x2F;[pid]&#x2F;exe</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;exe 为实际运行程序的符号链接。举例如下：</p><blockquote><p>$ ls -lt &#x2F;proc&#x2F;2406&#x2F;exe<br>lrwxrwxrwx 1 root root 0 Dec 11 19:00 &#x2F;proc&#x2F;2406&#x2F;exe -&gt; &#x2F;usr&#x2F;bin&#x2F;frps</p></blockquote><h3 id="proc-pid-fd"><a href="#proc-pid-fd" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;fd"></a>&#x2F;proc&#x2F;[pid]&#x2F;fd</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;fd 是一个目录，包含进程打开文件的情况。举例如下：</p><blockquote><p>$ ls -lt &#x2F;proc&#x2F;2406&#x2F;fd</p><p>lrwx—— 1 root root 64 Dec 24 09:39 77 -&gt; socket:[44377722]<br>lrwx—— 1 root root 64 Dec 17 15:07 47 -&gt; socket:[29482617]<br>lr-x—— 1 root root 64 Dec 12 20:18 0 -&gt; pipe:[13282]<br>l-wx—— 1 root root 64 Dec 12 20:18 1 -&gt; pipe:[13283]<br>lrwx—— 1 root root 64 Dec 12 20:18 10 -&gt; socket:[12238218]<br>lrwx—— 1 root root 64 Dec 12 20:18 4 -&gt; anon_inode:[eventpoll]<br>lrwx—— 1 root root 64 Dec 12 20:18 40 -&gt; socket:[19378614]</p></blockquote><p>目录中的每一项都是一个符号链接，指向打开的文件，数字则代表文件描述符。</p><h3 id="proc-pid-latency"><a href="#proc-pid-latency" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;latency"></a>&#x2F;proc&#x2F;[pid]&#x2F;latency</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;latency 显示哪些代码造成的延时比较大。如果要使用这个特性需要执行：</p><blockquote><p>$ echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;latencytop</p></blockquote><p>举例如下</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;latency</p><p>Latency Top version : v0.1<br>30667 10650491 4891 poll_schedule_timeout do_sys_poll SyS_poll system_call_fastpath 0x7f636573dc1d<br>8 105 44 futex_wait_queue_me futex_wait do_futex SyS_futex system_call_fastpath 0x7f6365a167bc</p></blockquote><p>每一行前三个数字分别是后面代码执行的次数、总共执行延迟时间(单位是微秒)和最长执行延迟时间(单位是微秒)。后面则是代码完整的调用栈。</p><h3 id="proc-pid-maps"><a href="#proc-pid-maps" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;maps"></a>&#x2F;proc&#x2F;[pid]&#x2F;maps</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;maps 显示进程的内存区域映射信息。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;maps<br>00400000-006ea000 r-xp 00000000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps<br>006ea000-00a6c000 r–p 002ea000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps<br>00a6c000-00ab1000 rw-p 0066c000 fd:01 1727569                            &#x2F;usr&#x2F;bin&#x2F;frps<br>00ab1000-00ad4000 rw-p 00000000 00:00 0<br>c000000000-c00000b000 rw-p 00000000 00:00 0<br>c41feac000-c420000000 rw-p 00000000 00:00 0<br>c420000000-c420400000 rw-p 00000000 00:00 0<br>c420400000-c420700000 rw-p 00000000 00:00 0<br>c420700000-c420800000 rw-p 00000000 00:00 0<br>c420800000-c420900000 rw-p 00000000 00:00 0<br>c420900000-c420a00000 rw-p 00000000 00:00 0<br>c420a00000-c421ea0000 rw-p 00000000 00:00 0<br>c421ea0000-c422a00000 rw-p 00000000 00:00 0<br>c422a00000-c422a60000 rw-p 00000000 00:00 0<br>7f0418c01000-7f0418ee1000 rw-p 00000000 00:00 0<br>7ffff7f4f000-7ffff7f70000 rw-p 00000000 00:00 0                          [stack:5121]<br>7ffff7fad000-7ffff7faf000 r–p 00000000 00:00 0                          [vvar]<br>7ffff7faf000-7ffff7fb1000 r-xp 00000000 00:00 0                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</p></blockquote><p>其中注意的一点是 [stack:] 是线程的堆栈信息，对应于 &#x2F;proc&#x2F;[pid]&#x2F;task&#x2F;[tid]&#x2F; 路径。</p><h3 id="proc-pid-root"><a href="#proc-pid-root" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;root"></a>&#x2F;proc&#x2F;[pid]&#x2F;root</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;root 是进程根目录的符号链接。举例如下：</p><blockquote><p>$  ls -lt &#x2F;proc&#x2F;2406&#x2F;root<br>lrwxrwxrwx 1 root root 0 Dec 12 20:39 &#x2F;proc&#x2F;2406&#x2F;root -&gt; &#x2F;</p></blockquote><h3 id="proc-pid-stack"><a href="#proc-pid-stack" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;stack"></a>&#x2F;proc&#x2F;[pid]&#x2F;stack</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;stack 示当前进程的内核调用栈信息，只有内核编译时打开了 CONFIG_STACKTRACE 编译选项，才会生成这个文件。举例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">$ cat /proc/<span class="hljs-number">2406</span>/<span class="hljs-built_in">stack</span><br>[&lt;ffffffff810fa996&gt;] futex_wait_queue_me+<span class="hljs-number">0xc6</span>/<span class="hljs-number">0x130</span><br>[&lt;ffffffff810fb05d&gt;] futex_wait+<span class="hljs-number">0x17d</span>/<span class="hljs-number">0x270</span><br>[&lt;ffffffff810fd2d5&gt;] do_futex+<span class="hljs-number">0xd5</span>/<span class="hljs-number">0x520</span><br>[&lt;ffffffff810fd791&gt;] SyS_futex+<span class="hljs-number">0x71</span>/<span class="hljs-number">0x150</span><br>[&lt;ffffffff8180cc76&gt;] entry_SYSCALL_64_fastpath+<span class="hljs-number">0x16</span>/<span class="hljs-number">0x75</span><br>[&lt;ffffffffffffffff&gt;] <span class="hljs-number">0xffffffffffffffff</span><br></code></pre></td></tr></table></figure><h3 id="proc-pid-statm"><a href="#proc-pid-statm" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;statm"></a>&#x2F;proc&#x2F;[pid]&#x2F;statm</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;statm 显示进程所占用内存大小的统计信息。包含七个值，度量单位是 page(page大小可通过 getconf PAGESIZE 得到)。举例如下：</p><blockquote><p>$  cat &#x2F;proc&#x2F;2406&#x2F;statm<br>13720 2617 493 746 0 12007 0</p></blockquote><p>各个值含义：</p><blockquote><p>a）进程占用的总的内存<br>b）进程当前时刻占用的物理内存<br>c）同其它进程共享的内存<br>d）进程的代码段<br>e）共享库(从2.6版本起，这个值为0)<br>f）进程的堆栈<br>g）dirty pages(从2.6版本起，这个值为0)</p></blockquote><h3 id="proc-pid-status"><a href="#proc-pid-status" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;status"></a>&#x2F;proc&#x2F;[pid]&#x2F;status</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;status 包含进程的状态信息。其很多内容与 &#x2F;proc&#x2F;[pid]&#x2F;stat 和 &#x2F;proc&#x2F;[pid]&#x2F;statm 相同，但是却是以一种更清晰地方式展现出来。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;status<br>Name:   frps<br>State:  S (sleeping)<br>Tgid:   2406<br>Ngid:   0<br>Pid:    2406<br>PPid:   2130<br>TracerPid:  0<br>Uid:    0   0   0   0<br>Gid:    0   0   0   0<br>FDSize: 128<br>Groups: 0<br>NStgid: 2406<br>NSpid:  2406<br>NSpgid: 2406<br>NSsid:  2130<br>VmPeak:    54880 kB<br>VmSize:    54880 kB<br>VmLck:         0 kB<br>VmPin:         0 kB<br>VmHWM:     34872 kB<br>VmRSS:     10468 kB<br>VmData:    47896 kB<br>VmStk:       132 kB<br>VmExe:      2984 kB<br>VmLib:         0 kB<br>VmPTE:        68 kB<br>VmPMD:        20 kB<br>VmSwap:        0 kB<br>HugetlbPages:          0 kB<br>Threads:    11<br>SigQ:   0&#x2F;31834<br>SigPnd: 0000000000000000<br>ShdPnd: 0000000000000000<br>SigBlk: 0000000000000000<br>SigIgn: 0000000000000000<br>SigCgt: fffffffe7fc1feff<br>CapInh: 0000000000000000<br>CapPrm: 0000003fffffffff<br>CapEff: 0000003fffffffff<br>CapBnd: 0000003fffffffff<br>CapAmb: 0000000000000000<br>Seccomp:    0<br>Cpus_allowed:   f<br>Cpus_allowed_list:  0-3<br>Mems_allowed:   00000000,00000001<br>Mems_allowed_list:  0<br>voluntary_ctxt_switches:    2251028<br>nonvoluntary_ctxt_switches: 18031</p></blockquote><p>关于信号（signal）的信息：SigQ 分为两部分（例如 0&#x2F;31834），前面表示当前处在队列中的信号（0），后面则表示队列一共可以存储多少信号（31834）；SigPnd 表示当前线程 pending 的信号，而ShdPnd 则表示整个进程 pending 的信号；SigBlk、SigIgn 和 SigCgt 分别表示对信号的处理是阻塞，忽略，还是捕获。（关于Unix信号的相关知识，可以参考 Unix: Dealing with signals）。</p><h3 id="proc-pid-syscall"><a href="#proc-pid-syscall" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;syscall"></a>&#x2F;proc&#x2F;[pid]&#x2F;syscall</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;syscall 显示当前进程正在执行的系统调用。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;syscall<br>202 0xab3730 0x0 0x0 0x0 0x0 0x0 0x7ffff7f6ec68 0x455bb3</p></blockquote><p>第一个值是系统调用号（202代表poll），后面跟着 6 个系统调用的参数值（位于寄存器中），最后两个值依次是堆栈指针和指令计数器的值。如果当前进程虽然阻塞，但阻塞函数并不是系统调用，则系统调用号的值为 -1，后面只有堆栈指针和指令计数器的值。如果进程没有阻塞，则这个文件只有一个 running  的字符串。</p><p>内核编译时打开了 CONFIG_HAVE_ARCH_TRACEHOOK 编译选项，才会生成这个文件。</p><h3 id="proc-pid-wchan"><a href="#proc-pid-wchan" class="headerlink" title="&#x2F;proc&#x2F;[pid]&#x2F;wchan"></a>&#x2F;proc&#x2F;[pid]&#x2F;wchan</h3><p>&#x2F;proc&#x2F;[pid]&#x2F;wchan 显示当进程 sleep 时，kernel 当前运行的函数。举例如下：</p><blockquote><p>$ cat &#x2F;proc&#x2F;2406&#x2F;wchan<br>futex_wait_queue_meadmin</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 内核提供了一种通过 proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。&lt;/p&gt;
&lt;p&gt;用户和应用程序可以通过 proc</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>查找内核符号</title>
    <link href="http://example.com/posts/1.html"/>
    <id>http://example.com/posts/1.html</id>
    <published>2024-11-24T15:39:23.000Z</published>
    <updated>2024-11-24T15:39:58.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-proc-kallsyms"><a href="#一、-proc-kallsyms" class="headerlink" title="一、&#x2F;proc&#x2F;kallsyms"></a>一、&#x2F;proc&#x2F;kallsyms</h1><p>  内核符号可以通过&#x2F;proc&#x2F;kallsyms查看。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog20241124233848.png"></p><h3 id="1-符号类型说明"><a href="#1-符号类型说明" class="headerlink" title="(1)符号类型说明"></a>(1)符号类型说明</h3><p>  在Linux内核中，kallsyms是一个符号表，它包含了内核中所有的符号信息，包括函数、变量、常量等等。这些符号信息可以被内核模块和其他程序使用，这些符号类型可以帮助开发人员更好地理解内核中的符号信息，从而更好地进行内核开发和调试。</p><p>在kallsyms中，每个符号都有一个类型，表示它的用途。下面是一些常见的符号类型：</p><ul><li>T：表示该符号是一个函数，可以被其他代码调用。</li><li>t：表示该符号是一个局部函数，只能在当前文件中使用。</li><li>D：表示该符号是一个全局变量，可以被其他代码访问和修改。</li><li>d：表示该符号是一个局部变量，只能在当前文件中使用。</li><li>R：表示该符号是一个只读变量，不能被修改。</li><li>r：表示该符号是一个只读局部变量，只能在当前文件中使用</li><li>A：表示该符号是一个可读写的变量，可以被其他代码访问和修改。</li><li>a：表示该符号是一个可读写的局部变量，只能在当前文件中使用。</li><li>B：表示该符号是一个未初始化的全局变量，它的值在程序启动时被初始化为0。</li><li>b：表示该符号是一个未初始化的局部变量，它的值在程序启动时被初始化为0。</li><li>G：表示该符号是一个全局变量，但是它的值在程序运行时可能会被修改。</li><li>C：表示该符号是一个常量，它的值在程序运行时不能被修改。</li><li>W：表示该符号是一个弱符号，</li><li>?: 表示该符号的类型未知。</li></ul><h3 id="2-弱符号"><a href="#2-弱符号" class="headerlink" title="(2)弱符号"></a>(2)弱符号</h3><p>关于弱符号的一些说明：__weak 是一个关键字，用于声明一个弱符号。在 C 语言中，如果一个符号被定义了多次，编译器会报错。但是，如果一个符号被声明为弱符号，那么编译器就不会报错，而是在链接时选择其中一个符号作为最终的符号。这个特性在编写库时非常有用，因为它允许用户在链接时覆盖库中的函数。</p><p>如下为一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * probe_kernel_read(): safely attempt to read from a location</span><br><span class="hljs-comment"> * @dst: pointer to the buffer that shall take the data</span><br><span class="hljs-comment"> * @src: address to read from</span><br><span class="hljs-comment"> * @size: size of the data chunk</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Safely read from address @src to the buffer at @dst.  If a kernel fault</span><br><span class="hljs-comment"> * happens, handle that and return -EFAULT.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We ensure that the copy_from_user is executed in atomic context so that</span><br><span class="hljs-comment"> * do_page_fault() doesn&#x27;t attempt to take mmap_sem.  This makes</span><br><span class="hljs-comment"> * probe_kernel_read() suitable for use within regions where the caller</span><br><span class="hljs-comment"> * already holds mmap_sem, or other locks which nest inside mmap_sem.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">long</span> __weak <span class="hljs-title function_">probe_kernel_read</span><span class="hljs-params">(<span class="hljs-type">void</span> *dst, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> size)</span><br>    __<span class="hljs-title function_">attribute__</span><span class="hljs-params">((alias(<span class="hljs-string">&quot;__probe_kernel_read&quot;</span>)))</span>;<br><br><span class="hljs-type">long</span> __probe_kernel_read(<span class="hljs-type">void</span> *dst, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> size)<br>&#123;<br>        <span class="hljs-type">long</span> ret;<br>        <span class="hljs-type">mm_segment_t</span> old_fs = get_fs();<br><br>        set_fs(KERNEL_DS);<br>        pagefault_disable();<br>        ret = __copy_from_user_inatomic(dst,<br>                        (__force <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *)src, size);<br>        pagefault_enable();<br>        set_fs(old_fs);<br><br>        <span class="hljs-keyword">return</span> ret ? -EFAULT : <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL_GPL(probe_kernel_read);<br></code></pre></td></tr></table></figure><h3 id="3-内核驱动获取符号地址"><a href="#3-内核驱动获取符号地址" class="headerlink" title="(3)内核驱动获取符号地址"></a>(3)内核驱动获取符号地址</h3><p>符号存在于&#x2F;proc&#x2F;kallsyms 文件中，可以通过kallsyms_lookup_name获取其符号的地址。在内核版本 2.6.33 - 5.7.0 可以用kallsyms_lookup_name来获取该函数的地址。在内核2.6.33 以下和 5.7.0 以上可以用 kprobe 来获取该函数的地址</p><p>kallsyms_lookup_name是内核API，源码如下：</p><p>使用kallsyms_lookup_name函数需要<code>#include &lt;linux/kallsyms.h&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* Lookup the address for this symbol. Returns 0 if not found. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">kallsyms_lookup_name</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>        <span class="hljs-type">char</span> namebuf[KSYM_NAME_LEN];<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> i;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> off;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, off = <span class="hljs-number">0</span>; i &lt; kallsyms_num_syms; i++) &#123;<br>                off = kallsyms_expand_symbol(off, namebuf, ARRAY_SIZE(namebuf));<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(namebuf, name) == <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">return</span> kallsyms_sym_address(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> module_kallsyms_lookup_name(name);<br>&#125;<br>EXPORT_SYMBOL_GPL(kallsyms_lookup_name);<br></code></pre></td></tr></table></figure><p>上述函数可以使用符号名找到在内核中的地址，使用该方法可以使用内核中未导出的内核函数。如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * text_poke - Update instructions on a live kernel</span><br><span class="hljs-comment"> * @addr: address to modify</span><br><span class="hljs-comment"> * @opcode: source of the copy</span><br><span class="hljs-comment"> * @len: length to copy</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Only atomic text poke/set should be allowed when not doing early patching.</span><br><span class="hljs-comment"> * It means the size must be writable atomically and the address must be aligned</span><br><span class="hljs-comment"> * in a way that permits an atomic write. It also makes sure we fit on a single</span><br><span class="hljs-comment"> * page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">text_poke</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *opcode, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br>        <span class="hljs-type">char</span> *vaddr;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">pages</span>[2];</span><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * While boot memory allocator is runnig we cannot use struct</span><br><span class="hljs-comment">         * pages as they are not yet initialized.</span><br><span class="hljs-comment">         */</span><br>        BUG_ON(!after_bootmem);<br><br>        lockdep_assert_held(&amp;text_mutex);<br><br>        <span class="hljs-keyword">if</span> (!core_kernel_text((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)addr)) &#123;<br>                pages[<span class="hljs-number">0</span>] = vmalloc_to_page(addr);<br>                pages[<span class="hljs-number">1</span>] = vmalloc_to_page(addr + PAGE_SIZE);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                pages[<span class="hljs-number">0</span>] = virt_to_page(addr);<br>                WARN_ON(!PageReserved(pages[<span class="hljs-number">0</span>]));<br>                pages[<span class="hljs-number">1</span>] = virt_to_page(addr + PAGE_SIZE);<br>        &#125;<br>        BUG_ON(!pages[<span class="hljs-number">0</span>]);<br>        local_irq_save(flags);<br>        set_fixmap(FIX_TEXT_POKE0, page_to_phys(pages[<span class="hljs-number">0</span>]));<br>        <span class="hljs-keyword">if</span> (pages[<span class="hljs-number">1</span>])<br>                set_fixmap(FIX_TEXT_POKE1, page_to_phys(pages[<span class="hljs-number">1</span>]));<br>        vaddr = (<span class="hljs-type">char</span> *)fix_to_virt(FIX_TEXT_POKE0);<br>        <span class="hljs-built_in">memcpy</span>(&amp;vaddr[(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)addr &amp; ~PAGE_MASK], opcode, len);<br>        clear_fixmap(FIX_TEXT_POKE0);<br>        <span class="hljs-keyword">if</span> (pages[<span class="hljs-number">1</span>])<br>                clear_fixmap(FIX_TEXT_POKE1);<br>        local_flush_tlb();<br>        sync_core();<br>        <span class="hljs-comment">/* Could also do a CLFLUSH here to speed up CPU recovery; but</span><br><span class="hljs-comment">           that causes hangs on some VIA CPUs. */</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>                BUG_ON(((<span class="hljs-type">char</span> *)addr)[i] != ((<span class="hljs-type">char</span> *)opcode)[i]);<br>        local_irq_restore(flags);<br>        <span class="hljs-keyword">return</span> addr;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>text_poke</code>为非导出函数，在驱动中无法使用，可以使用<code>kallsyms_lookup_name</code>获取函数地址并赋值给函数指针，便可以使用该函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> *(*text_poke_fn)(<span class="hljs-type">void</span> *addr, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *opcode, <span class="hljs-type">size_t</span> len);<br>text_poke_fn = (<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>))kallsyms_lookup_nama(<span class="hljs-string">&quot;text_poke&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-proc-kallsyms&quot;&gt;&lt;a href=&quot;#一、-proc-kallsyms&quot; class=&quot;headerlink&quot; title=&quot;一、&amp;#x2F;proc&amp;#x2F;kallsyms&quot;&gt;&lt;/a&gt;一、&amp;#x2F;proc&amp;#x2F;kallsyms&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>OOM</title>
    <link href="http://example.com/posts/OOM.html"/>
    <id>http://example.com/posts/OOM.html</id>
    <published>2024-11-24T15:37:20.000Z</published>
    <updated>2024-11-24T15:37:36.757Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux操作系统中，OOM（Out of Memory）指的是系统可用内存耗尽，无法再为任何进程分配所需的内存，从而导致系统必须采取某些极端措施的情况。当系统面临OOM时，可能会选择杀死某些进程以释放内存，这是通过Linux内核的OOM Killer机制实现的。</p><h3 id="OOM发生的原因："><a href="#OOM发生的原因：" class="headerlink" title="OOM发生的原因："></a>OOM发生的原因：</h3><ol><li><strong>物理内存不足</strong>：实际物理内存资源耗尽，无法满足所有进程的内存需求，尤其是当大量进程同时运行且内存占用较大时更容易出现。</li><li><strong>交换空间不足</strong>：即使有交换分区（Swap），但当系统试图将物理内存中的页换出到交换空间时，发现交换空间也已满，无法继续进行内存交换。</li><li><strong>内存泄漏</strong>：应用程序存在内存泄漏问题，随着时间推移不断消耗内存，直至耗尽整个系统资源。</li><li><strong>一次性加载大量数据</strong>：某个进程瞬间请求大量内存，超出了系统所能提供的范围。</li><li><strong>内存限制</strong>：在容器环境下，单个容器可能存在严格的内存限制，超出限制后也会触发OOM。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Linux操作系统中，OOM（Out of Memory）指的是系统可用内存耗尽，无法再为任何进程分配所需的内存，从而导致系统必须采取某些极端措施的情况。当系统面临OOM时，可能会选择杀死某些进程以释放内存，这是通过Linux内核的OOM Killer机制实现的。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ftpget</title>
    <link href="http://example.com/posts/ftpget.html"/>
    <id>http://example.com/posts/ftpget.html</id>
    <published>2024-11-24T15:31:27.000Z</published>
    <updated>2024-11-24T15:35:20.228Z</updated>
    
    <content type="html"><![CDATA[<p>ftpget -u  username -p passwd IP  source  target</p><p>ftpput -u  username -p passwd IP  target  source</p><p>举个例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">ftpput -u zhangsan -p 000000 192.168.10.10 target.txt source.txt   <br>// 将本地的 source.txt 文件传输到 192.168.10.10 /home/zhangsan/ 目录下，并以target.txt 保存<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ftpget -u  username -p passwd IP  source  target&lt;/p&gt;
&lt;p&gt;ftpput -u  username -p passwd IP  target  source&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>scp</title>
    <link href="http://example.com/posts/scp.html"/>
    <id>http://example.com/posts/scp.html</id>
    <published>2024-11-24T15:30:53.000Z</published>
    <updated>2024-11-24T15:34:55.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、从本地复制到远程主机"><a href="#一、从本地复制到远程主机" class="headerlink" title="一、从本地复制到远程主机"></a>一、从本地复制到远程主机</h2><p>命令格式如下：</p><p>scp &#x2F;path&#x2F;to&#x2F;local&#x2F;file.txt user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;</p><p>这会将本地的 <code>file.txt</code> 文件复制到远程主机 <code>remote_host</code> 的 <code>/path/on/remote/</code> 目录下。</p><h3 id="二、从远程主机复制到本地"><a href="#二、从远程主机复制到本地" class="headerlink" title="二、从远程主机复制到本地"></a>二、从远程主机复制到本地</h3><p>（1）命令解释<br>命令格式如下：scp user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;file.txt &#x2F;path&#x2F;to&#x2F;local&#x2F;</p><p>这会将远程主机 <code>remote_host</code> 的 <code>/path/on/remote/file.txt</code> 文件复制到本地的 <code>/path/to/local/</code> 目录下。</p><p>（2）实际操作<br>实操命令如下：<br>scp <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#46;&#49;&#46;&#49;&#48;&#x39;">&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#46;&#49;&#46;&#49;&#48;&#x39;</a>:&#x2F;home&#x2F;DataBaseMysql.zip .&#x2F;</p><p>这会将远程主机 <code>192.168.1.109</code> 的&#x2F;home&#x2F;DataBaseMysql.zip 文件复制到本地的当前目录下</p><h3 id="三、递归复制目录"><a href="#三、递归复制目录" class="headerlink" title="三、递归复制目录"></a>三、递归复制目录</h3><p>实操命令如下：scp -r user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;directory &#x2F;path&#x2F;to&#x2F;local&#x2F;</p><p>这会将远程主机 <code>remote_host</code> 的 <code>/path/on/remote/directory</code> 目录及其所有内容复制到本地的 <code>/path/to/local/</code> 目录下。</p><h3 id="四、指定-SSH-端口"><a href="#四、指定-SSH-端口" class="headerlink" title="四、指定 SSH 端口"></a>四、指定 SSH 端口</h3><p>如果远程主机的 SSH 端口不是默认的 22，可以使用 <code>-P</code> 选项指定端口：</p><p>scp -P 2222 user@remote_host:&#x2F;path&#x2F;on&#x2F;remote&#x2F;file.txt &#x2F;path&#x2F;to&#x2F;local&#x2F;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、从本地复制到远程主机&quot;&gt;&lt;a href=&quot;#一、从本地复制到远程主机&quot; class=&quot;headerlink&quot; title=&quot;一、从本地复制到远程主机&quot;&gt;&lt;/a&gt;一、从本地复制到远程主机&lt;/h2&gt;&lt;p&gt;命令格式如下：&lt;/p&gt;
&lt;p&gt;scp &amp;#x2F;path&amp;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>find</title>
    <link href="http://example.com/posts/find.html"/>
    <id>http://example.com/posts/find.html</id>
    <published>2024-11-24T15:30:13.000Z</published>
    <updated>2024-11-24T15:35:25.730Z</updated>
    
    <content type="html"><![CDATA[<p>find . -name “my_file”</p><p>find . -name &#x2F;etc -type d</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;find . -name “my_file”&lt;/p&gt;
&lt;p&gt;find . -name &amp;#x2F;etc -type d&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>grep</title>
    <link href="http://example.com/posts/grep.html"/>
    <id>http://example.com/posts/grep.html</id>
    <published>2024-11-24T15:29:25.000Z</published>
    <updated>2024-11-24T15:35:15.853Z</updated>
    
    <content type="html"><![CDATA[<p>文本搜索工具，根据用户指定的“模式”（过滤条件），对目标文本逐行进行匹配，并打印输出匹配到的行。</p><p>完整语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">grep   [options]   [pattern]   file<br> <br>命令    参数         匹配模式      文件数据<br></code></pre></td></tr></table></figure><p>常用参数：</p><table><thead><tr><th>常用参数</th><th>描述</th></tr></thead><tbody><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-n</td><td>显示匹配行与行号</td></tr><tr><td>-r</td><td>递归查找子目录</td></tr><tr><td>-v</td><td>显示不能被匹配到的字符串</td></tr></tbody></table><p>常用正则表达式</p><p>表达式解释</p><ul><li><p>^用于模式最左侧，如 “^yu” 即匹配以yu开头的单词</p></li><li><p>$用于模式最右侧，如 “yu$” 即匹配以yu结尾的单词</p></li><li><p>^$组合符，表示空行</p></li><li><p>.匹配任意一个且只有一个字符，不能匹配空行</p></li><li><p>|使用egrep命令</p></li><li></li><li><p>重匹配前一个字符连续出现0次或1次以上</p></li><li><p>.*匹配任意字符</p></li><li><p>^.*组合符，匹配任意多个字符开头的内容</p></li><li><p>.*$组合符，匹配任意多个字符结尾的内容</p></li><li><p>[abc]匹配 [] 内集合中的任意一个字符，a或b或c，也可以写成 [ac]</p></li><li><p>[^abc]匹配除了 ^后面的任意一个字符，a或b或c，[]内 ^ 表示取反操作</p></li></ul><p>常用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">grep -nr <span class="hljs-string">&quot;xxx&quot;</span> .<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文本搜索工具，根据用户指定的“模式”（过滤条件），对目标文本逐行进行匹配，并打印输出匹配到的行。&lt;/p&gt;
&lt;p&gt;完整语法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>内存检测工具</title>
    <link href="http://example.com/posts/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.html"/>
    <id>http://example.com/posts/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.html</id>
    <published>2024-11-24T15:28:12.000Z</published>
    <updated>2024-11-24T15:34:33.450Z</updated>
    
    <content type="html"><![CDATA[<p>在写大型C&#x2F;C++工程时难免会发生内存泄漏现象，系统编程中一个重要的方面就是有效地处理与内存相关的问题。你的工作越接近系统，你就需要面对越多的内存问题。有时这些问题非常琐碎，而更多时候它会演变成一个调试内存问题的恶梦。 常见的内存问题一共七种：</p><ol><li>动态内存泄露；</li><li>资源泄露，比如文件指针不关闭；</li><li>动态内存越界；</li><li>4.数组内存越界；</li><li>5.动态内存double free；</li><li>6.使用野指针，即未初始化的指针；</li><li>7.释放野指针，即未初始化的指针。</li></ol><p>内存问题非常难定位，对于小工程来说，简单去检查代码中new和delete的匹配对数就基本能定位到问题，但是一旦代码量上升到以万单位时，仅靠肉眼检查来定位问题那就非常困难了，所以我们需要利用工具帮助我们找出问题所在。在Linux系统下内存检测工具首推Valgrind，一款非常好用的开源内存管理框架。Valgrind其实是一个工具集，内存错误检测只是它众多功能的一个，但我们用得最多的功能正是它——memcheck。</p><p>该工具可以检测下列与内存相关的问题 :</p><ul><li>未释放内存的使用</li><li>对释放后内存的读&#x2F;写</li><li>对已分配内存块尾部的读&#x2F;写</li><li>内存泄露</li><li>不匹配的使用malloc&#x2F;new&#x2F;new[] 和 free&#x2F;delete&#x2F;delete[]</li><li>重复释放内存</li></ul><p>首先安装Valgrind非常简单：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//valgrind下载：<br>http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2<br><br>valgrind安装：<br><span class="hljs-bullet">1.</span> tar -jxvf valgrind-3.12.0.tar.bz2<br><span class="hljs-bullet">2.</span> cd valgrind-3.12.0<br><span class="hljs-bullet">3.</span> ./configure<br><span class="hljs-bullet">4.</span> make<br><span class="hljs-bullet">5.</span> sudo make install<br></code></pre></td></tr></table></figure><p>下面开始讲解Valgrind的应用场景。</p><p>注意: 下面讨论的所有测试代码都应该使用gcc&#x2F;g++并且加上-g选项。</p><h2 id="1-使用未初始化的内存（使用野指针）"><a href="#1-使用未初始化的内存（使用野指针）" class="headerlink" title="1. 使用未初始化的内存（使用野指针）"></a>1. 使用未初始化的内存（使用野指针）</h2><p>这里我们定义了一个指针p，但并未给他开辟空间，即他是一个野指针，但我们却使用它了。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193554002-1364573355.jpg"></p><p>Valgrind检测出我们程序使用了未初始化的变量，但并未检测出内存泄漏。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193604735-1875378577.jpg"></p><h2 id="2-在内存被释放后进行读-写（使用野指针）"><a href="#2-在内存被释放后进行读-写（使用野指针）" class="headerlink" title="2.在内存被释放后进行读&#x2F;写（使用野指针）"></a>2.在内存被释放后进行读&#x2F;写（使用野指针）</h2><p>p所指向的内存被释放了，p变成了野指针，但是我们却继续使用这片内存。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193613574-1154240221.jpg"></p><p>Valgrind检测出我们使用了已经free掉的内存，并给出这片内存是哪里分配哪里释放的。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193624421-247811116.jpg"></p><h2 id="3-从已分配内存块的尾部进行读-写（动态内存越界）"><a href="#3-从已分配内存块的尾部进行读-写（动态内存越界）" class="headerlink" title="3.从已分配内存块的尾部进行读&#x2F;写（动态内存越界）"></a>3.从已分配内存块的尾部进行读&#x2F;写（动态内存越界）</h2><p>我们动态地分配了一段数组，但我们在访问个数组时发生了越界读写，程序crash掉。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193638871-928305119.jpg"></p><p>Valgrind检测出越界的位置。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193651410-2101563201.jpg"></p><p>注意：Valgrind不检查静态分配数组的使用情况！所以对静态分配的数组，Valgrind表示无能为力！比如下面的例子，程序crash掉，我们却不知道为什么。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193706246-508790416.jpg"></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193716994-628209858.jpg"></p><h2 id="4-内存泄漏"><a href="#4-内存泄漏" class="headerlink" title="4.内存泄漏"></a>4.内存泄漏</h2><p>内存泄漏的原因在于没有成对地使用malloc&#x2F;free和new&#x2F;delete，比如下面的例子。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193726929-641784050.jpg"></p><p>Valgrind会给出程序中malloc和free的出现次数以判断是否发生内存泄漏，比如对上面的程序运行memcheck，Valgrind的记录显示上面的程序用了1次malloc，却调用了0次free，明显发生了内存泄漏！</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193738724-1869262186.jpg"></p><p>上面提示了我们可以使用–leak-check&#x3D;full进一步获取内存泄漏的信息，比如malloc和free的具体行号。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193750769-1501914916.jpg"></p><h2 id="5-不匹配地使用malloc-new-new-和-free-delete-delete"><a href="#5-不匹配地使用malloc-new-new-和-free-delete-delete" class="headerlink" title="5. 不匹配地使用malloc&#x2F;new&#x2F;new[] 和 free&#x2F;delete&#x2F;delete[]"></a>5. 不匹配地使用malloc&#x2F;new&#x2F;new[] 和 free&#x2F;delete&#x2F;delete[]</h2><p>正常使用new&#x2F;delete和malloc&#x2F;free是这样子的：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193802975-763647802.jpg"></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193817047-1922627647.jpg"></p><p>而不匹配地使用malloc&#x2F;new&#x2F;new[] 和 free&#x2F;delete&#x2F;delete[]则会被提示mismacth：</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193830425-1531404607.jpg"></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193844415-122107118.jpg"></p><h2 id="6-两次释放内存"><a href="#6-两次释放内存" class="headerlink" title="6.两次释放内存"></a>6.两次释放内存</h2><p>double free的情况同样是根据malloc&#x2F;free的匹配对数来体现的，比如free多了一次，Valgrind也会提示。</p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193909777-1273155147.jpg"></p><p><img src="https://raw.githubusercontent.com/mengchao666/picture/main/blog1093303-20180413193923068-1690539405.jpg"></p><p>当然，Valgrind也不是万能的。Valgrind也有无法找到问题的时候，有些问题只能通过不断的review代码找到了症结。发现问题，解决问题，毕竟是末流。最好的方法，就是不引入内存问题。这可以通过良好的代码风格和设计来实现的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在写大型C&amp;#x2F;C++工程时难免会发生内存泄漏现象，系统编程中一个重要的方面就是有效地处理与内存相关的问题。你的工作越接近系统，你就需要面对越多的内存问题。有时这些问题非常琐碎，而更多时候它会演变成一个调试内存问题的恶梦。 常见的内存问题一共七种：&lt;/p&gt;
&lt;ol&gt;
</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>top</title>
    <link href="http://example.com/posts/top.html"/>
    <id>http://example.com/posts/top.html</id>
    <published>2024-11-24T15:24:01.000Z</published>
    <updated>2024-11-24T15:34:37.644Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ps -ef | grep xxx //xxx为进程名字<br></code></pre></td></tr></table></figure><p>通过ps找到进程号，通过如下命令可以查看该进程下的所有<strong>线程</strong>CPU利用率，注意这里是该进程PID下对应的所有线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">top -H -p pid<br></code></pre></td></tr></table></figure><p>例如进程pid为5810，则命令为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">top -H -p <span class="hljs-number">5810</span><br></code></pre></td></tr></table></figure><h2 id="一、top命令的使用帮助"><a href="#一、top命令的使用帮助" class="headerlink" title="一、top命令的使用帮助"></a>一、top命令的使用帮助</h2><h3 id="1、top命令的选项"><a href="#1、top命令的选项" class="headerlink" title="1、top命令的选项"></a>1、top命令的选项</h3><p>top命令的使用方法：top [-d number] | top [-bnp]</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>选项</td><td>解析</td></tr><tr><td>-b</td><td>以批处理模式操作；</td></tr><tr><td>-c</td><td>显示完整的治命令；</td></tr><tr><td>-d</td><td>屏幕刷新间隔时间；</td></tr><tr><td>-I</td><td>忽略失效过程；</td></tr><tr><td>-s</td><td>保密模式；</td></tr><tr><td>-S</td><td>累积模式；</td></tr><tr><td>-i&lt;时间&gt;</td><td>设置间隔时间；</td></tr><tr><td>-u&lt;用户名&gt;</td><td>指定用户名；</td></tr><tr><td>-p&lt;进程号&gt;</td><td>指定进程；</td></tr><tr><td>-n&lt;次数&gt;</td><td>循环显示的次数。</td></tr></tbody></table><h2 id="二、top命令的交换命令"><a href="#二、top命令的交换命令" class="headerlink" title="二、top命令的交换命令"></a>二、top命令的交换命令</h2><p>在top命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了-s选项， 其中一些命令可能会被屏蔽。</p><p><strong>也就是在top命令运行过程中，可以按下如下案件，会按照相应指令显示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Bash">h：显示帮助画面，给出一些简短的命令总结说明；<br>k：终止一个进程；<br>i：忽略闲置和僵死进程，这是一个开关式命令；<br>q：退出程序；<br>r：重新安排一个进程的优先级别；<br>S：切换到累计模式；<br>s：改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成ms。输入0值则系统将不断刷新，默认值是5s；<br>f或者F：从当前显示中添加或者删除项目；<br>o或者O：改变显示项目的顺序；<br>l：切换显示平均负载和启动时间信息；<br>m：切换显示内存信息；<br>t：切换显示进程和CPU状态信息；<br>c：切换显示命令名称和完整命令行；<br>M：以内存的使用资源排序显示；<br>P：根据CPU使用百分比大小进行排序；<br>T：根据时间/累计时间进行排序；<br>w：将当前设置写入~/.toprc文件中。<br></code></pre></td></tr></table></figure><h2 id="三、top显示信息解释"><a href="#三、top显示信息解释" class="headerlink" title="三、top显示信息解释"></a>三、top显示信息解释</h2><h3 id="1、top的第一行解释"><a href="#1、top的第一行解释" class="headerlink" title="1、top的第一行解释"></a>1、top的第一行解释</h3><p>在命令行输入top，进入系统监控信息的交互界面，第一行解释如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">10</span>:<span class="hljs-number">40</span>:<span class="hljs-number">53</span>          表示当前时间<br>up  <span class="hljs-number">7</span>:<span class="hljs-number">09</span>         系统运行时间，格式为时：分。<br><span class="hljs-number">3</span> users      当前登录用户数<br>load average: <span class="hljs-number">0.05</span>, <span class="hljs-number">0.03</span>, <span class="hljs-number">0.05</span>        系统负载，即任务队列的平均长度。 三个数值分别为 <span class="hljs-number">1</span>分钟、<span class="hljs-number">5</span>分钟、<span class="hljs-number">15</span>分钟前到现在的平均值。<br></code></pre></td></tr></table></figure><p><img src="https://hwwyaazvtut.feishu.cn/space/api/box/stream/download/asynccode/?code=MTVlZDRhZGZiM2ZmODg1N2E5YjFiZDAwMjkwNTkyYzVfNElvVk1FM2Z0bThxa3VlSmVBdU5MajJOeUpXbFVSc0lfVG9rZW46WmFGNWI1c1N4b0NMNUV4aFhZU2NVdERDbmZlXzE3MjEzMTI0NDQ6MTcyMTMxNjA0NF9WNA"></p><h3 id="2、top的第二、三行信息解释"><a href="#2、top的第二、三行信息解释" class="headerlink" title="2、top的第二、三行信息解释"></a>2、top的第二、三行信息解释</h3><p>在命令行输入top，进入系统监控信息的交互界面，第2、3行为进程和CPU的信息，当有多个CPU时，这些内容可能会超过两行，</p><p>第二行解释如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-number">216</span> total          进程总数<br><span class="hljs-number">1</span> running          正在运行的进程数<br><span class="hljs-number">215</span> sleeping       睡眠的进程数<br><span class="hljs-number">0</span> stopped          停止的进程数<br><span class="hljs-number">0</span> zombie          僵尸进程数<br><span class="hljs-number">0.0</span> us              用户空间占用CPU百分比<br><span class="hljs-number">0.1</span> sy              内核空间占用CPU百分比<br><span class="hljs-number">0.0</span> ni              用户进程空间内改变过优先级的进程占用CPU百分比<br><span class="hljs-number">99.9</span> id              空闲CPU百分比<br><span class="hljs-number">0.0</span> wa              等待输入输出的CPU时间百分比<br><span class="hljs-number">0.0</span> hi              硬中断（Hardware IRQ）占用CPU的百分比<br><span class="hljs-number">0.0</span> si              软中断（Software Interrupts）占用CPU的百分比<br><span class="hljs-number">0.0</span> st              虚拟CPU等待实际CPU的时间的百分比。<br></code></pre></td></tr></table></figure><h3 id="3、top的第四、五行信息解释"><a href="#3、top的第四、五行信息解释" class="headerlink" title="3、top的第四、五行信息解释"></a>3、top的第四、五行信息解释</h3><p>第四行及第五行主要显示系统的内存信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">KiB Mem: <span class="hljs-number">12119056</span> tota         物理内存总量<br><span class="hljs-number">10016948</span> <span class="hljs-built_in">free</span>                 空闲内存总量<br><span class="hljs-number">923252</span> used                    使用的物理内存总量<br><span class="hljs-number">1178856</span> buff/cache             用作内核缓存的内存量<br>KiB Swap: <span class="hljs-number">2093052</span> total         交换区总量<br><span class="hljs-number">267544</span> used                     使用的交换区总量<br><span class="hljs-number">2093052</span> <span class="hljs-built_in">free</span>                 空闲交换区总量<br><span class="hljs-number">0</span> used                         缓冲的交换区总量。<br><span class="hljs-number">10742188</span> avail Mem             代表可用于进程下一次分配的物理内存数量<br></code></pre></td></tr></table></figure><h3 id="4、top的进程信息"><a href="#4、top的进程信息" class="headerlink" title="4、top的进程信息"></a>4、top的进程信息</h3><p>top命令的交换界面主要区域，监控系统进程的实时状态信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C">PID            进程id<br>USER    进程所有者的用户名<br>PR            优先级<br>NI            nice值，负值表示高优先级，正值表示低优先级。<br>VIRT    进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>RES            进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>SHR            共享内存大小，单位kb<br>S            进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br>%CPU    上次更新到现在的CPU时间占用百分比<br>%MEM    进程使用的物理内存百分比<br>TIME+   进程使用的CPU时间总计，单位<span class="hljs-number">1</span>/<span class="hljs-number">100</span>秒<br>COMMAND 命令名/命令行<br></code></pre></td></tr></table></figure><p>其余监控项解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Bash">PPID        父进程<span class="hljs-built_in">id</span><br>RUSER        Real user name<br>UID            进程所有者的用户<span class="hljs-built_in">id</span><br>GROUP   进程所有者的组名<br>TTY            启动进程的终端名。不是从终端启动的进程则显示为 ?<br>P            最后使用的CPU，仅在多CPU环境下有意义<br>TIME        进程使用的CPU时间总计，单位秒<br>SWAP        进程使用的虚拟内存中，被换出的大小，单位kb<br>CODE        可执行代码占用的物理内存大小，单位kb<br>DATA        可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb<br>nFLT        页面错误次数<br>nDRT        最后一次写入到现在，被修改过的页面数。<br>WCHAN        若该进程在睡眠，则显示睡眠中的系统函数名<br>Flags        任务标志<br></code></pre></td></tr></table></figure><h2 id="四、top命令的基本使用"><a href="#四、top命令的基本使用" class="headerlink" title="四、top命令的基本使用"></a>四、top命令的基本使用</h2><p>1、查看当前系统cpu占用最高的进程</p><p>进入top交互界面后，按P键对CPU负载的进程进行排列。</p><p>2、查看当前系统内存使用最高的进程</p><p>进入top交互界面后，按M键对CPU负载的进程进行排列。</p><p>3、对排序的列进行高亮显示</p><p>敲击键盘‘x’（打开&#x2F;关闭排序列的加亮效果）</p><p>4、对运行的进程进行高亮显示</p><p>敲击键盘‘b’（打开关闭加亮效果），对运行的进程进行高亮显示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code clas</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>tcpdump</title>
    <link href="http://example.com/posts/tcpdump.html"/>
    <id>http://example.com/posts/tcpdump.html</id>
    <published>2024-11-24T15:21:54.000Z</published>
    <updated>2024-11-24T15:34:41.750Z</updated>
    
    <content type="html"><![CDATA[<p>tmpdump用于抓包，一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">tcpdump -i any host <span class="hljs-number">192.168</span>.x.x -s0 -vvv -w <span class="hljs-number">1.</span>cap<br></code></pre></td></tr></table></figure><ul><li>-i any 任何网络</li><li>-s0 防止截断</li><li>-w写入文件</li><li>-vvv详细的信息</li></ul><p>最终得到一个名为1.cap的文件，可以使用wireshark工具打开</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;tmpdump用于抓包，一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>sed</title>
    <link href="http://example.com/posts/sed.html"/>
    <id>http://example.com/posts/sed.html</id>
    <published>2024-11-24T15:21:02.000Z</published>
    <updated>2024-11-24T15:34:51.548Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/2301_78315274/article/details/133880462">https://blog.csdn.net/2301_78315274/article/details/133880462</a></p><p>1、将每行第一个111替换为AAA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">sed -i <span class="hljs-string">&quot;s/111/AAA/&quot;</span> a.txt<br></code></pre></td></tr></table></figure><p>-i作用会修改源文件，如这里的a.txt，如果不加-i就不会修改，只是命令回显改变了</p><p>2、替换所有的111为AAA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1.</span> sed -i <span class="hljs-string">&quot;s/111/AAA/g&quot;</span> a.txt<br></code></pre></td></tr></table></figure><p>3、替换第一到四行的所有111为AAA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">sed <span class="hljs-string">&quot;1,4s/111/AAA/g&quot;</span> a.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/2301_78315274/article/details/133880462&quot;&gt;https://blog.csdn.net/2301_78315274/article/details/133880462&lt;/a&gt;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>tar</title>
    <link href="http://example.com/posts/tar.html"/>
    <id>http://example.com/posts/tar.html</id>
    <published>2024-11-24T15:20:22.000Z</published>
    <updated>2024-11-24T15:34:46.611Z</updated>
    
    <content type="html"><![CDATA[<p>tar全称是tape archive，初衷是将多个文件写入磁带。首先，需要分清两个概念——打包与压缩。<strong>打包</strong>：将多个文件汇总成一个文件。<strong>压缩</strong>：将一个大文件通过压缩算法变成一个小文件。而tar命令执行的打包流程，真正执行压缩的是使用的压缩算法，比如gzip、bzip2、xz。tar命令在Linux社区内十分受欢迎，其中一个原因就是灵活性强，可以根据需要选择不同的压缩算法。</p><h2 id="一、常用参数"><a href="#一、常用参数" class="headerlink" title="一、常用参数"></a>一、常用参数</h2><ol><li>打包过程</li></ol><ul><li><code>-c</code>或<code>--create</code>。创建档案文件（可以理解为压缩包名）</li><li><code>-x</code>或<code>--extract</code>。解压（提取）文件</li><li><code>-f</code>或<code>--file</code>。指定档案文件，告诉tar命令，后面是文件名</li><li><code>-t</code>或<code>--list</code>。列出档案文件的内容</li><li><code>-v</code>或<code>--verbose</code>。显示处理文件的详细信息</li></ul><p>当多个参数简写在一起的时候，可以只用一个<code>-</code>。在实际使用中，最常使用的参数就是<code>-cvf</code>，即创建压缩包，并以显示详细处理信息。</p><ol start="2"><li>压缩过程</li></ol><ul><li><code>gzip</code>：参数<code>-z</code>或<code>--gzip</code>；文件拓展名：<code>.tar.gz</code>或<code>.tgz</code></li><li><code>bzip2</code>：<code>-j</code>或<code>--bzip2</code>；<code>.tar.bz2</code></li><li><code>xz</code>：<code>-J</code>或<code>--xz</code>；<code>.tar.xz</code></li></ul><p>压缩算法之间的区别：</p><table><thead><tr><th>压缩算法</th><th><code>gzip</code></th><th><code>bzip2</code></th><th><code>xz</code></th></tr></thead><tbody><tr><td>参数</td><td><code>-z</code></td><td><code>-j</code></td><td><code>-J</code></td></tr><tr><td>文件拓展名</td><td><code>.tar.gz</code></td><td><code>.tar.bz2</code></td><td><code>.tar.xz</code></td></tr><tr><td>压缩速度</td><td>快</td><td>中</td><td>慢</td></tr><tr><td>解压速度</td><td>快</td><td>中</td><td>中</td></tr><tr><td>压缩比</td><td>低</td><td>中</td><td>高</td></tr><tr><td>资源占用</td><td>少</td><td>中</td><td>高</td></tr><tr><td>适用场景</td><td>快速压缩&#x2F;解压</td><td>高压缩比</td><td>最大压缩比</td></tr></tbody></table><p>在日常使用中，使用<code>gzip</code>压缩就可以了，虽然压缩比低，但是它十分的快。并且如果被压缩的文件本身就比较小，使用<code>xz</code>压缩的结果也不会少太多。因此，日常使用建议<code>gzip</code>，既想要速度也想要压缩比建议<code>bzip2</code>，超大文件建议<code>xz</code>。</p><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><p>流程相似，只需更换压缩算法的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">压缩。压缩包名 + 被压缩的目录或者文件路径</span><br>tar -czvf archive_name.tar.gz path_to_compress<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压。用什么压缩算法压缩的，就用什么压缩算法解压</span><br>tar -xzvf archive_name.tar.gz <br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压到当前目录</span><br>tar -xzvf archive_name.tar.gz -C path_to_extract <br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压至指定目录。 -C （change directory）指出目录地址</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;tar全称是tape archive，初衷是将多个文件写入磁带。首先，需要分清两个概念——打包与压缩。&lt;strong&gt;打包&lt;/strong&gt;：将多个文件汇总成一个文件。&lt;strong&gt;压缩&lt;/strong&gt;：将一个大文件通过压缩算法变成一个小文件。而tar命令执行的打包流程</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>objdump</title>
    <link href="http://example.com/posts/objdump.html"/>
    <id>http://example.com/posts/objdump.html</id>
    <published>2024-11-24T15:19:04.000Z</published>
    <updated>2024-11-24T15:35:02.273Z</updated>
    
    <content type="html"><![CDATA[<p>objdump提供了对二进制文件进行反汇编和查看目标文件信息的能力。用于分析目标文件（object file）和可执行文件（executable file）。它可以显示二进制文件的汇编代码、符号表、段信息等，是理解程序底层实现、调试和逆向工程的有力助手。</p><h2 id="一、objdump的基本用法"><a href="#一、objdump的基本用法" class="headerlink" title="一、objdump的基本用法"></a>一、objdump的基本用法</h2><p>显示目标文件的反汇编代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -d your_binary<br></code></pre></td></tr></table></figure><p>该命令会显示目标文件中所有段的反汇编代码。这是一种深入了解程序执行逻辑的方式。</p><p>显示符号表信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -t your_binary<br></code></pre></td></tr></table></figure><p>该命令会显示目标文件的符号表，包括函数名、变量名等信息。</p><p>显示文件头信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -f your_binary<br></code></pre></td></tr></table></figure><p>该命令显示目标文件的文件头信息，包括文件格式、入口点地址等。objdump 的使用还可以根据需求加入一些参数来获取更详细的信息。</p><p>显示所有段的详细信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -p your_binary<br></code></pre></td></tr></table></figure><p>这将显示目标文件中所有段的详细信息，包括每个段的大小、偏移量等。</p><p>显示特定段的反汇编代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -s -j section_name your_binary<br></code></pre></td></tr></table></figure><p>这将显示指定段（section_name）的反汇编代码。</p><p>只显示符号表的信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -T your_binary<br></code></pre></td></tr></table></figure><p>该命令显示符号表的信息，但不显示反汇编代码。</p><p>显示源代码和反汇编代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -S your_binary<br></code></pre></td></tr></table></figure><p>这将显示源代码和反汇编代码的混合视图，方便理解源代码和汇编之间的对应关系。</p><p>以指定格式显示反汇编代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">objdump -M intel -d your_binary<br></code></pre></td></tr></table></figure><p>-M 参数允许你指定反汇编代码的输出格式，例如 intel 或 att。</p><p>以上是一些常见的 objdump 用法和参数。通过组合使用这些参数，你可以根据具体的需求更深入地了解目标文件的内部结构和代码执行逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;objdump提供了对二进制文件进行反汇编和查看目标文件信息的能力。用于分析目标文件（object file）和可执行文件（executable file）。它可以显示二进制文件的汇编代码、符号表、段信息等，是理解程序底层实现、调试和逆向工程的有力助手。&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>objcopy</title>
    <link href="http://example.com/posts/objcopy.html"/>
    <id>http://example.com/posts/objcopy.html</id>
    <published>2024-11-24T15:18:36.000Z</published>
    <updated>2024-11-24T15:35:05.897Z</updated>
    
    <content type="html"><![CDATA[<p>objcopy转换elf文件为bin文件，以下是一个将boot.elf转为boot.bin的命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">arm-linux-objcopy -O binary -R .note -R .comment -S boot.elf boot.bin<br></code></pre></td></tr></table></figure><ul><li>使用 -O binary (或–out-target&#x3D;binary) 输出为原始的二进制文件</li><li>使用 -R .note (或–remove-section) 输出文件中不要.note这个section，缩小了文件尺寸</li><li>使用 -S (或 –strip-all) 输出文件中不要重定位信息和符号信息，缩小了文件尺寸</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;objcopy转换elf文件为bin文件，以下是一个将boot.elf转为boot.bin的命令&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>nm</title>
    <link href="http://example.com/posts/nm.html"/>
    <id>http://example.com/posts/nm.html</id>
    <published>2024-11-24T15:17:52.000Z</published>
    <updated>2024-11-24T15:35:09.830Z</updated>
    
    <content type="html"><![CDATA[<p>nm命令是linux下针对某些特定文件的分析工具，能够列出库文件（.a、.lib）、目标文件（*.o）、可执行文件的符号表。</p><h2 id="一、nm命令的常用参数"><a href="#一、nm命令的常用参数" class="headerlink" title="一、nm命令的常用参数"></a>一、nm命令的常用参数</h2><ul><li>-A 或 -o 或 –print-file-name：打印出每个符号属于的文件</li><li>-a 或 –debug-syms：显示调试符号。</li><li>-B：等同于–format&#x3D;bsd，用来兼容MIPS的nm。</li><li>-C 或 –demangle：将低级符号名解码(demangle)成用户级名字。这样可以使得C++函数名具有可读性。</li><li>-D 或 –dynamic：显示动态符号。该任选项仅对于动态目标(例如特定类型的共享库)有意义。</li><li>-f forma 或 –format&#x3D;formatt：使用format格式输出。format可以选取bsd、sysv或posix，该选项在GNU的nm中有用。默认为bsd。</li><li>-g 或 –extern-only：仅显示外部符号。</li><li>-n 、-v 或 –numeric-sort：按符号对应地址的顺序排序，而非按符号名的字符顺序。</li><li>-p 或 –no-sort：按目标文件中遇到的符号顺序显示，不排序。</li><li>-P 或 –portability：使用POSIX.2标准输出格式代替默认的输出格式。等同于使用任选项-f posix。</li><li>-s 或 –print-armap：当列出库中成员的符号时，包含索引。索引的内容包含：哪些模块包含哪些名字的映射。</li><li>-r 或 –reverse-sort：反转排序的顺序(例如，升序变为降序)。</li><li>–size-sort：按大小排列符号顺序。该大小是按照一个符号的值与它下一个符号的值进行计算的。</li><li>-t radix 或 –radix&#x3D;radix：使用radix进制显示符号值。radix只能为“d”表示十进制、“o”表示八进制或“x”表示十六进制。</li><li>–target&#x3D;bfdname：指定一个目标代码的格式，而非使用系统的默认格式。</li><li>-u 或 –undefined-only：仅显示没有定义的符号(那些外部符号)。</li><li>-l 或 –line-numbers：对每个符号，使用调试信息来试图找到文件名和行号。对于已定义的符号，查找符号地址的行号。对于未定义符号，查找指向符号重定位入口的行号。如果可以找到行号信息，显示在符号信息之后。</li><li>-V 或 –version：显示nm的版本号。</li><li>–help：显示nm的任选项。</li></ul><p>举个栗子</p><p>编写源文件test.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;x&#x27;</span>;<br><span class="hljs-type">int</span> uninit;<br><span class="hljs-type">int</span> init = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> *ref = &amp;init;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> sta_int = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, ch);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译test.c文件 生成test.o</p><p><code>gcc -c test.c</code></p><p>用nm命令分析符号表</p><p><code>nm -n test.o</code>（-n以地址排序，方便查看）</p><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">                 U <span class="hljs-built_in">putchar</span><br><span class="hljs-number">0000000000000000</span> R ch<br><span class="hljs-number">0000000000000000</span> T function<br><span class="hljs-number">0000000000000000</span> D init<br><span class="hljs-number">0000000000000004</span> d sta_int<span class="hljs-number">.2182</span><br><span class="hljs-number">0000000000000004</span> C uninit<br></code></pre></td></tr></table></figure><h2 id="二、nm信息的含义"><a href="#二、nm信息的含义" class="headerlink" title="二、nm信息的含义"></a>二、nm信息的含义</h2><p>第一列：符号值，即该符号的起始地址<br>第二列：符号类型，各字母代表什么类型在下一小节中介绍<br>第三列：符号名称</p><h2 id="三、输出符号类型详解"><a href="#三、输出符号类型详解" class="headerlink" title="三、输出符号类型详解"></a>三、输出符号类型详解</h2><p>符号类型大写代表全局符号，小写代表本地符号</p><ul><li>A 该符号的值是绝对的，在以后的链接过程中，不允许进行改变。这样的符号值，常常出现在中断向量表中，例如用符号来表示各个中断向量函数在中断向量表中的位置。</li><li>B 该符号的值出现在非初始化数据段(bss)中。例如，在一个文件中定义全局static int test。则该符号test的类型为b，位于bss section中。其值表示该符号在bss段中的偏移。一般而言，bss段分配于RAM中。</li><li>C 该符号为common。common symbol是未初始话数据段。该符号没有包含于一个普通section中。只有在链接过程中才进行分配。符号的值表示该符号需要的字节数。例如在一个c文件中，定义int test，并且该符号在别的地方会被引用，则该符号类型即为C。否则其类型为B。</li><li>D 该符号位于初始话数据段中。一般来说，分配到data section中。例如定义全局int baud_table[5] &#x3D; {9600, 19200, 38400, 57600, 115200}，则会分配于初始化数据段中。</li><li>G 该符号也位于初始化数据段中。主要用于small object提高访问small data object的一种方式。</li><li>I 该符号是对另一个符号的间接引用。</li><li>N 该符号是一个debugging符号。</li><li>R 该符号位于只读数据区。例如定义全局const int test[] &#x3D; {123, 123};则test就是一个只读数据区的符号。注意在cygwin下如果使用gcc直接编译成MZ格式时，源文件中的test对应_test，并且其符号类型为D，即初始化数据段中。但是如果使用m6812-elf-gcc这样的交叉编译工具，源文件中的test对应目标文件的test,即没有添加下划线，并且其符号类型为R。一般而言，位于rodata section。值得注意的是，如果在一个函数中定义const char *test &#x3D; “abc”, const char test_int &#x3D; 3。使用nm都不会得到符号信息，但是字符串“abc”分配于只读存储器中，test在rodata section中，大小为4。</li><li>S 符号位于非初始化数据区，用于small object。</li><li>T 该符号位于代码区text section。</li><li>U 该符号在当前文件中是未定义的，即该符号的定义在别的文件中。例如，当前文件调用另一个文件中定义的函数，在这个被调用的函数在当前就是未定义的；但是在定义它的文件中类型是T。但是对于全局变量来说，在定义它的文件中，其符号类型为C，在使用它的文件中，其类型为U。</li><li>V 该符号是一个weak object。</li><li>W 该符号是没有被明确标记为weak object的弱符号类型。</li><li>该符号是a.out格式文件中的stabs symbol。</li><li>? 该符号类型没有定义。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nm命令是linux下针对某些特定文件的分析工具，能够列出库文件（.a、.lib）、目标文件（*.o）、可执行文件的符号表。&lt;/p&gt;
&lt;h2 id=&quot;一、nm命令的常用参数&quot;&gt;&lt;a href=&quot;#一、nm命令的常用参数&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Linux工具" scheme="http://example.com/categories/Linux%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux工具" scheme="http://example.com/tags/Linux%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
