[{"title":"git提交流程","path":"//posts/1.html","content":"一、Git下载及配置我们第一次用git或者是新电脑上重新安装git工具的时候，都需要重新配置一下这个工具。 Windows安装git官网网址https://git-scm.com/downloads下载速度慢，且有可能安装不成功。 附快速下载地址（国内下载站）：https://github.com/waylau/git-for-win 。 下载完之后，Windows中你在桌面上或者文件管理器中鼠标右键就可以看见Git Bash here，就是用来打开git bash的。 Linux安装gitlinux在终端中，输入sudo apt-get install git 下载完可以用命令git --version打印当前的git版本验证是否成功。下面正式开始Git的配置。 配置git基本信息接下来就是不管我们是第一次使用git工具，还是后来换电脑了，还是换成linux系统了，要想使用git都按照下面的方法配置一遍，才可以使用。 安装成功之后，在命令行中敲下如下命令 git config --list,显示当前的配置信息。 接下来设置提交仓库时的用户名信息 git config --global user.name &quot;张三&quot; 设置提交仓库是的邮箱信息 git config --global user.email &quot;xxxxxxxx@qq.com&quot; git设置关闭自动换行git config --global core.autocrlf false 为了保证文件的换行符是以安全的方法，避免windows与unix的换行符混用的情况，最好也加上这么一句 git config --global core.safecrlf true 其实这些信息都在一个配置文件中，就在当前用户的主目录下边的**.gitconfig**文件中，也可以直接打开这个文件cd ~,vim .gitconfig进行编辑。 git协议及秘钥配置git有四种协议：Git协议，http协议，本地协议，ssh协议。使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。大部分都是用ssh协议。这个不仅速度快，而且不用每次提交输入密码，可谓是省心省力。 下面就说一下ssh配置过程。(这个协议配置的过程不可缺少，不然就用不了这种协议。) 首先生成 RSA 密钥对 : ssh-keygen -t rsa -C &quot;xxxxxxxx@qq.com&quot;注意格式，一定要正确。 ssh和-keygen无空格 此时在用户主目录下就会有一个.ssh隐藏文件，进入该目录有一个id_rsa.pub文件，cat命令查看这个文件，复制下来然后在 github网站添加公钥 ，方法如下 在 Github 网站添加公钥：在右上角头像处点settings进入设置，然后点SSH and GPG keys,进入之后点击New SSH key 粘贴进去，随便给这个秘钥命个名，方便管理就行了。钥匙显示黑色即可。 此时配置就完成了。接下来就可以使用git了。 执行此命令验证是否成功ssh -T git@github.com 成功显示为：Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access. 二、先有本地库，后有远程库创建版本库可以理解为版本库就是本地文件的一个目录，也叫仓库。可以用git来管理和回退等 创建版本库：找到一个想被管理的文件夹，进入到文件夹里，输入命令git init,此时git就可以管理这个目录了，并且在文件夹下多出来了一个.git的隐藏文件夹。这个.git就是版本库。 Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。 工作区：就是你在电脑里能看到的目录，比如刚才的文件夹就是一个工作区 第一步：将文件添加到暂存区当我们想添加文件或者修改文件是需要添加到版本库中的，否则无法被git跟踪管理呀，所以当我们添加或者修改文件时，先要用git add filename添加到暂存区中，filename为.的时候代表当前目录下所有文件都添加到暂存区 第二步：将文件提交到分支git commit -m &quot;message&quot;，将文件提交到了分支。 添加远程库我们已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。 首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在Repository name填入项目名字，比如我们叫learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。 现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令： git remote add origin git@github.com:mengchao666/learngit.git 请千万注意，把上面的mengchao666替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。下一步，就可以把本地库的所有内容推送到远程库上： git push -u origin master把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样,从现在起，只要本地作了提交，就可以通过命令： git push origin master 三、先有远程库，后有本地库现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库： git clone git@github.com:mengchao666/learngit.git 可以使用git clone -b branch克隆指定的分支后续修改可以使用如下命令提交 123git add .git commit -m &quot;message&quot;git push 四、企业开发流程在公司中做项目，一般项目代码都在公共仓库中，我们将其称为远程仓，一般按照如下步骤开发1、将远程仓fork一份到个人仓2、git clone个人仓代码到本地3、使用git remote -v命令查看，此时本地关联的origin为个人仓4、将本地代码关联到公司的远程仓，方便拉取最新代码，命令如下： 1git remote add upstream 公共仓地址 此时再次使用git remote -v可以看到已经关联了upstream为远程仓5、在开发需求和问题单修改之前，一般使用git pull upstream命令将远程仓代码更新至本地6、修改代码后提交 123git add .git commit -m &quot;message&quot;git push origin branch 7、在github&#x2F;gitlab页面创建MR申请，一般此时就可以了，找人加分就合入了8、但是如果在创建MR申请时，提示冲突，此时需要解决冲突，解决如下： 1git pull upstream 此时会提示哪些文件有冲突，使用ctrl + F搜索&gt;&gt;&gt;,有此标志的即为冲突的地方，保留自己想要的代码，重新提交add commit push即可。 企业开发流程中，通常有远程仓新建了一个分支，个人远程仓没有此分支，需要更新，可按照如下步骤更新个人仓代码分支 123git checkout -b 新分支名称 upstream/新分支名称git pull upstream 新分支名称git push origin 新分支名称 五、代码回退等操作工作区的恢复(此时还没有add，代码回退)使用checkout恢复工作区 git checkout . （全部修改），git checkout --file改回一个文件,工作区—&gt;还没add add的撤销git reset就是回退到指定的commitID,,使用git commit –amend时追加，不会生成新的commitID,是在原来的commitID基础上进行修改的。 HEAD指向当前最新的commitID，所以仅仅add,没有commit，此时的最新的commitID还是之前的 12git reset --hard HEAD // 不保留本地修改，回退git reset --mixed HEAD //保留本地修改，可以重新git add 简单理解git reset –xxx HEAD命令，就是将代码回退到了最新的一次commitID的代码状态，hard不保留本地代码工作空间的修改，而mixed保留 commit后的撤销123git reset --hard HEAD^ // 不保留本地修改，回退到上一次的commitID状态git reset --mixed HEAD^ // 保留本地修改，撤销git commit,并且撤销git addgit reset --soft HEAD^ //保留本地修改，撤销commit,不撤销add 六、git的一些其他操作查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 当代码仓有子仓情形下的一些命令：git submodule update --init --remotegit submodule foreach git checkout branchgit submodule foreach --recursive 七、同时提交两个MR当我们同时修改多个问题单，或者同时处理需求时，可能需要同时提交多分不同代码，此时处理方法如下： 1、本地创建一个新的分支来处理第一个MR 1git checkout -b mr1-branch 2、提交第一个MR。修改代码，git add、git commit，git push 1git push -u origin mr1-branch 3、切换回原来的分支，以main分支为例git checkout main4、创建第二个分支处理第二个MR 1git checkout -b mr2-branch 5、提交第二个MR。修改代码，git add、git commit，git push 1git push -u origin mr2-branch","tags":["git"],"categories":["git"]},{"title":"addr2line","path":"/posts/addr2line.html","content":"addr2line是一个将地址转换为文件名和行号的工具。给定可执行文件(如exe&#x2F;a.out等)中的地址或可重定位对象(如so,ko等)部分中的偏移量，它会使用调试信息来确定与之相关的文件名和行数。 用户态coredump，一般使用gdb调试接口，gdb一般封装了addr2line，可以解析文件名和行号。如果环境配置了不生成coredump，可以使用addr2line调试。所以addr2line一般解析内核Call trace使用较多。 一、使用方法12基本用法：addr2line [选项] [地址] 常用选项如下： 选项 描述 -e 设置输入文件名称，默认为a.out -i 解析内联函数 -f 显示函数名 -C 解析函数名 -p 以好读的方式显示 需要注意的是使用addr2line的时候，可执行文件或重定位文件一定是要带调试信息的 二、用户态普通程序崩溃使用方法 1addr2line -e 进程名 IP指令地址 -f 用户态程序崩溃，当没有coredump产生时，可以使用如下方法假设我们的程序名称为segfault,当程序崩溃是，dmesg日志中会有报错信息: 123[root@localhost ~]# dmesg[134563.793925] segfault[53791]: segfault at 0 ip 0000000000400546 sp 00007fff7956af70 error 6 in segfault[400000+1000][134563.793946] Code: 01 5d c3 90 c3 66 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 f3 0f 1e fa eb 8a 55 48 89 e5 48 c7 45 f8 00 00 00 00 48 8b 45 f8 &lt;c7&gt; 00 00 00 00 00 b8 00 00 00 00 5d c3 66 2e 0f 1f 84 00 00 00 00 此时我们注意到IP指令地址为0000000000400546使用addr2line查看程序挂的位置： 1addr2line -e segfault 0x0000000000400546 -f 三、动态链接库程序崩溃使用方法 1addr2line -e 动态链接库名称 IP指令地址-基地址 -f 假设我们有一个程序名为test，链接了一个libfoo.so，程序运行时崩溃，dmesg查看日志如下： 123[root@localhost ~]# dmesg[70567.416655] test[27722]: segfault at 0 ip 00007ffa1f588580 sp 00007fffa964e698 error 6 in libfoo.so[7ffa1f588000+1000][70567.427374] Code: ff e8 64 ff ff ff c6 05 bd 0a 20 00 01 5d c3 0f 1f 00 c3 0f 1f 80 00 00 00 00 f3 0f 1e fa e9 77 ff ff ff 0f 1f 80 00 00 00 00 &lt;c7&gt; 04 25 00 00 00 00 00 00 00 00 0f 0b 00 00 00 f3 0f 1e fa 48 83 根据日志可知，段错误发生的位置是在test进程调用的libfoo.so库里，我们先使用ldd找到动态库的位置，如下： 12345[root@localhost 69]# ldd test linux-vdso.so.1 (0x00007ffd15b24000) libfoo.so =&gt; ./libfoo.so (0x00007f8c01879000) libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f8c014b4000) /lib64/ld-linux-x86-64.so.2 (0x00007f8c01a7b000) 00007ffa1f588580为程序崩溃点IP指令地址，使用dmesg消息中ip指令地址减去动态库基址值(00007ffa1f588580 -7ffa1f588000&#x3D;580), 差值0x580为错误点在动态库的地址，调用addr2line, 注意-e参数后文件名改为动态库名: 1addr2line -e libfoo.so 580 -f -p 四、内核驱动程序运行崩溃使用方法： 1addr2line -e xxx.ko 地址偏移量 -f 本人所用主机即属于一旦发生Oops，就会触发panic，因此总是无法查看Oops时的dmesg日志，经查阅资料，发现是内核参数panic_on_oops的原因导致的，因为该参数被设置为1，所以Oops会触发panic，从而导致机器总是死机重启，无法查看Oops时的dmesg日志。下面提供两种方法修改Oops内核参数，使其不会在Oops的时候触发panic导致死机重启。 方法一：修改 &#x2F;proc下内核参数文件内容，临时生效，重启后失效。 1echo 0 &gt; /proc/sys/kernel/panic_on_oops 方法二：修改&#x2F;etc&#x2F;sysctl.conf 文件的内核参数来永久更改。 1234567891011121314151617181920[root@localhost ~]# vi /etc/sysctl.conf[root@localhost ~]# cat /etc/sysctl.conf# sysctl settings are defined through files in# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.## Vendors settings live in /usr/lib/sysctl.d/.# To override a whole file, create a new file with the same in# /etc/sysctl.d/ and put new settings there. To override# only specific settings, add a file with a lexically later# name in /etc/sysctl.d/ and put new settings there.## For more information, see sysctl.conf(5) and sysctl.d(5).kernel.panic_on_oops=0[root@localhost ~]# cat /proc/sys/kernel/panic_on_oops1 [root@localhost ~]# sysctl -pkernel.panic_on_oops = 0[root@localhost ~]#[root@localhost ~]# cat /proc/sys/kernel/panic_on_oops0 假设内核某ko运行后发生如下错误： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[root@localhost ~]# dmesg[ 1039.918606] my_oops_init[ 1039.918616] BUG: unable to handle kernel NULL pointer dereference at 0000000000000000[ 1039.926442] PGD 0 P4D 0[ 1039.928979] Oops: 0002 [#1] SMP NOPTI[ 1039.932637] CPU: 34 PID: 3843 Comm: insmod Kdump: loaded Tainted: G OE --------- - - 4.18.0-394.el8.x86_64 #1[ 1039.943756] Hardware name: New H3C Technologies Co., Ltd. H3C UniServer R4950 G5/RS45M2C9SB, BIOS 5.37 09/30/2021[ 1039.954000] RIP: 0010:do_oops+0x5/0x11 [oops][ 1039.958364] Code: Unable to access opcode bytes at RIP 0xffffffffc02e6fdb.[ 1039.965231] RSP: 0018:ffffb9d40a8c7cb0 EFLAGS: 00010246[ 1039.970449] RAX: 000000000000000c RBX: 0000000000000000 RCX: 0000000000000000[ 1039.977573] RDX: 0000000000000000 RSI: ffff98942ee96758 RDI: ffff98942ee96758[ 1039.984697] RBP: ffffffffc02e7011 R08: 0000000000000000 R09: c0000000ffff7fff[ 1039.991822] R10: 0000000000000001 R11: ffffb9d40a8c7ad8 R12: ffffffffc02e9000[ 1039.998944] R13: ffffffffc02e9018 R14: ffffffffc02e91d0 R15: 0000000000000000[ 1040.006069] FS: 00007f1b8d93b740(0000) GS:ffff98942ee80000(0000) knlGS:0000000000000000[ 1040.014145] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033[ 1040.019884] CR2: ffffffffc02e6fdb CR3: 0000000145c02000 CR4: 0000000000350ee0[ 1040.027008] Call Trace:[ 1040.029454] my_oops_init+0x16/0x19 [oops][ 1040.033550] do_one_initcall+0x46/0x1d0[ 1040.037390] ? do_init_module+0x22/0x220[ 1040.041318] ? kmem_cache_alloc_trace+0x142/0x280[ 1040.046023] do_init_module+0x5a/0x220[ 1040.049777] load_module+0x14ba/0x17f0[ 1040.053530] ? __do_sys_finit_module+0xb1/0x110[ 1040.058059] __do_sys_finit_module+0xb1/0x110[ 1040.062411] do_syscall_64+0x5b/0x1a0[ 1040.066077] entry_SYSCALL_64_after_hwframe+0x65/0xca[ 1040.071130] RIP: 0033:0x7f1b8c8509bd[ 1040.074701] Code: ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 &lt;48&gt; 3d 01 f0 ff ff 73 01 c3 48 8b 0d 9b 54 38 00 f7 d8 64 89 01 48[ 1040.093446] RSP: 002b:00007ffc4df0a968 EFLAGS: 00000246 ORIG_RAX: 0000000000000139[ 1040.101004] RAX: ffffffffffffffda RBX: 00005653fb1997d0 RCX: 00007f1b8c8509bd[ 1040.108126] RDX: 0000000000000000 RSI: 00005653f980c8b6 RDI: 0000000000000003[ 1040.115251] RBP: 00005653f980c8b6 R08: 0000000000000000 R09: 00007f1b8cbd9760[ 1040.122375] R10: 0000000000000003 R11: 0000000000000246 R12: 0000000000000000[ 1040.129498] R13: 00005653fb1997b0 R14: 0000000000000000 R15: 0000000000000000[ 1040.136623] Modules linked in: oops(OE+) binfmt_misc xt_CHECKSUM ipt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables nfnetlink rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs lockd grace fscache bridge stp llc intel_rapl_msr intel_rapl_common amd64_edac_mod edac_mce_amd amd_energy kvm_amd kvm irqbypass ipmi_ssif pcspkr crct10dif_pclmul crc32_pclmul ghash_clmulni_intel rapl joydev ccp sp5100_tco i2c_piix4 k10temp ptdma acpi_ipmi ipmi_si sunrpc vfat fat xfs libcrc32c sd_mod t10_pi sg crc32c_intel ast drm_vram_helper drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm_ttm_helper ttm ahci drm libahci nfp(OE) igb libata dca i2c_algo_bit dm_mirror dm_region_hash dm_log dm_mod ipmi_devintf ipmi_msghandler[ 1040.208357] CR2: 0000000000000000[ 1040.211668] ---[ end trace b69c1e8998070273 ]---[ 1040.230185] RIP: 0010:do_oops+0x5/0x11 [oops][ 1040.234540] Code: Unable to access opcode bytes at RIP 0xffffffffc02e6fdb.[ 1040.241409] RSP: 0018:ffffb9d40a8c7cb0 EFLAGS: 00010246[ 1040.246626] RAX: 000000000000000c RBX: 0000000000000000 RCX: 0000000000000000[ 1040.253750] RDX: 0000000000000000 RSI: ffff98942ee96758 RDI: ffff98942ee96758[ 1040.260876] RBP: ffffffffc02e7011 R08: 0000000000000000 R09: c0000000ffff7fff[ 1040.267998] R10: 0000000000000001 R11: ffffb9d40a8c7ad8 R12: ffffffffc02e9000[ 1040.275124] R13: ffffffffc02e9018 R14: ffffffffc02e91d0 R15: 0000000000000000[ 1040.282247] FS: 00007f1b8d93b740(0000) GS:ffff98942ee80000(0000) knlGS:0000000000000000[ 1040.290323] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033[ 1040.296061] CR2: ffffffffc02e6fdb CR3: 0000000145c02000 CR4: 0000000000350ee0 Oops: 0002 – 错误码Oops: [#1] – Oops发生的次数CPU: 34 – 表示Oops是发生在CPU34上关键信息如下，这里提示在操作函数do_oops的时候出现异常，地址偏移量0x5： 1[ 1039.954000] RIP: 0010:do_oops+0x5/0x11 [oops] 为什么这条信息关键? 因为其含有指令指针RIP；指令指针IP&#x2F;EIP&#x2F;RIP的基本功能是指向要执行的下一条地址。在8080 8位微处理器上的寄存器名称是PC（program counter，程序计数器），从8086起，被称为IP（instruction pointer，指令指针）。主要区别在与PC指向正在执行的指令，而IP指向下一条指令。在64位模式下，指令指针是RIP寄存器。这个寄存器保存着下一条要执行的指令的64位地址偏移量。64位模式支持一种新的寻址模式，被称为RIP相对寻址。使用这个模式，有效地址的计算方式变为RIP（指向下一条指令）加上位移量。 由此可以看出内核执行到do_oops+0x5&#x2F;0x11这个地址的时候出现异常，我们只需要找到这个地址对应的代码即可。 do_oops指示了是在do_oops函数中出现的异常， 0x5表示出错的地址偏移量， 0x11表示do_oops函数的大小。 123打印格式：do_oops+0x5/0x11 [oops] 即：symbol+offset/size [module] symbol: 符号 offset：地址偏移量 size：函数的长度 module: 所属内核模块 使用如下命令解析 1addr2line -e oops.ko 0x5 -f -p","tags":["Linux工具"],"categories":["Linux工具"]},{"title":"个人博客网站部署&文章提交","path":"/posts/网站部署-写作.html","content":"一、网站部署1、首先在github上创建自己的一个仓库，仓库名字为mengchao666.github.io 2、将https://github.com/mengchao666/blog-demo代码下载到本地，用VScode打开 3、安装node.js，pnpm，hexo 123node.js官网安装：https://nodejs.cn/download/pnpm安装：npm install pnpm -ghexo安装：npm install hexo-cli -g 4、在Vscode打开的项目终端下执行如下命令： 12pnpm ipnpm dev 5、使用hexo deploy命令部署，打开mengchao666.github.io即可 6、新增文章使用如下命令新增 例如：hexo new post “网站部署” 1hexo new post &lt;title&gt; 7、新增文章后，使用命令部署提交到github 12hexo cleanhexo deploy 更多操作可以参考：https://xaoxuu.com/wiki/stellar/topic.html","tags":["网站"],"categories":["网站"]},{"title":"友链","path":"/about/index.html","content":"我的小伙伴们 github 如何交换友链？ 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 我们需要有一定的有效互动： 先友后链：与 我 有至少 半年 的有效互动"},{"title":"探索者笔记","path":"/explore/notes/探索者笔记.html","content":"memos 说说 本页面数据来源于：memos"},{"title":"工具库","path":"/explore/sites/工具库.html","content":"工具库 VIP电影在线观看https://vip1280.net/文件格式转换https://convertio.co/zh/"},{"path":"/static/js/snow.js","content":"const message = { toast: (msg, duration) => { const d = Number(isNaN(duration) ? 2000 : duration); var el = document.createElement('div'); el.classList.add('toast'); el.classList.add('show'); el.innerHTML = msg; document.body.appendChild(el); setTimeout(function () { document.body.removeChild(el) }, d); }, } const Config = { snow: ['❄️', '☃️', '❄', '※', '❅', '❆', '❈', '❉', '❊', '❋'], color: '#d9e2e7', speed: 10, dom: document.getElementsByTagName('body')[0], interval: 800, active: false }; // 从 localStorage 获取雪花模式状态 const storedSnowActive = localStorage.getItem('snowActive'); Config.active = storedSnowActive === 'true'; // 确保 DOM 元素存在 if (!Config.dom) { throw Error('请获取存在的DOM'); } const $canvas = document.createElement('div'); function useStyle(dom, style) { for (let sKey in style) { dom.style[sKey] = style[sKey]; } } useStyle($canvas, { width: '100%', height: '100%', position: 'fixed', top: 0, left: 0, pointerEvents: 'none', zIndex: 100 }); const matchDarkMode = window.matchMedia('(prefers-color-scheme: dark)'); function handleColorSchemeChange(e) { Config.color = e.matches ? 'rgb(255, 255, 255)' : 'rgb(149, 141, 186)'; } matchDarkMode.addEventListener('change', handleColorSchemeChange); handleColorSchemeChange(matchDarkMode); let snowInterval; function startSnowInterval() { return setInterval(() => { const $snow = document.createElement('div'); $snow.innerText = Config.snow[Math.floor(Math.random() * Config.snow.length)]; useStyle($snow, { display: 'inline-block', color: Config.color, fontSize: Math.floor(Math.random() * (25 - 14 + 1) + 14) + 'px', position: 'absolute', top: 0, left: Math.floor(Math.random() * 100) + '%', transition: 'transform ' + Config.speed + 's linear,opacity ' + Config.speed + 's linear', transform: 'translateY(-100%)', opacity: Math.random() + 0.3 }); setTimeout(() => { useStyle($snow, { transform: 'translate(0, ' + window.innerHeight + 'px) rotate(480deg)', opacity: 0 }); $snow.addEventListener('transitionend', () => { $snow.remove(); }); }, 100); $canvas.appendChild($snow); }, Config.interval); } function toggleSnow() { if (Config.active) { clearInterval(snowInterval); $canvas.innerHTML = ''; Config.active = false; message.toast(\"切换到晴天模式\"); } else { snowInterval = startSnowInterval() Config.active = true; message.toast(\"切换到下雪模式\"); } localStorage.setItem('snowActive', Config.active); } // 在页面加载时应用之前的状态 if (Config.active) { snowInterval = startSnowInterval() } Config.dom.appendChild($canvas);"},{"title":"牛客零基础入门前端","path":"/wiki/niuke/牛客零基础入门前端.html","content":"01 HTMLFED1 表单类型描述请依次写出以下类型的输入框。 类型为密码，默认值为 “nowcoder” 类型为复选框，且状态为已勾选 我的解答1234&lt;form&gt; &lt;input type=&quot;password&quot; value=&quot;nowcoder&quot; /&gt; &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;&lt;/form&gt; 注意点： 类型为复选框，input 属性的 checked &#x3D; “checked” FED2 表格结构描述请写出具有表格标题为 “nowcoder” 的 2 行 3 列表格结构。 我的解答1234567891011121314151617&lt;table&gt; &lt;caption&gt; nowcoder &lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; mdn 示例 Council budget (in £) 2018 Items Expenditure Donuts 3,000 Stationery 18,000 Totals 21,000 FED3 图像标签属性描述请写出具有标题属性和代替文本属性的图片标签。 我的解答1&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;&quot; /&gt; FED4 新窗口打开文档描述请写出可以在新窗口打开文档的 a 标签。 我的解答1&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; 注意点target 规定在何处打开目标 URL。仅在 href 属性存在时使用 _blank：新窗口打开。 _parent：在父窗口中打开链接。 _self：默认，当前页面跳转。 _top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。 FED5 自定义列表描述请写出列表项为 “nowcoder” 且列表项内容也为 “nowcoder” 的自定义列表。 我的解答1234&lt;dl&gt; &lt;dt&gt;nowcoder&lt;/dt&gt; &lt;dd&gt;nowcoder&lt;/dd&gt;&lt;/dl&gt; 注意点 html5 前用得多，普通列表标签，既不是 ul，也不是 ol FED6 语义化标签描述请使用语义化标签创建头部标签且包含导航标签。注意：只需在 html 模块填写标签结构，有且仅有一个头部标签和一个导航标签。 我的解答123&lt;header&gt; &lt;nav&gt;&lt;/nav&gt;&lt;/header&gt; 注意点 就普通嵌套，看报错才知道标签名 FED7 音频媒体标签属性描述请写出具有控件功能的音频媒体标签。 我的解答1&lt;audio src=&quot;&quot; controls&gt;&lt;/audio&gt; 注意点 controls：如果声明了该属性，浏览器将提供一个包含声音，播放进度，播放暂停的控制面板，让用户可以控制音频的播放。 FED8 视频媒体标签属性描述请写出具有当视频的媒体数据加载期间发生错误时执行某个方法事件的视频媒体标签。 我的解答1&lt;video src=&quot;&quot; onerror=&quot;fn()&quot; controls&gt;&lt;/video&gt;&lt;audio src=&quot;&quot; controls&gt;&lt;/audio&gt; 注意点 controls：如果存在该属性，浏览器会在视频底部提供一个控制面板，允许用户控制视频的播放，包括音量、拖动进度、暂停或恢复播放。 02 CSSFED9 CSS 选择器——标签、类、ID 选择器描述请将 html 模块中字体内容是 “红色” 的字体颜色设置为 “rgb(255, 0, 0)”，”绿色” 设置为 “rgb(0, 128, 0)”，”黑色” 设置为 “rgb(0, 0, 0)”，且字体大小都为 20px。 我的解答1234567891011121314&lt;style&gt; .green &#123; color: rgb(0, 128, 0); font-size: 20px; &#125; #black &#123; color: rgb(0, 0, 0); font-size: 20px; &#125;&lt;/style&gt;&lt;div style=&quot;color:rgb(255, 0, 0);font-size:20px&quot;&gt;红色&lt;/div&gt;&lt;div class=&quot;green&quot;&gt;绿色&lt;/div&gt;&lt;div id=&quot;black&quot;&gt;黑色&lt;/div&gt; 注意点 类选择器：. id 选择器：# FED10 CSS 选择器——伪类选择器描述请将 html 模块中 ul 列表的第 2 个 li 标签和第 4 个 li 标签的背景颜色设置成 “rgb(255, 0, 0)”。 我的解答1234567891011&lt;style&gt; li:nth-child(2n) &#123; background-color: rgb(255, 0, 0); &#125;&lt;/style&gt;&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt;&lt;/ul&gt; 注意点 伪类选择器 nth-child(2n)：偶数个 nth-child(2n-1)：奇数个 FED11 CSS 选择器——伪元素描述请给 html 模块的 div 元素加一个后伪元素，且后伪元素的宽度和高度都是 20px，背景颜色为 “rgb(255, 0, 0)”。 我的解答12345678910&lt;style&gt; div::after &#123; content: &quot;&quot;; height: 20px; width: 20px; background-color: rgb(255, 0, 0); display: inline-block; &#125;&lt;/style&gt;&lt;div&gt;&lt;/div&gt; 注意点 ::after 会创建一个 伪元素，作为所选元素的最后一个子元素 包含 content，可以表示文字，图片等 display: inline-block; 要设置为块级元素才能给其设置宽高 FED12 按要求写一个圆描述请将 html 模块的 div 元素设置为一个半径是 50px 的圆，且边框为 1px 的黑色实线。要求： 圆角属性仅设置一个值 圆角属性单位请使用 px 注意：由于圆角属性设置广泛且都可以实现题目效果，所以请按照要求规范书写。 我的解答123456789&lt;style&gt; div &#123; width: 100px; height: 100px; border-radius: 50px; border: 1px solid black; &#125;&lt;/style&gt;&lt;div&gt;&lt;/div&gt; 注意点 border-radius 设置为 50%就是一个圆 FED13 设置盒子宽高描述请将 html 模块类为 “box” 的 div 元素宽度和高度都设置为 100px，且内间距为 20px、外间距为 10px。 我的解答123456789&lt;style&gt; .box &#123; width: 100px; height: 100px; padding: 20px; margin: 10px; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt; 注意点 padding 内边距，margin 外边距 FED14 浮动和清除浮动描述请将类为 “left” 的 div 元素和类为 “right” 的 div 元素在同一行上向左浮动，且清除类为 “wrap” 的父级 div 元素内部的浮动。 我的解答123456789101112131415161718192021222324&lt;style&gt; .wrap::after &#123; content: &quot;&quot;; display: block; clear: both; &#125; .left &#123; width: 100px; height: 100px; background-color: red; float: left; &#125; .right &#123; width: 100px; height: 100px; background-color: yellow; float: left; &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt; 注意点 float 属性左右占位，上下不占位，所以下面的元素会浮动上来，所以可以在父类盒子加一个:: after 伪类元素，设置 clear:both 闭合父盒子的边界以达到清除浮动的目的。 css - 清除浮动（clearfix）的常见方法 - front-end development - SegmentFault 思否 FED15 段落标识描述请将下面这句话以段落的形式展示在浏览器中——“牛客网是一个专注于程序员的学习和成长的专业平台。” 我的解答1&lt;p&gt;牛客网是一个专注于程序员的学习和成长的专业平台。&lt;/p&gt; 注意点 考察 p 标签的使用方法 FED16 圣诞树描述圣诞节来啦！请用 CSS 给你的朋友们制作一颗圣诞树吧~这颗圣诞树描述起来是这样的： “topbranch”是圣诞树的上枝叶，该上枝叶仅通过边框属性、左浮动、左外边距即可实现。边框的属性依次是：宽度为 100px、是直线、颜色为 green（未显示的边框颜色都为透明） “middleBranch”是圣诞树的中枝叶，该上枝叶仅通过边框属性即可实现。边框的属性依次是：宽度为 200px、是直线、颜色为 green（未显示的边框颜色都为透明） “base”是圣诞树的树干，该树干仅通过左外边距实现居中于中枝叶。树干的宽度、高度分别为 70px、200px，颜色为 gray。 注意： 上枝叶、树干的居中都是通过左外边距实现的 没有显示的边框，其属性都是透明（属性） 仅通过 border 属性完成边框的所有属性设置 我的解答12345678910111213141516171819202122232425262728293031323334&lt;style&gt; .topbranch &#123; width: 0px; height: 0px; border-width: 100px; border-color: green; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent; border-style: solid; float: left; margin-left: 100px; &#125; .middleBranch &#123; width: 0px; height: 0px; border-width: 200px; border-color: green; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent; border-style: solid; &#125; .base &#123; width: 70px; height: 200px; background-color: grey; margin-left: 165px; &#125;&lt;/style&gt;&lt;section class=&quot;topbranch&quot;&gt;&lt;/section&gt;&lt;section class=&quot;middleBranch&quot;&gt;&lt;/section&gt;&lt;section class=&quot;base&quot;&gt;&lt;/section&gt; 注意点 1234border-color: green;border-left-color: transparent;border-right-color: transparent;border-top-color: transparent; 这样做会显示出三角形，把其他边颜色设置为 transparent 透明 FED17 固定定位描述请将 html 模块类为”box”的 div 元素固定在视口的左上角。 我的解答12345678&lt;style&gt; .box &#123; position: fixed; top: 0; left: 0; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt; 注意点 position: fixed;可以让元素在浏览器某一个位置固定，不随滚动条而移动 FED18 CSS 单位（一）描述请将 html 模块中类为”box”的 div 元素的宽度和高度设置为自身字体大小的 4 倍。 我的解答1234567&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;style&gt; .box &#123; width: 4em; height: 4em; &#125;&lt;/style&gt; 注意点 em 指的相对父级的字体大小 FED19 CSS 单位（二）描述请将 html 模块 div 元素的宽度和高度设置为 html 根元素字体大小的 4 倍。注意：只需在 css 模块补全样式内容，请勿修改 html 模块。 我的解答1234567&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;style&gt; .box &#123; width: 4rem; height: 4rem; &#125;&lt;/style&gt; 注意点 rem 指的相对根级的字体大小(:root&#x2F;html) 03 JAVASCRIPTFED20 基本数据类型检测描述请补全 JavaScript 函数，要求以字符串的形式返回参数的类型。注意：只需检测基本数据类型。 我的解答12345&lt;script&gt; function _typeof(value) &#123; return typeof value; &#125;&lt;/script&gt; 注意点 typeof 可以返回数据类型 FED21 检测复杂数据类型描述请补全 JavaScript 函数，要求以 Boolean 的形式返回第一个参数是否属于第二个参数对象的实例。 我的解答12345&lt;script&gt; function _instanceof(left, right) &#123; return left instanceof right; &#125;&lt;/script&gt; 注意点 instanceof 可以检验参数是否为某个对象的实例 FED22 数据类型转换描述请补全 JavaScript 函数，要求以字符串的形式返回两个数字参数的拼接结果。示例： _splice(223,233) -&gt; “223233” _splice(-223,-233) -&gt; “-223-233” 我的解答123456&lt;script type=&quot;text/javascript&quot;&gt; // 填写JavaScript function _splice(left, right) &#123; return left.toString() + right.toString(); &#125;&lt;/script&gt; 注意点 使用toString把数字类型转为字符串类型，再相加 FED23 阶乘描述请补全 JavaScript 函数，要求返回数字参数的阶乘。注意：参数为大于等于 0 的整数。 我的解答1234567&lt;script type=&quot;text/javascript&quot;&gt; function _factorial(number) &#123; if (number &lt; 0) return; if (number == 1 || number == 0) return 1; return number * _factorial(number - 1); &#125;&lt;/script&gt; 注意点 使用递归完成阶乘更加简洁"}]